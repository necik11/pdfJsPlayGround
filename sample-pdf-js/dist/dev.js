/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./main.js":
/*!*****************!*\
  !*** ./main.js ***!
  \*****************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _pdf_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pdf.mjs */ \"./pdf.mjs\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pdf_mjs__WEBPACK_IMPORTED_MODULE_0__]);\n_pdf_mjs__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\r\n// If absolute URL from the remote server is provided, configure the CORS\r\n// header on that server.\r\nvar url = 'https://raw.githubusercontent.com/necik11/pdfJsPlayGround/4b4dd7d7612599b2368e142bac7fd7317db51ac0/brokenPDF.pdf';\r\n\r\n// Loaded via <script> tag, create shortcut to access PDF.js exports.\r\n// var { pdfjsLib } = globalThis;\r\n\r\n// The workerSrc property shall be specified.\r\n// pdfjsLib.GlobalWorkerOptions.workerSrc = 'mozilla.github.io/pdf.js/build/pdf.worker.mjs';\r\n_pdf_mjs__WEBPACK_IMPORTED_MODULE_0__.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.0.379/pdf.worker.mjs';\r\n\r\n// Asynchronous download of PDF\r\nvar loadingTask = _pdf_mjs__WEBPACK_IMPORTED_MODULE_0__.getDocument(url);\r\nloadingTask.promise.then(function (pdf) {\r\n    console.log('PDF loaded');\r\n\r\n    // Fetch the first page\r\n    var pageNumber = 1;\r\n    pdf.getPage(pageNumber).then(function (page) {\r\n        console.log('Page loaded test2');\r\n\r\n        var scale = 1;\r\n        var viewport = page.getViewport({ scale: scale });\r\n\r\n        // Prepare canvas using PDF page dimensions\r\n        var canvas = document.getElementById('the-canvas');\r\n        var context = canvas.getContext('2d');\r\n        canvas.height = viewport.height;\r\n        canvas.width = viewport.width;\r\n\r\n        // Render PDF page into canvas context\r\n        var renderContext = {\r\n            canvasContext: context,\r\n            viewport: viewport\r\n        };\r\n        var renderTask = page.render(renderContext);\r\n        renderTask.promise.then(function () {\r\n            console.log('Page rendered Test2');\r\n        });\r\n    });\r\n}, function (reason) {\r\n    // PDF loading error\r\n    console.error(reason);\r\n});\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://sample-pdf/./main.js?");

/***/ }),

/***/ "./pdf.mjs":
/*!*****************!*\
  !*** ./pdf.mjs ***!
  \*****************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortException: () => (/* binding */ __webpack_exports__AbortException),\n/* harmony export */   AnnotationEditorLayer: () => (/* binding */ __webpack_exports__AnnotationEditorLayer),\n/* harmony export */   AnnotationEditorParamsType: () => (/* binding */ __webpack_exports__AnnotationEditorParamsType),\n/* harmony export */   AnnotationEditorType: () => (/* binding */ __webpack_exports__AnnotationEditorType),\n/* harmony export */   AnnotationEditorUIManager: () => (/* binding */ __webpack_exports__AnnotationEditorUIManager),\n/* harmony export */   AnnotationLayer: () => (/* binding */ __webpack_exports__AnnotationLayer),\n/* harmony export */   AnnotationMode: () => (/* binding */ __webpack_exports__AnnotationMode),\n/* harmony export */   CMapCompressionType: () => (/* binding */ __webpack_exports__CMapCompressionType),\n/* harmony export */   ColorPicker: () => (/* binding */ __webpack_exports__ColorPicker),\n/* harmony export */   DOMSVGFactory: () => (/* binding */ __webpack_exports__DOMSVGFactory),\n/* harmony export */   DrawLayer: () => (/* binding */ __webpack_exports__DrawLayer),\n/* harmony export */   FeatureTest: () => (/* binding */ __webpack_exports__FeatureTest),\n/* harmony export */   GlobalWorkerOptions: () => (/* binding */ __webpack_exports__GlobalWorkerOptions),\n/* harmony export */   ImageKind: () => (/* binding */ __webpack_exports__ImageKind),\n/* harmony export */   InvalidPDFException: () => (/* binding */ __webpack_exports__InvalidPDFException),\n/* harmony export */   MissingPDFException: () => (/* binding */ __webpack_exports__MissingPDFException),\n/* harmony export */   OPS: () => (/* binding */ __webpack_exports__OPS),\n/* harmony export */   Outliner: () => (/* binding */ __webpack_exports__Outliner),\n/* harmony export */   PDFDataRangeTransport: () => (/* binding */ __webpack_exports__PDFDataRangeTransport),\n/* harmony export */   PDFDateString: () => (/* binding */ __webpack_exports__PDFDateString),\n/* harmony export */   PDFWorker: () => (/* binding */ __webpack_exports__PDFWorker),\n/* harmony export */   PasswordResponses: () => (/* binding */ __webpack_exports__PasswordResponses),\n/* harmony export */   PermissionFlag: () => (/* binding */ __webpack_exports__PermissionFlag),\n/* harmony export */   PixelsPerInch: () => (/* binding */ __webpack_exports__PixelsPerInch),\n/* harmony export */   PromiseCapability: () => (/* binding */ __webpack_exports__PromiseCapability),\n/* harmony export */   RenderingCancelledException: () => (/* binding */ __webpack_exports__RenderingCancelledException),\n/* harmony export */   UnexpectedResponseException: () => (/* binding */ __webpack_exports__UnexpectedResponseException),\n/* harmony export */   Util: () => (/* binding */ __webpack_exports__Util),\n/* harmony export */   VerbosityLevel: () => (/* binding */ __webpack_exports__VerbosityLevel),\n/* harmony export */   XfaLayer: () => (/* binding */ __webpack_exports__XfaLayer),\n/* harmony export */   build: () => (/* binding */ __webpack_exports__build),\n/* harmony export */   createValidAbsoluteUrl: () => (/* binding */ __webpack_exports__createValidAbsoluteUrl),\n/* harmony export */   fetchData: () => (/* binding */ __webpack_exports__fetchData),\n/* harmony export */   getDocument: () => (/* binding */ __webpack_exports__getDocument),\n/* harmony export */   getFilenameFromUrl: () => (/* binding */ __webpack_exports__getFilenameFromUrl),\n/* harmony export */   getPdfFilenameFromUrl: () => (/* binding */ __webpack_exports__getPdfFilenameFromUrl),\n/* harmony export */   getXfaPageViewport: () => (/* binding */ __webpack_exports__getXfaPageViewport),\n/* harmony export */   isDataScheme: () => (/* binding */ __webpack_exports__isDataScheme),\n/* harmony export */   isPdfFile: () => (/* binding */ __webpack_exports__isPdfFile),\n/* harmony export */   noContextMenu: () => (/* binding */ __webpack_exports__noContextMenu),\n/* harmony export */   normalizeUnicode: () => (/* binding */ __webpack_exports__normalizeUnicode),\n/* harmony export */   renderTextLayer: () => (/* binding */ __webpack_exports__renderTextLayer),\n/* harmony export */   setLayerDimensions: () => (/* binding */ __webpack_exports__setLayerDimensions),\n/* harmony export */   shadow: () => (/* binding */ __webpack_exports__shadow),\n/* harmony export */   updateTextLayer: () => (/* binding */ __webpack_exports__updateTextLayer),\n/* harmony export */   version: () => (/* binding */ __webpack_exports__version)\n/* harmony export */ });\n/**\r\n * @licstart The following is the entire license notice for the\r\n * JavaScript code in this page\r\n *\r\n * Copyright 2023 Mozilla Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * @licend The above is the entire license notice for the\r\n * JavaScript code in this page\r\n */\r\n\r\n/******/ var __webpack_modules__ = ({\r\n\r\n/***/ 640:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_937__) => {\r\n\r\n\r\n// EXPORTS\r\n__nested_webpack_require_937__.d(__nested_webpack_exports__, {\r\n  AnnotationLayer: () => (/* binding */ AnnotationLayer),\r\n  FreeTextAnnotationElement: () => (/* binding */ FreeTextAnnotationElement),\r\n  InkAnnotationElement: () => (/* binding */ InkAnnotationElement),\r\n  StampAnnotationElement: () => (/* binding */ StampAnnotationElement)\r\n});\r\n\r\n// EXTERNAL MODULE: ./src/shared/util.js\r\nvar util = __nested_webpack_require_937__(266);\r\n// EXTERNAL MODULE: ./src/display/display_utils.js\r\nvar display_utils = __nested_webpack_require_937__(473);\r\n// EXTERNAL MODULE: ./src/display/annotation_storage.js\r\nvar annotation_storage = __nested_webpack_require_937__(780);\r\n;// CONCATENATED MODULE: ./src/shared/scripting_utils.js\r\nfunction makeColorComp(n) {\r\n  return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, \"0\");\r\n}\r\nfunction scaleAndClamp(x) {\r\n  return Math.max(0, Math.min(255, 255 * x));\r\n}\r\nclass ColorConverters {\r\n  static CMYK_G([c, y, m, k]) {\r\n    return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\r\n  }\r\n  static G_CMYK([g]) {\r\n    return [\"CMYK\", 0, 0, 0, 1 - g];\r\n  }\r\n  static G_RGB([g]) {\r\n    return [\"RGB\", g, g, g];\r\n  }\r\n  static G_rgb([g]) {\r\n    g = scaleAndClamp(g);\r\n    return [g, g, g];\r\n  }\r\n  static G_HTML([g]) {\r\n    const G = makeColorComp(g);\r\n    return `#${G}${G}${G}`;\r\n  }\r\n  static RGB_G([r, g, b]) {\r\n    return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\r\n  }\r\n  static RGB_rgb(color) {\r\n    return color.map(scaleAndClamp);\r\n  }\r\n  static RGB_HTML(color) {\r\n    return `#${color.map(makeColorComp).join(\"\")}`;\r\n  }\r\n  static T_HTML() {\r\n    return \"#00000000\";\r\n  }\r\n  static T_rgb() {\r\n    return [null];\r\n  }\r\n  static CMYK_RGB([c, y, m, k]) {\r\n    return [\"RGB\", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];\r\n  }\r\n  static CMYK_rgb([c, y, m, k]) {\r\n    return [scaleAndClamp(1 - Math.min(1, c + k)), scaleAndClamp(1 - Math.min(1, m + k)), scaleAndClamp(1 - Math.min(1, y + k))];\r\n  }\r\n  static CMYK_HTML(components) {\r\n    const rgb = this.CMYK_RGB(components).slice(1);\r\n    return this.RGB_HTML(rgb);\r\n  }\r\n  static RGB_CMYK([r, g, b]) {\r\n    const c = 1 - r;\r\n    const m = 1 - g;\r\n    const y = 1 - b;\r\n    const k = Math.min(c, m, y);\r\n    return [\"CMYK\", c, m, y, k];\r\n  }\r\n}\r\n\r\n// EXTERNAL MODULE: ./src/display/xfa_layer.js\r\nvar xfa_layer = __nested_webpack_require_937__(160);\r\n;// CONCATENATED MODULE: ./src/display/annotation_layer.js\r\n\r\n\r\n\r\n\r\n\r\nconst DEFAULT_TAB_INDEX = 1000;\r\nconst DEFAULT_FONT_SIZE = 9;\r\nconst GetElementsByNameSet = new WeakSet();\r\nfunction getRectDims(rect) {\r\n  return {\r\n    width: rect[2] - rect[0],\r\n    height: rect[3] - rect[1]\r\n  };\r\n}\r\nclass AnnotationElementFactory {\r\n  static create(parameters) {\r\n    const subtype = parameters.data.annotationType;\r\n    switch (subtype) {\r\n      case util.AnnotationType.LINK:\r\n        return new LinkAnnotationElement(parameters);\r\n      case util.AnnotationType.TEXT:\r\n        return new TextAnnotationElement(parameters);\r\n      case util.AnnotationType.WIDGET:\r\n        const fieldType = parameters.data.fieldType;\r\n        switch (fieldType) {\r\n          case \"Tx\":\r\n            return new TextWidgetAnnotationElement(parameters);\r\n          case \"Btn\":\r\n            if (parameters.data.radioButton) {\r\n              return new RadioButtonWidgetAnnotationElement(parameters);\r\n            } else if (parameters.data.checkBox) {\r\n              return new CheckboxWidgetAnnotationElement(parameters);\r\n            }\r\n            return new PushButtonWidgetAnnotationElement(parameters);\r\n          case \"Ch\":\r\n            return new ChoiceWidgetAnnotationElement(parameters);\r\n          case \"Sig\":\r\n            return new SignatureWidgetAnnotationElement(parameters);\r\n        }\r\n        return new WidgetAnnotationElement(parameters);\r\n      case util.AnnotationType.POPUP:\r\n        return new PopupAnnotationElement(parameters);\r\n      case util.AnnotationType.FREETEXT:\r\n        return new FreeTextAnnotationElement(parameters);\r\n      case util.AnnotationType.LINE:\r\n        return new LineAnnotationElement(parameters);\r\n      case util.AnnotationType.SQUARE:\r\n        return new SquareAnnotationElement(parameters);\r\n      case util.AnnotationType.CIRCLE:\r\n        return new CircleAnnotationElement(parameters);\r\n      case util.AnnotationType.POLYLINE:\r\n        return new PolylineAnnotationElement(parameters);\r\n      case util.AnnotationType.CARET:\r\n        return new CaretAnnotationElement(parameters);\r\n      case util.AnnotationType.INK:\r\n        return new InkAnnotationElement(parameters);\r\n      case util.AnnotationType.POLYGON:\r\n        return new PolygonAnnotationElement(parameters);\r\n      case util.AnnotationType.HIGHLIGHT:\r\n        return new HighlightAnnotationElement(parameters);\r\n      case util.AnnotationType.UNDERLINE:\r\n        return new UnderlineAnnotationElement(parameters);\r\n      case util.AnnotationType.SQUIGGLY:\r\n        return new SquigglyAnnotationElement(parameters);\r\n      case util.AnnotationType.STRIKEOUT:\r\n        return new StrikeOutAnnotationElement(parameters);\r\n      case util.AnnotationType.STAMP:\r\n        return new StampAnnotationElement(parameters);\r\n      case util.AnnotationType.FILEATTACHMENT:\r\n        return new FileAttachmentAnnotationElement(parameters);\r\n      default:\r\n        return new AnnotationElement(parameters);\r\n    }\r\n  }\r\n}\r\nclass AnnotationElement {\r\n  #hasBorder = false;\r\n  constructor(parameters, {\r\n    isRenderable = false,\r\n    ignoreBorder = false,\r\n    createQuadrilaterals = false\r\n  } = {}) {\r\n    this.isRenderable = isRenderable;\r\n    this.data = parameters.data;\r\n    this.layer = parameters.layer;\r\n    this.linkService = parameters.linkService;\r\n    this.downloadManager = parameters.downloadManager;\r\n    this.imageResourcesPath = parameters.imageResourcesPath;\r\n    this.renderForms = parameters.renderForms;\r\n    this.svgFactory = parameters.svgFactory;\r\n    this.annotationStorage = parameters.annotationStorage;\r\n    this.enableScripting = parameters.enableScripting;\r\n    this.hasJSActions = parameters.hasJSActions;\r\n    this._fieldObjects = parameters.fieldObjects;\r\n    this.parent = parameters.parent;\r\n    if (isRenderable) {\r\n      this.container = this._createContainer(ignoreBorder);\r\n    }\r\n    if (createQuadrilaterals) {\r\n      this._createQuadrilaterals();\r\n    }\r\n  }\r\n  static _hasPopupData({\r\n    titleObj,\r\n    contentsObj,\r\n    richText\r\n  }) {\r\n    return !!(titleObj?.str || contentsObj?.str || richText?.str);\r\n  }\r\n  get hasPopupData() {\r\n    return AnnotationElement._hasPopupData(this.data);\r\n  }\r\n  _createContainer(ignoreBorder) {\r\n    const {\r\n      data,\r\n      parent: {\r\n        page,\r\n        viewport\r\n      }\r\n    } = this;\r\n    const container = document.createElement(\"section\");\r\n    container.setAttribute(\"data-annotation-id\", data.id);\r\n    if (!(this instanceof WidgetAnnotationElement)) {\r\n      container.tabIndex = DEFAULT_TAB_INDEX;\r\n    }\r\n    container.style.zIndex = this.parent.zIndex++;\r\n    if (this.data.popupRef) {\r\n      container.setAttribute(\"aria-haspopup\", \"dialog\");\r\n    }\r\n    if (data.noRotate) {\r\n      container.classList.add(\"norotate\");\r\n    }\r\n    const {\r\n      pageWidth,\r\n      pageHeight,\r\n      pageX,\r\n      pageY\r\n    } = viewport.rawDims;\r\n    if (!data.rect || this instanceof PopupAnnotationElement) {\r\n      const {\r\n        rotation\r\n      } = data;\r\n      if (!data.hasOwnCanvas && rotation !== 0) {\r\n        this.setRotation(rotation, container);\r\n      }\r\n      return container;\r\n    }\r\n    const {\r\n      width,\r\n      height\r\n    } = getRectDims(data.rect);\r\n    const rect = util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);\r\n    if (!ignoreBorder && data.borderStyle.width > 0) {\r\n      container.style.borderWidth = `${data.borderStyle.width}px`;\r\n      const horizontalRadius = data.borderStyle.horizontalCornerRadius;\r\n      const verticalRadius = data.borderStyle.verticalCornerRadius;\r\n      if (horizontalRadius > 0 || verticalRadius > 0) {\r\n        const radius = `calc(${horizontalRadius}px * var(--scale-factor)) / calc(${verticalRadius}px * var(--scale-factor))`;\r\n        container.style.borderRadius = radius;\r\n      } else if (this instanceof RadioButtonWidgetAnnotationElement) {\r\n        const radius = `calc(${width}px * var(--scale-factor)) / calc(${height}px * var(--scale-factor))`;\r\n        container.style.borderRadius = radius;\r\n      }\r\n      switch (data.borderStyle.style) {\r\n        case util.AnnotationBorderStyleType.SOLID:\r\n          container.style.borderStyle = \"solid\";\r\n          break;\r\n        case util.AnnotationBorderStyleType.DASHED:\r\n          container.style.borderStyle = \"dashed\";\r\n          break;\r\n        case util.AnnotationBorderStyleType.BEVELED:\r\n          (0,util.warn)(\"Unimplemented border style: beveled\");\r\n          break;\r\n        case util.AnnotationBorderStyleType.INSET:\r\n          (0,util.warn)(\"Unimplemented border style: inset\");\r\n          break;\r\n        case util.AnnotationBorderStyleType.UNDERLINE:\r\n          container.style.borderBottomStyle = \"solid\";\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      const borderColor = data.borderColor || null;\r\n      if (borderColor) {\r\n        this.#hasBorder = true;\r\n        container.style.borderColor = util.Util.makeHexColor(borderColor[0] | 0, borderColor[1] | 0, borderColor[2] | 0);\r\n      } else {\r\n        container.style.borderWidth = 0;\r\n      }\r\n    }\r\n    container.style.left = `${100 * (rect[0] - pageX) / pageWidth}%`;\r\n    container.style.top = `${100 * (rect[1] - pageY) / pageHeight}%`;\r\n    const {\r\n      rotation\r\n    } = data;\r\n    if (data.hasOwnCanvas || rotation === 0) {\r\n      container.style.width = `${100 * width / pageWidth}%`;\r\n      container.style.height = `${100 * height / pageHeight}%`;\r\n    } else {\r\n      this.setRotation(rotation, container);\r\n    }\r\n    return container;\r\n  }\r\n  setRotation(angle, container = this.container) {\r\n    if (!this.data.rect) {\r\n      return;\r\n    }\r\n    const {\r\n      pageWidth,\r\n      pageHeight\r\n    } = this.parent.viewport.rawDims;\r\n    const {\r\n      width,\r\n      height\r\n    } = getRectDims(this.data.rect);\r\n    let elementWidth, elementHeight;\r\n    if (angle % 180 === 0) {\r\n      elementWidth = 100 * width / pageWidth;\r\n      elementHeight = 100 * height / pageHeight;\r\n    } else {\r\n      elementWidth = 100 * height / pageWidth;\r\n      elementHeight = 100 * width / pageHeight;\r\n    }\r\n    container.style.width = `${elementWidth}%`;\r\n    container.style.height = `${elementHeight}%`;\r\n    container.setAttribute(\"data-main-rotation\", (360 - angle) % 360);\r\n  }\r\n  get _commonActions() {\r\n    const setColor = (jsName, styleName, event) => {\r\n      const color = event.detail[jsName];\r\n      const colorType = color[0];\r\n      const colorArray = color.slice(1);\r\n      event.target.style[styleName] = ColorConverters[`${colorType}_HTML`](colorArray);\r\n      this.annotationStorage.setValue(this.data.id, {\r\n        [styleName]: ColorConverters[`${colorType}_rgb`](colorArray)\r\n      });\r\n    };\r\n    return (0,util.shadow)(this, \"_commonActions\", {\r\n      display: event => {\r\n        const {\r\n          display\r\n        } = event.detail;\r\n        const hidden = display % 2 === 1;\r\n        this.container.style.visibility = hidden ? \"hidden\" : \"visible\";\r\n        this.annotationStorage.setValue(this.data.id, {\r\n          noView: hidden,\r\n          noPrint: display === 1 || display === 2\r\n        });\r\n      },\r\n      print: event => {\r\n        this.annotationStorage.setValue(this.data.id, {\r\n          noPrint: !event.detail.print\r\n        });\r\n      },\r\n      hidden: event => {\r\n        const {\r\n          hidden\r\n        } = event.detail;\r\n        this.container.style.visibility = hidden ? \"hidden\" : \"visible\";\r\n        this.annotationStorage.setValue(this.data.id, {\r\n          noPrint: hidden,\r\n          noView: hidden\r\n        });\r\n      },\r\n      focus: event => {\r\n        setTimeout(() => event.target.focus({\r\n          preventScroll: false\r\n        }), 0);\r\n      },\r\n      userName: event => {\r\n        event.target.title = event.detail.userName;\r\n      },\r\n      readonly: event => {\r\n        event.target.disabled = event.detail.readonly;\r\n      },\r\n      required: event => {\r\n        this._setRequired(event.target, event.detail.required);\r\n      },\r\n      bgColor: event => {\r\n        setColor(\"bgColor\", \"backgroundColor\", event);\r\n      },\r\n      fillColor: event => {\r\n        setColor(\"fillColor\", \"backgroundColor\", event);\r\n      },\r\n      fgColor: event => {\r\n        setColor(\"fgColor\", \"color\", event);\r\n      },\r\n      textColor: event => {\r\n        setColor(\"textColor\", \"color\", event);\r\n      },\r\n      borderColor: event => {\r\n        setColor(\"borderColor\", \"borderColor\", event);\r\n      },\r\n      strokeColor: event => {\r\n        setColor(\"strokeColor\", \"borderColor\", event);\r\n      },\r\n      rotation: event => {\r\n        const angle = event.detail.rotation;\r\n        this.setRotation(angle);\r\n        this.annotationStorage.setValue(this.data.id, {\r\n          rotation: angle\r\n        });\r\n      }\r\n    });\r\n  }\r\n  _dispatchEventFromSandbox(actions, jsEvent) {\r\n    const commonActions = this._commonActions;\r\n    for (const name of Object.keys(jsEvent.detail)) {\r\n      const action = actions[name] || commonActions[name];\r\n      action?.(jsEvent);\r\n    }\r\n  }\r\n  _setDefaultPropertiesFromJS(element) {\r\n    if (!this.enableScripting) {\r\n      return;\r\n    }\r\n    const storedData = this.annotationStorage.getRawValue(this.data.id);\r\n    if (!storedData) {\r\n      return;\r\n    }\r\n    const commonActions = this._commonActions;\r\n    for (const [actionName, detail] of Object.entries(storedData)) {\r\n      const action = commonActions[actionName];\r\n      if (action) {\r\n        const eventProxy = {\r\n          detail: {\r\n            [actionName]: detail\r\n          },\r\n          target: element\r\n        };\r\n        action(eventProxy);\r\n        delete storedData[actionName];\r\n      }\r\n    }\r\n  }\r\n  _createQuadrilaterals() {\r\n    if (!this.container) {\r\n      return;\r\n    }\r\n    const {\r\n      quadPoints\r\n    } = this.data;\r\n    if (!quadPoints) {\r\n      return;\r\n    }\r\n    const [rectBlX, rectBlY, rectTrX, rectTrY] = this.data.rect;\r\n    if (quadPoints.length === 1) {\r\n      const [, {\r\n        x: trX,\r\n        y: trY\r\n      }, {\r\n        x: blX,\r\n        y: blY\r\n      }] = quadPoints[0];\r\n      if (rectTrX === trX && rectTrY === trY && rectBlX === blX && rectBlY === blY) {\r\n        return;\r\n      }\r\n    }\r\n    const {\r\n      style\r\n    } = this.container;\r\n    let svgBuffer;\r\n    if (this.#hasBorder) {\r\n      const {\r\n        borderColor,\r\n        borderWidth\r\n      } = style;\r\n      style.borderWidth = 0;\r\n      svgBuffer = [\"url('data:image/svg+xml;utf8,\", `<svg xmlns=\"http://www.w3.org/2000/svg\"`, ` preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\">`, `<g fill=\"transparent\" stroke=\"${borderColor}\" stroke-width=\"${borderWidth}\">`];\r\n      this.container.classList.add(\"hasBorder\");\r\n    }\r\n    const width = rectTrX - rectBlX;\r\n    const height = rectTrY - rectBlY;\r\n    const {\r\n      svgFactory\r\n    } = this;\r\n    const svg = svgFactory.createElement(\"svg\");\r\n    svg.classList.add(\"quadrilateralsContainer\");\r\n    svg.setAttribute(\"width\", 0);\r\n    svg.setAttribute(\"height\", 0);\r\n    const defs = svgFactory.createElement(\"defs\");\r\n    svg.append(defs);\r\n    const clipPath = svgFactory.createElement(\"clipPath\");\r\n    const id = `clippath_${this.data.id}`;\r\n    clipPath.setAttribute(\"id\", id);\r\n    clipPath.setAttribute(\"clipPathUnits\", \"objectBoundingBox\");\r\n    defs.append(clipPath);\r\n    for (const [, {\r\n      x: trX,\r\n      y: trY\r\n    }, {\r\n      x: blX,\r\n      y: blY\r\n    }] of quadPoints) {\r\n      const rect = svgFactory.createElement(\"rect\");\r\n      const x = (blX - rectBlX) / width;\r\n      const y = (rectTrY - trY) / height;\r\n      const rectWidth = (trX - blX) / width;\r\n      const rectHeight = (trY - blY) / height;\r\n      rect.setAttribute(\"x\", x);\r\n      rect.setAttribute(\"y\", y);\r\n      rect.setAttribute(\"width\", rectWidth);\r\n      rect.setAttribute(\"height\", rectHeight);\r\n      clipPath.append(rect);\r\n      svgBuffer?.push(`<rect vector-effect=\"non-scaling-stroke\" x=\"${x}\" y=\"${y}\" width=\"${rectWidth}\" height=\"${rectHeight}\"/>`);\r\n    }\r\n    if (this.#hasBorder) {\r\n      svgBuffer.push(`</g></svg>')`);\r\n      style.backgroundImage = svgBuffer.join(\"\");\r\n    }\r\n    this.container.append(svg);\r\n    this.container.style.clipPath = `url(#${id})`;\r\n  }\r\n  _createPopup() {\r\n    const {\r\n      container,\r\n      data\r\n    } = this;\r\n    container.setAttribute(\"aria-haspopup\", \"dialog\");\r\n    const popup = new PopupAnnotationElement({\r\n      data: {\r\n        color: data.color,\r\n        titleObj: data.titleObj,\r\n        modificationDate: data.modificationDate,\r\n        contentsObj: data.contentsObj,\r\n        richText: data.richText,\r\n        parentRect: data.rect,\r\n        borderStyle: 0,\r\n        id: `popup_${data.id}`,\r\n        rotation: data.rotation\r\n      },\r\n      parent: this.parent,\r\n      elements: [this]\r\n    });\r\n    this.parent.div.append(popup.render());\r\n  }\r\n  render() {\r\n    (0,util.unreachable)(\"Abstract method `AnnotationElement.render` called\");\r\n  }\r\n  _getElementsByName(name, skipId = null) {\r\n    const fields = [];\r\n    if (this._fieldObjects) {\r\n      const fieldObj = this._fieldObjects[name];\r\n      if (fieldObj) {\r\n        for (const {\r\n          page,\r\n          id,\r\n          exportValues\r\n        } of fieldObj) {\r\n          if (page === -1) {\r\n            continue;\r\n          }\r\n          if (id === skipId) {\r\n            continue;\r\n          }\r\n          const exportValue = typeof exportValues === \"string\" ? exportValues : null;\r\n          const domElement = document.querySelector(`[data-element-id=\"${id}\"]`);\r\n          if (domElement && !GetElementsByNameSet.has(domElement)) {\r\n            (0,util.warn)(`_getElementsByName - element not allowed: ${id}`);\r\n            continue;\r\n          }\r\n          fields.push({\r\n            id,\r\n            exportValue,\r\n            domElement\r\n          });\r\n        }\r\n      }\r\n      return fields;\r\n    }\r\n    for (const domElement of document.getElementsByName(name)) {\r\n      const {\r\n        exportValue\r\n      } = domElement;\r\n      const id = domElement.getAttribute(\"data-element-id\");\r\n      if (id === skipId) {\r\n        continue;\r\n      }\r\n      if (!GetElementsByNameSet.has(domElement)) {\r\n        continue;\r\n      }\r\n      fields.push({\r\n        id,\r\n        exportValue,\r\n        domElement\r\n      });\r\n    }\r\n    return fields;\r\n  }\r\n  show() {\r\n    if (this.container) {\r\n      this.container.hidden = false;\r\n    }\r\n    this.popup?.maybeShow();\r\n  }\r\n  hide() {\r\n    if (this.container) {\r\n      this.container.hidden = true;\r\n    }\r\n    this.popup?.forceHide();\r\n  }\r\n  getElementsToTriggerPopup() {\r\n    return this.container;\r\n  }\r\n  addHighlightArea() {\r\n    const triggers = this.getElementsToTriggerPopup();\r\n    if (Array.isArray(triggers)) {\r\n      for (const element of triggers) {\r\n        element.classList.add(\"highlightArea\");\r\n      }\r\n    } else {\r\n      triggers.classList.add(\"highlightArea\");\r\n    }\r\n  }\r\n  get _isEditable() {\r\n    return false;\r\n  }\r\n  _editOnDoubleClick() {\r\n    if (!this._isEditable) {\r\n      return;\r\n    }\r\n    const {\r\n      annotationEditorType: mode,\r\n      data: {\r\n        id: editId\r\n      }\r\n    } = this;\r\n    this.container.addEventListener(\"dblclick\", () => {\r\n      this.linkService.eventBus?.dispatch(\"switchannotationeditormode\", {\r\n        source: this,\r\n        mode,\r\n        editId\r\n      });\r\n    });\r\n  }\r\n}\r\nclass LinkAnnotationElement extends AnnotationElement {\r\n  constructor(parameters, options = null) {\r\n    super(parameters, {\r\n      isRenderable: true,\r\n      ignoreBorder: !!options?.ignoreBorder,\r\n      createQuadrilaterals: true\r\n    });\r\n    this.isTooltipOnly = parameters.data.isTooltipOnly;\r\n  }\r\n  render() {\r\n    const {\r\n      data,\r\n      linkService\r\n    } = this;\r\n    const link = document.createElement(\"a\");\r\n    link.setAttribute(\"data-element-id\", data.id);\r\n    let isBound = false;\r\n    if (data.url) {\r\n      linkService.addLinkAttributes(link, data.url, data.newWindow);\r\n      isBound = true;\r\n    } else if (data.action) {\r\n      this._bindNamedAction(link, data.action);\r\n      isBound = true;\r\n    } else if (data.attachment) {\r\n      this.#bindAttachment(link, data.attachment, data.attachmentDest);\r\n      isBound = true;\r\n    } else if (data.setOCGState) {\r\n      this.#bindSetOCGState(link, data.setOCGState);\r\n      isBound = true;\r\n    } else if (data.dest) {\r\n      this._bindLink(link, data.dest);\r\n      isBound = true;\r\n    } else {\r\n      if (data.actions && (data.actions.Action || data.actions[\"Mouse Up\"] || data.actions[\"Mouse Down\"]) && this.enableScripting && this.hasJSActions) {\r\n        this._bindJSAction(link, data);\r\n        isBound = true;\r\n      }\r\n      if (data.resetForm) {\r\n        this._bindResetFormAction(link, data.resetForm);\r\n        isBound = true;\r\n      } else if (this.isTooltipOnly && !isBound) {\r\n        this._bindLink(link, \"\");\r\n        isBound = true;\r\n      }\r\n    }\r\n    this.container.classList.add(\"linkAnnotation\");\r\n    if (isBound) {\r\n      this.container.append(link);\r\n    }\r\n    return this.container;\r\n  }\r\n  #setInternalLink() {\r\n    this.container.setAttribute(\"data-internal-link\", \"\");\r\n  }\r\n  _bindLink(link, destination) {\r\n    link.href = this.linkService.getDestinationHash(destination);\r\n    link.onclick = () => {\r\n      if (destination) {\r\n        this.linkService.goToDestination(destination);\r\n      }\r\n      return false;\r\n    };\r\n    if (destination || destination === \"\") {\r\n      this.#setInternalLink();\r\n    }\r\n  }\r\n  _bindNamedAction(link, action) {\r\n    link.href = this.linkService.getAnchorUrl(\"\");\r\n    link.onclick = () => {\r\n      this.linkService.executeNamedAction(action);\r\n      return false;\r\n    };\r\n    this.#setInternalLink();\r\n  }\r\n  #bindAttachment(link, attachment, dest = null) {\r\n    link.href = this.linkService.getAnchorUrl(\"\");\r\n    link.onclick = () => {\r\n      this.downloadManager?.openOrDownloadData(attachment.content, attachment.filename, dest);\r\n      return false;\r\n    };\r\n    this.#setInternalLink();\r\n  }\r\n  #bindSetOCGState(link, action) {\r\n    link.href = this.linkService.getAnchorUrl(\"\");\r\n    link.onclick = () => {\r\n      this.linkService.executeSetOCGState(action);\r\n      return false;\r\n    };\r\n    this.#setInternalLink();\r\n  }\r\n  _bindJSAction(link, data) {\r\n    link.href = this.linkService.getAnchorUrl(\"\");\r\n    const map = new Map([[\"Action\", \"onclick\"], [\"Mouse Up\", \"onmouseup\"], [\"Mouse Down\", \"onmousedown\"]]);\r\n    for (const name of Object.keys(data.actions)) {\r\n      const jsName = map.get(name);\r\n      if (!jsName) {\r\n        continue;\r\n      }\r\n      link[jsName] = () => {\r\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\r\n          source: this,\r\n          detail: {\r\n            id: data.id,\r\n            name\r\n          }\r\n        });\r\n        return false;\r\n      };\r\n    }\r\n    if (!link.onclick) {\r\n      link.onclick = () => false;\r\n    }\r\n    this.#setInternalLink();\r\n  }\r\n  _bindResetFormAction(link, resetForm) {\r\n    const otherClickAction = link.onclick;\r\n    if (!otherClickAction) {\r\n      link.href = this.linkService.getAnchorUrl(\"\");\r\n    }\r\n    this.#setInternalLink();\r\n    if (!this._fieldObjects) {\r\n      (0,util.warn)(`_bindResetFormAction - \"resetForm\" action not supported, ` + \"ensure that the `fieldObjects` parameter is provided.\");\r\n      if (!otherClickAction) {\r\n        link.onclick = () => false;\r\n      }\r\n      return;\r\n    }\r\n    link.onclick = () => {\r\n      otherClickAction?.();\r\n      const {\r\n        fields: resetFormFields,\r\n        refs: resetFormRefs,\r\n        include\r\n      } = resetForm;\r\n      const allFields = [];\r\n      if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {\r\n        const fieldIds = new Set(resetFormRefs);\r\n        for (const fieldName of resetFormFields) {\r\n          const fields = this._fieldObjects[fieldName] || [];\r\n          for (const {\r\n            id\r\n          } of fields) {\r\n            fieldIds.add(id);\r\n          }\r\n        }\r\n        for (const fields of Object.values(this._fieldObjects)) {\r\n          for (const field of fields) {\r\n            if (fieldIds.has(field.id) === include) {\r\n              allFields.push(field);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        for (const fields of Object.values(this._fieldObjects)) {\r\n          allFields.push(...fields);\r\n        }\r\n      }\r\n      const storage = this.annotationStorage;\r\n      const allIds = [];\r\n      for (const field of allFields) {\r\n        const {\r\n          id\r\n        } = field;\r\n        allIds.push(id);\r\n        switch (field.type) {\r\n          case \"text\":\r\n            {\r\n              const value = field.defaultValue || \"\";\r\n              storage.setValue(id, {\r\n                value\r\n              });\r\n              break;\r\n            }\r\n          case \"checkbox\":\r\n          case \"radiobutton\":\r\n            {\r\n              const value = field.defaultValue === field.exportValues;\r\n              storage.setValue(id, {\r\n                value\r\n              });\r\n              break;\r\n            }\r\n          case \"combobox\":\r\n          case \"listbox\":\r\n            {\r\n              const value = field.defaultValue || \"\";\r\n              storage.setValue(id, {\r\n                value\r\n              });\r\n              break;\r\n            }\r\n          default:\r\n            continue;\r\n        }\r\n        const domElement = document.querySelector(`[data-element-id=\"${id}\"]`);\r\n        if (!domElement) {\r\n          continue;\r\n        } else if (!GetElementsByNameSet.has(domElement)) {\r\n          (0,util.warn)(`_bindResetFormAction - element not allowed: ${id}`);\r\n          continue;\r\n        }\r\n        domElement.dispatchEvent(new Event(\"resetform\"));\r\n      }\r\n      if (this.enableScripting) {\r\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\r\n          source: this,\r\n          detail: {\r\n            id: \"app\",\r\n            ids: allIds,\r\n            name: \"ResetForm\"\r\n          }\r\n        });\r\n      }\r\n      return false;\r\n    };\r\n  }\r\n}\r\nclass TextAnnotationElement extends AnnotationElement {\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: true\r\n    });\r\n  }\r\n  render() {\r\n    this.container.classList.add(\"textAnnotation\");\r\n    const image = document.createElement(\"img\");\r\n    image.src = this.imageResourcesPath + \"annotation-\" + this.data.name.toLowerCase() + \".svg\";\r\n    image.setAttribute(\"data-l10n-id\", \"pdfjs-text-annotation-type\");\r\n    image.setAttribute(\"data-l10n-args\", JSON.stringify({\r\n      type: this.data.name\r\n    }));\r\n    if (!this.data.popupRef && this.hasPopupData) {\r\n      this._createPopup();\r\n    }\r\n    this.container.append(image);\r\n    return this.container;\r\n  }\r\n}\r\nclass WidgetAnnotationElement extends AnnotationElement {\r\n  render() {\r\n    if (this.data.alternativeText) {\r\n      this.container.title = this.data.alternativeText;\r\n    }\r\n    return this.container;\r\n  }\r\n  showElementAndHideCanvas(element) {\r\n    if (this.data.hasOwnCanvas) {\r\n      if (element.previousSibling?.nodeName === \"CANVAS\") {\r\n        element.previousSibling.hidden = true;\r\n      }\r\n      element.hidden = false;\r\n    }\r\n  }\r\n  _getKeyModifier(event) {\r\n    return util.FeatureTest.platform.isMac ? event.metaKey : event.ctrlKey;\r\n  }\r\n  _setEventListener(element, elementData, baseName, eventName, valueGetter) {\r\n    if (baseName.includes(\"mouse\")) {\r\n      element.addEventListener(baseName, event => {\r\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\r\n          source: this,\r\n          detail: {\r\n            id: this.data.id,\r\n            name: eventName,\r\n            value: valueGetter(event),\r\n            shift: event.shiftKey,\r\n            modifier: this._getKeyModifier(event)\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      element.addEventListener(baseName, event => {\r\n        if (baseName === \"blur\") {\r\n          if (!elementData.focused || !event.relatedTarget) {\r\n            return;\r\n          }\r\n          elementData.focused = false;\r\n        } else if (baseName === \"focus\") {\r\n          if (elementData.focused) {\r\n            return;\r\n          }\r\n          elementData.focused = true;\r\n        }\r\n        if (!valueGetter) {\r\n          return;\r\n        }\r\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\r\n          source: this,\r\n          detail: {\r\n            id: this.data.id,\r\n            name: eventName,\r\n            value: valueGetter(event)\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n  _setEventListeners(element, elementData, names, getter) {\r\n    for (const [baseName, eventName] of names) {\r\n      if (eventName === \"Action\" || this.data.actions?.[eventName]) {\r\n        if (eventName === \"Focus\" || eventName === \"Blur\") {\r\n          elementData ||= {\r\n            focused: false\r\n          };\r\n        }\r\n        this._setEventListener(element, elementData, baseName, eventName, getter);\r\n        if (eventName === \"Focus\" && !this.data.actions?.Blur) {\r\n          this._setEventListener(element, elementData, \"blur\", \"Blur\", null);\r\n        } else if (eventName === \"Blur\" && !this.data.actions?.Focus) {\r\n          this._setEventListener(element, elementData, \"focus\", \"Focus\", null);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  _setBackgroundColor(element) {\r\n    const color = this.data.backgroundColor || null;\r\n    element.style.backgroundColor = color === null ? \"transparent\" : util.Util.makeHexColor(color[0], color[1], color[2]);\r\n  }\r\n  _setTextStyle(element) {\r\n    const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\r\n    const {\r\n      fontColor\r\n    } = this.data.defaultAppearanceData;\r\n    const fontSize = this.data.defaultAppearanceData.fontSize || DEFAULT_FONT_SIZE;\r\n    const style = element.style;\r\n    let computedFontSize;\r\n    const BORDER_SIZE = 2;\r\n    const roundToOneDecimal = x => Math.round(10 * x) / 10;\r\n    if (this.data.multiLine) {\r\n      const height = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE);\r\n      const numberOfLines = Math.round(height / (util.LINE_FACTOR * fontSize)) || 1;\r\n      const lineHeight = height / numberOfLines;\r\n      computedFontSize = Math.min(fontSize, roundToOneDecimal(lineHeight / util.LINE_FACTOR));\r\n    } else {\r\n      const height = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE);\r\n      computedFontSize = Math.min(fontSize, roundToOneDecimal(height / util.LINE_FACTOR));\r\n    }\r\n    style.fontSize = `calc(${computedFontSize}px * var(--scale-factor))`;\r\n    style.color = util.Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\r\n    if (this.data.textAlignment !== null) {\r\n      style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\r\n    }\r\n  }\r\n  _setRequired(element, isRequired) {\r\n    if (isRequired) {\r\n      element.setAttribute(\"required\", true);\r\n    } else {\r\n      element.removeAttribute(\"required\");\r\n    }\r\n    element.setAttribute(\"aria-required\", isRequired);\r\n  }\r\n}\r\nclass TextWidgetAnnotationElement extends WidgetAnnotationElement {\r\n  constructor(parameters) {\r\n    const isRenderable = parameters.renderForms || parameters.data.hasOwnCanvas || !parameters.data.hasAppearance && !!parameters.data.fieldValue;\r\n    super(parameters, {\r\n      isRenderable\r\n    });\r\n  }\r\n  setPropertyOnSiblings(base, key, value, keyInStorage) {\r\n    const storage = this.annotationStorage;\r\n    for (const element of this._getElementsByName(base.name, base.id)) {\r\n      if (element.domElement) {\r\n        element.domElement[key] = value;\r\n      }\r\n      storage.setValue(element.id, {\r\n        [keyInStorage]: value\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    const storage = this.annotationStorage;\r\n    const id = this.data.id;\r\n    this.container.classList.add(\"textWidgetAnnotation\");\r\n    let element = null;\r\n    if (this.renderForms) {\r\n      const storedData = storage.getValue(id, {\r\n        value: this.data.fieldValue\r\n      });\r\n      let textContent = storedData.value || \"\";\r\n      const maxLen = storage.getValue(id, {\r\n        charLimit: this.data.maxLen\r\n      }).charLimit;\r\n      if (maxLen && textContent.length > maxLen) {\r\n        textContent = textContent.slice(0, maxLen);\r\n      }\r\n      let fieldFormattedValues = storedData.formattedValue || this.data.textContent?.join(\"\\n\") || null;\r\n      if (fieldFormattedValues && this.data.comb) {\r\n        fieldFormattedValues = fieldFormattedValues.replaceAll(/\\s+/g, \"\");\r\n      }\r\n      const elementData = {\r\n        userValue: textContent,\r\n        formattedValue: fieldFormattedValues,\r\n        lastCommittedValue: null,\r\n        commitKey: 1,\r\n        focused: false\r\n      };\r\n      if (this.data.multiLine) {\r\n        element = document.createElement(\"textarea\");\r\n        element.textContent = fieldFormattedValues ?? textContent;\r\n        if (this.data.doNotScroll) {\r\n          element.style.overflowY = \"hidden\";\r\n        }\r\n      } else {\r\n        element = document.createElement(\"input\");\r\n        element.type = \"text\";\r\n        element.setAttribute(\"value\", fieldFormattedValues ?? textContent);\r\n        if (this.data.doNotScroll) {\r\n          element.style.overflowX = \"hidden\";\r\n        }\r\n      }\r\n      if (this.data.hasOwnCanvas) {\r\n        element.hidden = true;\r\n      }\r\n      GetElementsByNameSet.add(element);\r\n      element.setAttribute(\"data-element-id\", id);\r\n      element.disabled = this.data.readOnly;\r\n      element.name = this.data.fieldName;\r\n      element.tabIndex = DEFAULT_TAB_INDEX;\r\n      this._setRequired(element, this.data.required);\r\n      if (maxLen) {\r\n        element.maxLength = maxLen;\r\n      }\r\n      element.addEventListener(\"input\", event => {\r\n        storage.setValue(id, {\r\n          value: event.target.value\r\n        });\r\n        this.setPropertyOnSiblings(element, \"value\", event.target.value, \"value\");\r\n        elementData.formattedValue = null;\r\n      });\r\n      element.addEventListener(\"resetform\", event => {\r\n        const defaultValue = this.data.defaultFieldValue ?? \"\";\r\n        element.value = elementData.userValue = defaultValue;\r\n        elementData.formattedValue = null;\r\n      });\r\n      let blurListener = event => {\r\n        const {\r\n          formattedValue\r\n        } = elementData;\r\n        if (formattedValue !== null && formattedValue !== undefined) {\r\n          event.target.value = formattedValue;\r\n        }\r\n        event.target.scrollLeft = 0;\r\n      };\r\n      if (this.enableScripting && this.hasJSActions) {\r\n        element.addEventListener(\"focus\", event => {\r\n          if (elementData.focused) {\r\n            return;\r\n          }\r\n          const {\r\n            target\r\n          } = event;\r\n          if (elementData.userValue) {\r\n            target.value = elementData.userValue;\r\n          }\r\n          elementData.lastCommittedValue = target.value;\r\n          elementData.commitKey = 1;\r\n          if (!this.data.actions?.Focus) {\r\n            elementData.focused = true;\r\n          }\r\n        });\r\n        element.addEventListener(\"updatefromsandbox\", jsEvent => {\r\n          this.showElementAndHideCanvas(jsEvent.target);\r\n          const actions = {\r\n            value(event) {\r\n              elementData.userValue = event.detail.value ?? \"\";\r\n              storage.setValue(id, {\r\n                value: elementData.userValue.toString()\r\n              });\r\n              event.target.value = elementData.userValue;\r\n            },\r\n            formattedValue(event) {\r\n              const {\r\n                formattedValue\r\n              } = event.detail;\r\n              elementData.formattedValue = formattedValue;\r\n              if (formattedValue !== null && formattedValue !== undefined && event.target !== document.activeElement) {\r\n                event.target.value = formattedValue;\r\n              }\r\n              storage.setValue(id, {\r\n                formattedValue\r\n              });\r\n            },\r\n            selRange(event) {\r\n              event.target.setSelectionRange(...event.detail.selRange);\r\n            },\r\n            charLimit: event => {\r\n              const {\r\n                charLimit\r\n              } = event.detail;\r\n              const {\r\n                target\r\n              } = event;\r\n              if (charLimit === 0) {\r\n                target.removeAttribute(\"maxLength\");\r\n                return;\r\n              }\r\n              target.setAttribute(\"maxLength\", charLimit);\r\n              let value = elementData.userValue;\r\n              if (!value || value.length <= charLimit) {\r\n                return;\r\n              }\r\n              value = value.slice(0, charLimit);\r\n              target.value = elementData.userValue = value;\r\n              storage.setValue(id, {\r\n                value\r\n              });\r\n              this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\r\n                source: this,\r\n                detail: {\r\n                  id,\r\n                  name: \"Keystroke\",\r\n                  value,\r\n                  willCommit: true,\r\n                  commitKey: 1,\r\n                  selStart: target.selectionStart,\r\n                  selEnd: target.selectionEnd\r\n                }\r\n              });\r\n            }\r\n          };\r\n          this._dispatchEventFromSandbox(actions, jsEvent);\r\n        });\r\n        element.addEventListener(\"keydown\", event => {\r\n          elementData.commitKey = 1;\r\n          let commitKey = -1;\r\n          if (event.key === \"Escape\") {\r\n            commitKey = 0;\r\n          } else if (event.key === \"Enter\" && !this.data.multiLine) {\r\n            commitKey = 2;\r\n          } else if (event.key === \"Tab\") {\r\n            elementData.commitKey = 3;\r\n          }\r\n          if (commitKey === -1) {\r\n            return;\r\n          }\r\n          const {\r\n            value\r\n          } = event.target;\r\n          if (elementData.lastCommittedValue === value) {\r\n            return;\r\n          }\r\n          elementData.lastCommittedValue = value;\r\n          elementData.userValue = value;\r\n          this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\r\n            source: this,\r\n            detail: {\r\n              id,\r\n              name: \"Keystroke\",\r\n              value,\r\n              willCommit: true,\r\n              commitKey,\r\n              selStart: event.target.selectionStart,\r\n              selEnd: event.target.selectionEnd\r\n            }\r\n          });\r\n        });\r\n        const _blurListener = blurListener;\r\n        blurListener = null;\r\n        element.addEventListener(\"blur\", event => {\r\n          if (!elementData.focused || !event.relatedTarget) {\r\n            return;\r\n          }\r\n          if (!this.data.actions?.Blur) {\r\n            elementData.focused = false;\r\n          }\r\n          const {\r\n            value\r\n          } = event.target;\r\n          elementData.userValue = value;\r\n          if (elementData.lastCommittedValue !== value) {\r\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\r\n              source: this,\r\n              detail: {\r\n                id,\r\n                name: \"Keystroke\",\r\n                value,\r\n                willCommit: true,\r\n                commitKey: elementData.commitKey,\r\n                selStart: event.target.selectionStart,\r\n                selEnd: event.target.selectionEnd\r\n              }\r\n            });\r\n          }\r\n          _blurListener(event);\r\n        });\r\n        if (this.data.actions?.Keystroke) {\r\n          element.addEventListener(\"beforeinput\", event => {\r\n            elementData.lastCommittedValue = null;\r\n            const {\r\n              data,\r\n              target\r\n            } = event;\r\n            const {\r\n              value,\r\n              selectionStart,\r\n              selectionEnd\r\n            } = target;\r\n            let selStart = selectionStart,\r\n              selEnd = selectionEnd;\r\n            switch (event.inputType) {\r\n              case \"deleteWordBackward\":\r\n                {\r\n                  const match = value.substring(0, selectionStart).match(/\\w*[^\\w]*$/);\r\n                  if (match) {\r\n                    selStart -= match[0].length;\r\n                  }\r\n                  break;\r\n                }\r\n              case \"deleteWordForward\":\r\n                {\r\n                  const match = value.substring(selectionStart).match(/^[^\\w]*\\w*/);\r\n                  if (match) {\r\n                    selEnd += match[0].length;\r\n                  }\r\n                  break;\r\n                }\r\n              case \"deleteContentBackward\":\r\n                if (selectionStart === selectionEnd) {\r\n                  selStart -= 1;\r\n                }\r\n                break;\r\n              case \"deleteContentForward\":\r\n                if (selectionStart === selectionEnd) {\r\n                  selEnd += 1;\r\n                }\r\n                break;\r\n            }\r\n            event.preventDefault();\r\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\r\n              source: this,\r\n              detail: {\r\n                id,\r\n                name: \"Keystroke\",\r\n                value,\r\n                change: data || \"\",\r\n                willCommit: false,\r\n                selStart,\r\n                selEnd\r\n              }\r\n            });\r\n          });\r\n        }\r\n        this._setEventListeners(element, elementData, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.value);\r\n      }\r\n      if (blurListener) {\r\n        element.addEventListener(\"blur\", blurListener);\r\n      }\r\n      if (this.data.comb) {\r\n        const fieldWidth = this.data.rect[2] - this.data.rect[0];\r\n        const combWidth = fieldWidth / maxLen;\r\n        element.classList.add(\"comb\");\r\n        element.style.letterSpacing = `calc(${combWidth}px * var(--scale-factor) - 1ch)`;\r\n      }\r\n    } else {\r\n      element = document.createElement(\"div\");\r\n      element.textContent = this.data.fieldValue;\r\n      element.style.verticalAlign = \"middle\";\r\n      element.style.display = \"table-cell\";\r\n      if (this.data.hasOwnCanvas) {\r\n        element.hidden = true;\r\n      }\r\n    }\r\n    this._setTextStyle(element);\r\n    this._setBackgroundColor(element);\r\n    this._setDefaultPropertiesFromJS(element);\r\n    this.container.append(element);\r\n    return this.container;\r\n  }\r\n}\r\nclass SignatureWidgetAnnotationElement extends WidgetAnnotationElement {\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: !!parameters.data.hasOwnCanvas\r\n    });\r\n  }\r\n}\r\nclass CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: parameters.renderForms\r\n    });\r\n  }\r\n  render() {\r\n    const storage = this.annotationStorage;\r\n    const data = this.data;\r\n    const id = data.id;\r\n    let value = storage.getValue(id, {\r\n      value: data.exportValue === data.fieldValue\r\n    }).value;\r\n    if (typeof value === \"string\") {\r\n      value = value !== \"Off\";\r\n      storage.setValue(id, {\r\n        value\r\n      });\r\n    }\r\n    this.container.classList.add(\"buttonWidgetAnnotation\", \"checkBox\");\r\n    const element = document.createElement(\"input\");\r\n    GetElementsByNameSet.add(element);\r\n    element.setAttribute(\"data-element-id\", id);\r\n    element.disabled = data.readOnly;\r\n    this._setRequired(element, this.data.required);\r\n    element.type = \"checkbox\";\r\n    element.name = data.fieldName;\r\n    if (value) {\r\n      element.setAttribute(\"checked\", true);\r\n    }\r\n    element.setAttribute(\"exportValue\", data.exportValue);\r\n    element.tabIndex = DEFAULT_TAB_INDEX;\r\n    element.addEventListener(\"change\", event => {\r\n      const {\r\n        name,\r\n        checked\r\n      } = event.target;\r\n      for (const checkbox of this._getElementsByName(name, id)) {\r\n        const curChecked = checked && checkbox.exportValue === data.exportValue;\r\n        if (checkbox.domElement) {\r\n          checkbox.domElement.checked = curChecked;\r\n        }\r\n        storage.setValue(checkbox.id, {\r\n          value: curChecked\r\n        });\r\n      }\r\n      storage.setValue(id, {\r\n        value: checked\r\n      });\r\n    });\r\n    element.addEventListener(\"resetform\", event => {\r\n      const defaultValue = data.defaultFieldValue || \"Off\";\r\n      event.target.checked = defaultValue === data.exportValue;\r\n    });\r\n    if (this.enableScripting && this.hasJSActions) {\r\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\r\n        const actions = {\r\n          value(event) {\r\n            event.target.checked = event.detail.value !== \"Off\";\r\n            storage.setValue(id, {\r\n              value: event.target.checked\r\n            });\r\n          }\r\n        };\r\n        this._dispatchEventFromSandbox(actions, jsEvent);\r\n      });\r\n      this._setEventListeners(element, null, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\r\n    }\r\n    this._setBackgroundColor(element);\r\n    this._setDefaultPropertiesFromJS(element);\r\n    this.container.append(element);\r\n    return this.container;\r\n  }\r\n}\r\nclass RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: parameters.renderForms\r\n    });\r\n  }\r\n  render() {\r\n    this.container.classList.add(\"buttonWidgetAnnotation\", \"radioButton\");\r\n    const storage = this.annotationStorage;\r\n    const data = this.data;\r\n    const id = data.id;\r\n    let value = storage.getValue(id, {\r\n      value: data.fieldValue === data.buttonValue\r\n    }).value;\r\n    if (typeof value === \"string\") {\r\n      value = value !== data.buttonValue;\r\n      storage.setValue(id, {\r\n        value\r\n      });\r\n    }\r\n    if (value) {\r\n      for (const radio of this._getElementsByName(data.fieldName, id)) {\r\n        storage.setValue(radio.id, {\r\n          value: false\r\n        });\r\n      }\r\n    }\r\n    const element = document.createElement(\"input\");\r\n    GetElementsByNameSet.add(element);\r\n    element.setAttribute(\"data-element-id\", id);\r\n    element.disabled = data.readOnly;\r\n    this._setRequired(element, this.data.required);\r\n    element.type = \"radio\";\r\n    element.name = data.fieldName;\r\n    if (value) {\r\n      element.setAttribute(\"checked\", true);\r\n    }\r\n    element.tabIndex = DEFAULT_TAB_INDEX;\r\n    element.addEventListener(\"change\", event => {\r\n      const {\r\n        name,\r\n        checked\r\n      } = event.target;\r\n      for (const radio of this._getElementsByName(name, id)) {\r\n        storage.setValue(radio.id, {\r\n          value: false\r\n        });\r\n      }\r\n      storage.setValue(id, {\r\n        value: checked\r\n      });\r\n    });\r\n    element.addEventListener(\"resetform\", event => {\r\n      const defaultValue = data.defaultFieldValue;\r\n      event.target.checked = defaultValue !== null && defaultValue !== undefined && defaultValue === data.buttonValue;\r\n    });\r\n    if (this.enableScripting && this.hasJSActions) {\r\n      const pdfButtonValue = data.buttonValue;\r\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\r\n        const actions = {\r\n          value: event => {\r\n            const checked = pdfButtonValue === event.detail.value;\r\n            for (const radio of this._getElementsByName(event.target.name)) {\r\n              const curChecked = checked && radio.id === id;\r\n              if (radio.domElement) {\r\n                radio.domElement.checked = curChecked;\r\n              }\r\n              storage.setValue(radio.id, {\r\n                value: curChecked\r\n              });\r\n            }\r\n          }\r\n        };\r\n        this._dispatchEventFromSandbox(actions, jsEvent);\r\n      });\r\n      this._setEventListeners(element, null, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\r\n    }\r\n    this._setBackgroundColor(element);\r\n    this._setDefaultPropertiesFromJS(element);\r\n    this.container.append(element);\r\n    return this.container;\r\n  }\r\n}\r\nclass PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      ignoreBorder: parameters.data.hasAppearance\r\n    });\r\n  }\r\n  render() {\r\n    const container = super.render();\r\n    container.classList.add(\"buttonWidgetAnnotation\", \"pushButton\");\r\n    if (this.data.alternativeText) {\r\n      container.title = this.data.alternativeText;\r\n    }\r\n    const linkElement = container.lastChild;\r\n    if (this.enableScripting && this.hasJSActions && linkElement) {\r\n      this._setDefaultPropertiesFromJS(linkElement);\r\n      linkElement.addEventListener(\"updatefromsandbox\", jsEvent => {\r\n        this._dispatchEventFromSandbox({}, jsEvent);\r\n      });\r\n    }\r\n    return container;\r\n  }\r\n}\r\nclass ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: parameters.renderForms\r\n    });\r\n  }\r\n  render() {\r\n    this.container.classList.add(\"choiceWidgetAnnotation\");\r\n    const storage = this.annotationStorage;\r\n    const id = this.data.id;\r\n    const storedData = storage.getValue(id, {\r\n      value: this.data.fieldValue\r\n    });\r\n    const selectElement = document.createElement(\"select\");\r\n    GetElementsByNameSet.add(selectElement);\r\n    selectElement.setAttribute(\"data-element-id\", id);\r\n    selectElement.disabled = this.data.readOnly;\r\n    this._setRequired(selectElement, this.data.required);\r\n    selectElement.name = this.data.fieldName;\r\n    selectElement.tabIndex = DEFAULT_TAB_INDEX;\r\n    let addAnEmptyEntry = this.data.combo && this.data.options.length > 0;\r\n    if (!this.data.combo) {\r\n      selectElement.size = this.data.options.length;\r\n      if (this.data.multiSelect) {\r\n        selectElement.multiple = true;\r\n      }\r\n    }\r\n    selectElement.addEventListener(\"resetform\", event => {\r\n      const defaultValue = this.data.defaultFieldValue;\r\n      for (const option of selectElement.options) {\r\n        option.selected = option.value === defaultValue;\r\n      }\r\n    });\r\n    for (const option of this.data.options) {\r\n      const optionElement = document.createElement(\"option\");\r\n      optionElement.textContent = option.displayValue;\r\n      optionElement.value = option.exportValue;\r\n      if (storedData.value.includes(option.exportValue)) {\r\n        optionElement.setAttribute(\"selected\", true);\r\n        addAnEmptyEntry = false;\r\n      }\r\n      selectElement.append(optionElement);\r\n    }\r\n    let removeEmptyEntry = null;\r\n    if (addAnEmptyEntry) {\r\n      const noneOptionElement = document.createElement(\"option\");\r\n      noneOptionElement.value = \" \";\r\n      noneOptionElement.setAttribute(\"hidden\", true);\r\n      noneOptionElement.setAttribute(\"selected\", true);\r\n      selectElement.prepend(noneOptionElement);\r\n      removeEmptyEntry = () => {\r\n        noneOptionElement.remove();\r\n        selectElement.removeEventListener(\"input\", removeEmptyEntry);\r\n        removeEmptyEntry = null;\r\n      };\r\n      selectElement.addEventListener(\"input\", removeEmptyEntry);\r\n    }\r\n    const getValue = isExport => {\r\n      const name = isExport ? \"value\" : \"textContent\";\r\n      const {\r\n        options,\r\n        multiple\r\n      } = selectElement;\r\n      if (!multiple) {\r\n        return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];\r\n      }\r\n      return Array.prototype.filter.call(options, option => option.selected).map(option => option[name]);\r\n    };\r\n    let selectedValues = getValue(false);\r\n    const getItems = event => {\r\n      const options = event.target.options;\r\n      return Array.prototype.map.call(options, option => {\r\n        return {\r\n          displayValue: option.textContent,\r\n          exportValue: option.value\r\n        };\r\n      });\r\n    };\r\n    if (this.enableScripting && this.hasJSActions) {\r\n      selectElement.addEventListener(\"updatefromsandbox\", jsEvent => {\r\n        const actions = {\r\n          value(event) {\r\n            removeEmptyEntry?.();\r\n            const value = event.detail.value;\r\n            const values = new Set(Array.isArray(value) ? value : [value]);\r\n            for (const option of selectElement.options) {\r\n              option.selected = values.has(option.value);\r\n            }\r\n            storage.setValue(id, {\r\n              value: getValue(true)\r\n            });\r\n            selectedValues = getValue(false);\r\n          },\r\n          multipleSelection(event) {\r\n            selectElement.multiple = true;\r\n          },\r\n          remove(event) {\r\n            const options = selectElement.options;\r\n            const index = event.detail.remove;\r\n            options[index].selected = false;\r\n            selectElement.remove(index);\r\n            if (options.length > 0) {\r\n              const i = Array.prototype.findIndex.call(options, option => option.selected);\r\n              if (i === -1) {\r\n                options[0].selected = true;\r\n              }\r\n            }\r\n            storage.setValue(id, {\r\n              value: getValue(true),\r\n              items: getItems(event)\r\n            });\r\n            selectedValues = getValue(false);\r\n          },\r\n          clear(event) {\r\n            while (selectElement.length !== 0) {\r\n              selectElement.remove(0);\r\n            }\r\n            storage.setValue(id, {\r\n              value: null,\r\n              items: []\r\n            });\r\n            selectedValues = getValue(false);\r\n          },\r\n          insert(event) {\r\n            const {\r\n              index,\r\n              displayValue,\r\n              exportValue\r\n            } = event.detail.insert;\r\n            const selectChild = selectElement.children[index];\r\n            const optionElement = document.createElement(\"option\");\r\n            optionElement.textContent = displayValue;\r\n            optionElement.value = exportValue;\r\n            if (selectChild) {\r\n              selectChild.before(optionElement);\r\n            } else {\r\n              selectElement.append(optionElement);\r\n            }\r\n            storage.setValue(id, {\r\n              value: getValue(true),\r\n              items: getItems(event)\r\n            });\r\n            selectedValues = getValue(false);\r\n          },\r\n          items(event) {\r\n            const {\r\n              items\r\n            } = event.detail;\r\n            while (selectElement.length !== 0) {\r\n              selectElement.remove(0);\r\n            }\r\n            for (const item of items) {\r\n              const {\r\n                displayValue,\r\n                exportValue\r\n              } = item;\r\n              const optionElement = document.createElement(\"option\");\r\n              optionElement.textContent = displayValue;\r\n              optionElement.value = exportValue;\r\n              selectElement.append(optionElement);\r\n            }\r\n            if (selectElement.options.length > 0) {\r\n              selectElement.options[0].selected = true;\r\n            }\r\n            storage.setValue(id, {\r\n              value: getValue(true),\r\n              items: getItems(event)\r\n            });\r\n            selectedValues = getValue(false);\r\n          },\r\n          indices(event) {\r\n            const indices = new Set(event.detail.indices);\r\n            for (const option of event.target.options) {\r\n              option.selected = indices.has(option.index);\r\n            }\r\n            storage.setValue(id, {\r\n              value: getValue(true)\r\n            });\r\n            selectedValues = getValue(false);\r\n          },\r\n          editable(event) {\r\n            event.target.disabled = !event.detail.editable;\r\n          }\r\n        };\r\n        this._dispatchEventFromSandbox(actions, jsEvent);\r\n      });\r\n      selectElement.addEventListener(\"input\", event => {\r\n        const exportValue = getValue(true);\r\n        storage.setValue(id, {\r\n          value: exportValue\r\n        });\r\n        event.preventDefault();\r\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\r\n          source: this,\r\n          detail: {\r\n            id,\r\n            name: \"Keystroke\",\r\n            value: selectedValues,\r\n            changeEx: exportValue,\r\n            willCommit: false,\r\n            commitKey: 1,\r\n            keyDown: false\r\n          }\r\n        });\r\n      });\r\n      this._setEventListeners(selectElement, null, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"], [\"input\", \"Action\"], [\"input\", \"Validate\"]], event => event.target.value);\r\n    } else {\r\n      selectElement.addEventListener(\"input\", function (event) {\r\n        storage.setValue(id, {\r\n          value: getValue(true)\r\n        });\r\n      });\r\n    }\r\n    if (this.data.combo) {\r\n      this._setTextStyle(selectElement);\r\n    } else {}\r\n    this._setBackgroundColor(selectElement);\r\n    this._setDefaultPropertiesFromJS(selectElement);\r\n    this.container.append(selectElement);\r\n    return this.container;\r\n  }\r\n}\r\nclass PopupAnnotationElement extends AnnotationElement {\r\n  constructor(parameters) {\r\n    const {\r\n      data,\r\n      elements\r\n    } = parameters;\r\n    super(parameters, {\r\n      isRenderable: AnnotationElement._hasPopupData(data)\r\n    });\r\n    this.elements = elements;\r\n  }\r\n  render() {\r\n    this.container.classList.add(\"popupAnnotation\");\r\n    const popup = new PopupElement({\r\n      container: this.container,\r\n      color: this.data.color,\r\n      titleObj: this.data.titleObj,\r\n      modificationDate: this.data.modificationDate,\r\n      contentsObj: this.data.contentsObj,\r\n      richText: this.data.richText,\r\n      rect: this.data.rect,\r\n      parentRect: this.data.parentRect || null,\r\n      parent: this.parent,\r\n      elements: this.elements,\r\n      open: this.data.open\r\n    });\r\n    const elementIds = [];\r\n    for (const element of this.elements) {\r\n      element.popup = popup;\r\n      elementIds.push(element.data.id);\r\n      element.addHighlightArea();\r\n    }\r\n    this.container.setAttribute(\"aria-controls\", elementIds.map(id => `${util.AnnotationPrefix}${id}`).join(\",\"));\r\n    return this.container;\r\n  }\r\n}\r\nclass PopupElement {\r\n  #boundKeyDown = this.#keyDown.bind(this);\r\n  #boundHide = this.#hide.bind(this);\r\n  #boundShow = this.#show.bind(this);\r\n  #boundToggle = this.#toggle.bind(this);\r\n  #color = null;\r\n  #container = null;\r\n  #contentsObj = null;\r\n  #dateObj = null;\r\n  #elements = null;\r\n  #parent = null;\r\n  #parentRect = null;\r\n  #pinned = false;\r\n  #popup = null;\r\n  #rect = null;\r\n  #richText = null;\r\n  #titleObj = null;\r\n  #wasVisible = false;\r\n  constructor({\r\n    container,\r\n    color,\r\n    elements,\r\n    titleObj,\r\n    modificationDate,\r\n    contentsObj,\r\n    richText,\r\n    parent,\r\n    rect,\r\n    parentRect,\r\n    open\r\n  }) {\r\n    this.#container = container;\r\n    this.#titleObj = titleObj;\r\n    this.#contentsObj = contentsObj;\r\n    this.#richText = richText;\r\n    this.#parent = parent;\r\n    this.#color = color;\r\n    this.#rect = rect;\r\n    this.#parentRect = parentRect;\r\n    this.#elements = elements;\r\n    this.#dateObj = display_utils.PDFDateString.toDateObject(modificationDate);\r\n    this.trigger = elements.flatMap(e => e.getElementsToTriggerPopup());\r\n    for (const element of this.trigger) {\r\n      element.addEventListener(\"click\", this.#boundToggle);\r\n      element.addEventListener(\"mouseenter\", this.#boundShow);\r\n      element.addEventListener(\"mouseleave\", this.#boundHide);\r\n      element.classList.add(\"popupTriggerArea\");\r\n    }\r\n    for (const element of elements) {\r\n      element.container?.addEventListener(\"keydown\", this.#boundKeyDown);\r\n    }\r\n    this.#container.hidden = true;\r\n    if (open) {\r\n      this.#toggle();\r\n    }\r\n  }\r\n  render() {\r\n    if (this.#popup) {\r\n      return;\r\n    }\r\n    const {\r\n      page: {\r\n        view\r\n      },\r\n      viewport: {\r\n        rawDims: {\r\n          pageWidth,\r\n          pageHeight,\r\n          pageX,\r\n          pageY\r\n        }\r\n      }\r\n    } = this.#parent;\r\n    const popup = this.#popup = document.createElement(\"div\");\r\n    popup.className = \"popup\";\r\n    if (this.#color) {\r\n      const baseColor = popup.style.outlineColor = util.Util.makeHexColor(...this.#color);\r\n      if (CSS.supports(\"background-color\", \"color-mix(in srgb, red 30%, white)\")) {\r\n        popup.style.backgroundColor = `color-mix(in srgb, ${baseColor} 30%, white)`;\r\n      } else {\r\n        const BACKGROUND_ENLIGHT = 0.7;\r\n        popup.style.backgroundColor = util.Util.makeHexColor(...this.#color.map(c => Math.floor(BACKGROUND_ENLIGHT * (255 - c) + c)));\r\n      }\r\n    }\r\n    const header = document.createElement(\"span\");\r\n    header.className = \"header\";\r\n    const title = document.createElement(\"h1\");\r\n    header.append(title);\r\n    ({\r\n      dir: title.dir,\r\n      str: title.textContent\r\n    } = this.#titleObj);\r\n    popup.append(header);\r\n    if (this.#dateObj) {\r\n      const modificationDate = document.createElement(\"span\");\r\n      modificationDate.classList.add(\"popupDate\");\r\n      modificationDate.setAttribute(\"data-l10n-id\", \"pdfjs-annotation-date-string\");\r\n      modificationDate.setAttribute(\"data-l10n-args\", JSON.stringify({\r\n        date: this.#dateObj.toLocaleDateString(),\r\n        time: this.#dateObj.toLocaleTimeString()\r\n      }));\r\n      header.append(modificationDate);\r\n    }\r\n    const contentsObj = this.#contentsObj;\r\n    const richText = this.#richText;\r\n    if (richText?.str && (!contentsObj?.str || contentsObj.str === richText.str)) {\r\n      xfa_layer.XfaLayer.render({\r\n        xfaHtml: richText.html,\r\n        intent: \"richText\",\r\n        div: popup\r\n      });\r\n      popup.lastChild.classList.add(\"richText\", \"popupContent\");\r\n    } else {\r\n      const contents = this._formatContents(contentsObj);\r\n      popup.append(contents);\r\n    }\r\n    let useParentRect = !!this.#parentRect;\r\n    let rect = useParentRect ? this.#parentRect : this.#rect;\r\n    for (const element of this.#elements) {\r\n      if (!rect || util.Util.intersect(element.data.rect, rect) !== null) {\r\n        rect = element.data.rect;\r\n        useParentRect = true;\r\n        break;\r\n      }\r\n    }\r\n    const normalizedRect = util.Util.normalizeRect([rect[0], view[3] - rect[1] + view[1], rect[2], view[3] - rect[3] + view[1]]);\r\n    const HORIZONTAL_SPACE_AFTER_ANNOTATION = 5;\r\n    const parentWidth = useParentRect ? rect[2] - rect[0] + HORIZONTAL_SPACE_AFTER_ANNOTATION : 0;\r\n    const popupLeft = normalizedRect[0] + parentWidth;\r\n    const popupTop = normalizedRect[1];\r\n    const {\r\n      style\r\n    } = this.#container;\r\n    style.left = `${100 * (popupLeft - pageX) / pageWidth}%`;\r\n    style.top = `${100 * (popupTop - pageY) / pageHeight}%`;\r\n    this.#container.append(popup);\r\n  }\r\n  _formatContents({\r\n    str,\r\n    dir\r\n  }) {\r\n    const p = document.createElement(\"p\");\r\n    p.classList.add(\"popupContent\");\r\n    p.dir = dir;\r\n    const lines = str.split(/(?:\\r\\n?|\\n)/);\r\n    for (let i = 0, ii = lines.length; i < ii; ++i) {\r\n      const line = lines[i];\r\n      p.append(document.createTextNode(line));\r\n      if (i < ii - 1) {\r\n        p.append(document.createElement(\"br\"));\r\n      }\r\n    }\r\n    return p;\r\n  }\r\n  #keyDown(event) {\r\n    if (event.altKey || event.shiftKey || event.ctrlKey || event.metaKey) {\r\n      return;\r\n    }\r\n    if (event.key === \"Enter\" || event.key === \"Escape\" && this.#pinned) {\r\n      this.#toggle();\r\n    }\r\n  }\r\n  #toggle() {\r\n    this.#pinned = !this.#pinned;\r\n    if (this.#pinned) {\r\n      this.#show();\r\n      this.#container.addEventListener(\"click\", this.#boundToggle);\r\n      this.#container.addEventListener(\"keydown\", this.#boundKeyDown);\r\n    } else {\r\n      this.#hide();\r\n      this.#container.removeEventListener(\"click\", this.#boundToggle);\r\n      this.#container.removeEventListener(\"keydown\", this.#boundKeyDown);\r\n    }\r\n  }\r\n  #show() {\r\n    if (!this.#popup) {\r\n      this.render();\r\n    }\r\n    if (!this.isVisible) {\r\n      this.#container.hidden = false;\r\n      this.#container.style.zIndex = parseInt(this.#container.style.zIndex) + 1000;\r\n    } else if (this.#pinned) {\r\n      this.#container.classList.add(\"focused\");\r\n    }\r\n  }\r\n  #hide() {\r\n    this.#container.classList.remove(\"focused\");\r\n    if (this.#pinned || !this.isVisible) {\r\n      return;\r\n    }\r\n    this.#container.hidden = true;\r\n    this.#container.style.zIndex = parseInt(this.#container.style.zIndex) - 1000;\r\n  }\r\n  forceHide() {\r\n    this.#wasVisible = this.isVisible;\r\n    if (!this.#wasVisible) {\r\n      return;\r\n    }\r\n    this.#container.hidden = true;\r\n  }\r\n  maybeShow() {\r\n    if (!this.#wasVisible) {\r\n      return;\r\n    }\r\n    this.#wasVisible = false;\r\n    this.#container.hidden = false;\r\n  }\r\n  get isVisible() {\r\n    return this.#container.hidden === false;\r\n  }\r\n}\r\nclass FreeTextAnnotationElement extends AnnotationElement {\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: true,\r\n      ignoreBorder: true\r\n    });\r\n    this.textContent = parameters.data.textContent;\r\n    this.textPosition = parameters.data.textPosition;\r\n    this.annotationEditorType = util.AnnotationEditorType.FREETEXT;\r\n  }\r\n  render() {\r\n    this.container.classList.add(\"freeTextAnnotation\");\r\n    if (this.textContent) {\r\n      const content = document.createElement(\"div\");\r\n      content.classList.add(\"annotationTextContent\");\r\n      content.setAttribute(\"role\", \"comment\");\r\n      for (const line of this.textContent) {\r\n        const lineSpan = document.createElement(\"span\");\r\n        lineSpan.textContent = line;\r\n        content.append(lineSpan);\r\n      }\r\n      this.container.append(content);\r\n    }\r\n    if (!this.data.popupRef && this.hasPopupData) {\r\n      this._createPopup();\r\n    }\r\n    this._editOnDoubleClick();\r\n    return this.container;\r\n  }\r\n  get _isEditable() {\r\n    return this.data.hasOwnCanvas;\r\n  }\r\n}\r\nclass LineAnnotationElement extends AnnotationElement {\r\n  #line = null;\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: true,\r\n      ignoreBorder: true\r\n    });\r\n  }\r\n  render() {\r\n    this.container.classList.add(\"lineAnnotation\");\r\n    const data = this.data;\r\n    const {\r\n      width,\r\n      height\r\n    } = getRectDims(data.rect);\r\n    const svg = this.svgFactory.create(width, height, true);\r\n    const line = this.#line = this.svgFactory.createElement(\"svg:line\");\r\n    line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\r\n    line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\r\n    line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\r\n    line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\r\n    line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\r\n    line.setAttribute(\"stroke\", \"transparent\");\r\n    line.setAttribute(\"fill\", \"transparent\");\r\n    svg.append(line);\r\n    this.container.append(svg);\r\n    if (!data.popupRef && this.hasPopupData) {\r\n      this._createPopup();\r\n    }\r\n    return this.container;\r\n  }\r\n  getElementsToTriggerPopup() {\r\n    return this.#line;\r\n  }\r\n  addHighlightArea() {\r\n    this.container.classList.add(\"highlightArea\");\r\n  }\r\n}\r\nclass SquareAnnotationElement extends AnnotationElement {\r\n  #square = null;\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: true,\r\n      ignoreBorder: true\r\n    });\r\n  }\r\n  render() {\r\n    this.container.classList.add(\"squareAnnotation\");\r\n    const data = this.data;\r\n    const {\r\n      width,\r\n      height\r\n    } = getRectDims(data.rect);\r\n    const svg = this.svgFactory.create(width, height, true);\r\n    const borderWidth = data.borderStyle.width;\r\n    const square = this.#square = this.svgFactory.createElement(\"svg:rect\");\r\n    square.setAttribute(\"x\", borderWidth / 2);\r\n    square.setAttribute(\"y\", borderWidth / 2);\r\n    square.setAttribute(\"width\", width - borderWidth);\r\n    square.setAttribute(\"height\", height - borderWidth);\r\n    square.setAttribute(\"stroke-width\", borderWidth || 1);\r\n    square.setAttribute(\"stroke\", \"transparent\");\r\n    square.setAttribute(\"fill\", \"transparent\");\r\n    svg.append(square);\r\n    this.container.append(svg);\r\n    if (!data.popupRef && this.hasPopupData) {\r\n      this._createPopup();\r\n    }\r\n    return this.container;\r\n  }\r\n  getElementsToTriggerPopup() {\r\n    return this.#square;\r\n  }\r\n  addHighlightArea() {\r\n    this.container.classList.add(\"highlightArea\");\r\n  }\r\n}\r\nclass CircleAnnotationElement extends AnnotationElement {\r\n  #circle = null;\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: true,\r\n      ignoreBorder: true\r\n    });\r\n  }\r\n  render() {\r\n    this.container.classList.add(\"circleAnnotation\");\r\n    const data = this.data;\r\n    const {\r\n      width,\r\n      height\r\n    } = getRectDims(data.rect);\r\n    const svg = this.svgFactory.create(width, height, true);\r\n    const borderWidth = data.borderStyle.width;\r\n    const circle = this.#circle = this.svgFactory.createElement(\"svg:ellipse\");\r\n    circle.setAttribute(\"cx\", width / 2);\r\n    circle.setAttribute(\"cy\", height / 2);\r\n    circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\r\n    circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\r\n    circle.setAttribute(\"stroke-width\", borderWidth || 1);\r\n    circle.setAttribute(\"stroke\", \"transparent\");\r\n    circle.setAttribute(\"fill\", \"transparent\");\r\n    svg.append(circle);\r\n    this.container.append(svg);\r\n    if (!data.popupRef && this.hasPopupData) {\r\n      this._createPopup();\r\n    }\r\n    return this.container;\r\n  }\r\n  getElementsToTriggerPopup() {\r\n    return this.#circle;\r\n  }\r\n  addHighlightArea() {\r\n    this.container.classList.add(\"highlightArea\");\r\n  }\r\n}\r\nclass PolylineAnnotationElement extends AnnotationElement {\r\n  #polyline = null;\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: true,\r\n      ignoreBorder: true\r\n    });\r\n    this.containerClassName = \"polylineAnnotation\";\r\n    this.svgElementName = \"svg:polyline\";\r\n  }\r\n  render() {\r\n    this.container.classList.add(this.containerClassName);\r\n    const data = this.data;\r\n    const {\r\n      width,\r\n      height\r\n    } = getRectDims(data.rect);\r\n    const svg = this.svgFactory.create(width, height, true);\r\n    let points = [];\r\n    for (const coordinate of data.vertices) {\r\n      const x = coordinate.x - data.rect[0];\r\n      const y = data.rect[3] - coordinate.y;\r\n      points.push(x + \",\" + y);\r\n    }\r\n    points = points.join(\" \");\r\n    const polyline = this.#polyline = this.svgFactory.createElement(this.svgElementName);\r\n    polyline.setAttribute(\"points\", points);\r\n    polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\r\n    polyline.setAttribute(\"stroke\", \"transparent\");\r\n    polyline.setAttribute(\"fill\", \"transparent\");\r\n    svg.append(polyline);\r\n    this.container.append(svg);\r\n    if (!data.popupRef && this.hasPopupData) {\r\n      this._createPopup();\r\n    }\r\n    return this.container;\r\n  }\r\n  getElementsToTriggerPopup() {\r\n    return this.#polyline;\r\n  }\r\n  addHighlightArea() {\r\n    this.container.classList.add(\"highlightArea\");\r\n  }\r\n}\r\nclass PolygonAnnotationElement extends PolylineAnnotationElement {\r\n  constructor(parameters) {\r\n    super(parameters);\r\n    this.containerClassName = \"polygonAnnotation\";\r\n    this.svgElementName = \"svg:polygon\";\r\n  }\r\n}\r\nclass CaretAnnotationElement extends AnnotationElement {\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: true,\r\n      ignoreBorder: true\r\n    });\r\n  }\r\n  render() {\r\n    this.container.classList.add(\"caretAnnotation\");\r\n    if (!this.data.popupRef && this.hasPopupData) {\r\n      this._createPopup();\r\n    }\r\n    return this.container;\r\n  }\r\n}\r\nclass InkAnnotationElement extends AnnotationElement {\r\n  #polylines = [];\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: true,\r\n      ignoreBorder: true\r\n    });\r\n    this.containerClassName = \"inkAnnotation\";\r\n    this.svgElementName = \"svg:polyline\";\r\n    this.annotationEditorType = util.AnnotationEditorType.INK;\r\n  }\r\n  render() {\r\n    this.container.classList.add(this.containerClassName);\r\n    const data = this.data;\r\n    const {\r\n      width,\r\n      height\r\n    } = getRectDims(data.rect);\r\n    const svg = this.svgFactory.create(width, height, true);\r\n    for (const inkList of data.inkLists) {\r\n      let points = [];\r\n      for (const coordinate of inkList) {\r\n        const x = coordinate.x - data.rect[0];\r\n        const y = data.rect[3] - coordinate.y;\r\n        points.push(`${x},${y}`);\r\n      }\r\n      points = points.join(\" \");\r\n      const polyline = this.svgFactory.createElement(this.svgElementName);\r\n      this.#polylines.push(polyline);\r\n      polyline.setAttribute(\"points\", points);\r\n      polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\r\n      polyline.setAttribute(\"stroke\", \"transparent\");\r\n      polyline.setAttribute(\"fill\", \"transparent\");\r\n      if (!data.popupRef && this.hasPopupData) {\r\n        this._createPopup();\r\n      }\r\n      svg.append(polyline);\r\n    }\r\n    this.container.append(svg);\r\n    return this.container;\r\n  }\r\n  getElementsToTriggerPopup() {\r\n    return this.#polylines;\r\n  }\r\n  addHighlightArea() {\r\n    this.container.classList.add(\"highlightArea\");\r\n  }\r\n}\r\nclass HighlightAnnotationElement extends AnnotationElement {\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: true,\r\n      ignoreBorder: true,\r\n      createQuadrilaterals: true\r\n    });\r\n  }\r\n  render() {\r\n    if (!this.data.popupRef && this.hasPopupData) {\r\n      this._createPopup();\r\n    }\r\n    this.container.classList.add(\"highlightAnnotation\");\r\n    return this.container;\r\n  }\r\n}\r\nclass UnderlineAnnotationElement extends AnnotationElement {\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: true,\r\n      ignoreBorder: true,\r\n      createQuadrilaterals: true\r\n    });\r\n  }\r\n  render() {\r\n    if (!this.data.popupRef && this.hasPopupData) {\r\n      this._createPopup();\r\n    }\r\n    this.container.classList.add(\"underlineAnnotation\");\r\n    return this.container;\r\n  }\r\n}\r\nclass SquigglyAnnotationElement extends AnnotationElement {\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: true,\r\n      ignoreBorder: true,\r\n      createQuadrilaterals: true\r\n    });\r\n  }\r\n  render() {\r\n    if (!this.data.popupRef && this.hasPopupData) {\r\n      this._createPopup();\r\n    }\r\n    this.container.classList.add(\"squigglyAnnotation\");\r\n    return this.container;\r\n  }\r\n}\r\nclass StrikeOutAnnotationElement extends AnnotationElement {\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: true,\r\n      ignoreBorder: true,\r\n      createQuadrilaterals: true\r\n    });\r\n  }\r\n  render() {\r\n    if (!this.data.popupRef && this.hasPopupData) {\r\n      this._createPopup();\r\n    }\r\n    this.container.classList.add(\"strikeoutAnnotation\");\r\n    return this.container;\r\n  }\r\n}\r\nclass StampAnnotationElement extends AnnotationElement {\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: true,\r\n      ignoreBorder: true\r\n    });\r\n  }\r\n  render() {\r\n    this.container.classList.add(\"stampAnnotation\");\r\n    if (!this.data.popupRef && this.hasPopupData) {\r\n      this._createPopup();\r\n    }\r\n    return this.container;\r\n  }\r\n}\r\nclass FileAttachmentAnnotationElement extends AnnotationElement {\r\n  #trigger = null;\r\n  constructor(parameters) {\r\n    super(parameters, {\r\n      isRenderable: true\r\n    });\r\n    const {\r\n      filename,\r\n      content\r\n    } = this.data.file;\r\n    this.filename = (0,display_utils.getFilenameFromUrl)(filename, true);\r\n    this.content = content;\r\n    this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\r\n      source: this,\r\n      filename,\r\n      content\r\n    });\r\n  }\r\n  render() {\r\n    this.container.classList.add(\"fileAttachmentAnnotation\");\r\n    const {\r\n      container,\r\n      data\r\n    } = this;\r\n    let trigger;\r\n    if (data.hasAppearance || data.fillAlpha === 0) {\r\n      trigger = document.createElement(\"div\");\r\n    } else {\r\n      trigger = document.createElement(\"img\");\r\n      trigger.src = `${this.imageResourcesPath}annotation-${/paperclip/i.test(data.name) ? \"paperclip\" : \"pushpin\"}.svg`;\r\n      if (data.fillAlpha && data.fillAlpha < 1) {\r\n        trigger.style = `filter: opacity(${Math.round(data.fillAlpha * 100)}%);`;\r\n      }\r\n    }\r\n    trigger.addEventListener(\"dblclick\", this.#download.bind(this));\r\n    this.#trigger = trigger;\r\n    const {\r\n      isMac\r\n    } = util.FeatureTest.platform;\r\n    container.addEventListener(\"keydown\", evt => {\r\n      if (evt.key === \"Enter\" && (isMac ? evt.metaKey : evt.ctrlKey)) {\r\n        this.#download();\r\n      }\r\n    });\r\n    if (!data.popupRef && this.hasPopupData) {\r\n      this._createPopup();\r\n    } else {\r\n      trigger.classList.add(\"popupTriggerArea\");\r\n    }\r\n    container.append(trigger);\r\n    return container;\r\n  }\r\n  getElementsToTriggerPopup() {\r\n    return this.#trigger;\r\n  }\r\n  addHighlightArea() {\r\n    this.container.classList.add(\"highlightArea\");\r\n  }\r\n  #download() {\r\n    this.downloadManager?.openOrDownloadData(this.content, this.filename);\r\n  }\r\n}\r\nclass AnnotationLayer {\r\n  #accessibilityManager = null;\r\n  #annotationCanvasMap = null;\r\n  #editableAnnotations = new Map();\r\n  constructor({\r\n    div,\r\n    accessibilityManager,\r\n    annotationCanvasMap,\r\n    page,\r\n    viewport\r\n  }) {\r\n    this.div = div;\r\n    this.#accessibilityManager = accessibilityManager;\r\n    this.#annotationCanvasMap = annotationCanvasMap;\r\n    this.page = page;\r\n    this.viewport = viewport;\r\n    this.zIndex = 0;\r\n  }\r\n  #appendElement(element, id) {\r\n    const contentElement = element.firstChild || element;\r\n    contentElement.id = `${util.AnnotationPrefix}${id}`;\r\n    this.div.append(element);\r\n    this.#accessibilityManager?.moveElementInDOM(this.div, element, contentElement, false);\r\n  }\r\n  async render(params) {\r\n    const {\r\n      annotations\r\n    } = params;\r\n    const layer = this.div;\r\n    (0,display_utils.setLayerDimensions)(layer, this.viewport);\r\n    const popupToElements = new Map();\r\n    const elementParams = {\r\n      data: null,\r\n      layer,\r\n      linkService: params.linkService,\r\n      downloadManager: params.downloadManager,\r\n      imageResourcesPath: params.imageResourcesPath || \"\",\r\n      renderForms: params.renderForms !== false,\r\n      svgFactory: new display_utils.DOMSVGFactory(),\r\n      annotationStorage: params.annotationStorage || new annotation_storage.AnnotationStorage(),\r\n      enableScripting: params.enableScripting === true,\r\n      hasJSActions: params.hasJSActions,\r\n      fieldObjects: params.fieldObjects,\r\n      parent: this,\r\n      elements: null\r\n    };\r\n    for (const data of annotations) {\r\n      if (data.noHTML) {\r\n        continue;\r\n      }\r\n      const isPopupAnnotation = data.annotationType === util.AnnotationType.POPUP;\r\n      if (!isPopupAnnotation) {\r\n        const {\r\n          width,\r\n          height\r\n        } = getRectDims(data.rect);\r\n        if (width <= 0 || height <= 0) {\r\n          continue;\r\n        }\r\n      } else {\r\n        const elements = popupToElements.get(data.id);\r\n        if (!elements) {\r\n          continue;\r\n        }\r\n        elementParams.elements = elements;\r\n      }\r\n      elementParams.data = data;\r\n      const element = AnnotationElementFactory.create(elementParams);\r\n      if (!element.isRenderable) {\r\n        continue;\r\n      }\r\n      if (!isPopupAnnotation && data.popupRef) {\r\n        const elements = popupToElements.get(data.popupRef);\r\n        if (!elements) {\r\n          popupToElements.set(data.popupRef, [element]);\r\n        } else {\r\n          elements.push(element);\r\n        }\r\n      }\r\n      if (element.annotationEditorType > 0) {\r\n        this.#editableAnnotations.set(element.data.id, element);\r\n      }\r\n      const rendered = element.render();\r\n      if (data.hidden) {\r\n        rendered.style.visibility = \"hidden\";\r\n      }\r\n      this.#appendElement(rendered, data.id);\r\n    }\r\n    this.#setAnnotationCanvasMap();\r\n  }\r\n  update({\r\n    viewport\r\n  }) {\r\n    const layer = this.div;\r\n    this.viewport = viewport;\r\n    (0,display_utils.setLayerDimensions)(layer, {\r\n      rotation: viewport.rotation\r\n    });\r\n    this.#setAnnotationCanvasMap();\r\n    layer.hidden = false;\r\n  }\r\n  #setAnnotationCanvasMap() {\r\n    if (!this.#annotationCanvasMap) {\r\n      return;\r\n    }\r\n    const layer = this.div;\r\n    for (const [id, canvas] of this.#annotationCanvasMap) {\r\n      const element = layer.querySelector(`[data-annotation-id=\"${id}\"]`);\r\n      if (!element) {\r\n        continue;\r\n      }\r\n      const {\r\n        firstChild\r\n      } = element;\r\n      if (!firstChild) {\r\n        element.append(canvas);\r\n      } else if (firstChild.nodeName === \"CANVAS\") {\r\n        firstChild.replaceWith(canvas);\r\n      } else {\r\n        firstChild.before(canvas);\r\n      }\r\n    }\r\n    this.#annotationCanvasMap.clear();\r\n  }\r\n  getEditableAnnotations() {\r\n    return Array.from(this.#editableAnnotations.values());\r\n  }\r\n  getEditableAnnotation(id) {\r\n    return this.#editableAnnotations.get(id);\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 780:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_82594__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_82594__.d(__nested_webpack_exports__, {\r\n/* harmony export */   AnnotationStorage: () => (/* binding */ AnnotationStorage),\r\n/* harmony export */   PrintAnnotationStorage: () => (/* binding */ PrintAnnotationStorage),\r\n/* harmony export */   SerializableEmpty: () => (/* binding */ SerializableEmpty)\r\n/* harmony export */ });\r\n/* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_82594__(266);\r\n/* harmony import */ var _editor_editor_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_82594__(115);\r\n/* harmony import */ var _shared_murmurhash3_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_82594__(825);\r\n\r\n\r\n\r\nconst SerializableEmpty = Object.freeze({\r\n  map: null,\r\n  hash: \"\",\r\n  transfer: undefined\r\n});\r\nclass AnnotationStorage {\r\n  #modified = false;\r\n  #storage = new Map();\r\n  constructor() {\r\n    this.onSetModified = null;\r\n    this.onResetModified = null;\r\n    this.onAnnotationEditor = null;\r\n  }\r\n  getValue(key, defaultValue) {\r\n    const value = this.#storage.get(key);\r\n    if (value === undefined) {\r\n      return defaultValue;\r\n    }\r\n    return Object.assign(defaultValue, value);\r\n  }\r\n  getRawValue(key) {\r\n    return this.#storage.get(key);\r\n  }\r\n  remove(key) {\r\n    this.#storage.delete(key);\r\n    if (this.#storage.size === 0) {\r\n      this.resetModified();\r\n    }\r\n    if (typeof this.onAnnotationEditor === \"function\") {\r\n      for (const value of this.#storage.values()) {\r\n        if (value instanceof _editor_editor_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationEditor) {\r\n          return;\r\n        }\r\n      }\r\n      this.onAnnotationEditor(null);\r\n    }\r\n  }\r\n  setValue(key, value) {\r\n    const obj = this.#storage.get(key);\r\n    let modified = false;\r\n    if (obj !== undefined) {\r\n      for (const [entry, val] of Object.entries(value)) {\r\n        if (obj[entry] !== val) {\r\n          modified = true;\r\n          obj[entry] = val;\r\n        }\r\n      }\r\n    } else {\r\n      modified = true;\r\n      this.#storage.set(key, value);\r\n    }\r\n    if (modified) {\r\n      this.#setModified();\r\n    }\r\n    if (value instanceof _editor_editor_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationEditor && typeof this.onAnnotationEditor === \"function\") {\r\n      this.onAnnotationEditor(value.constructor._type);\r\n    }\r\n  }\r\n  has(key) {\r\n    return this.#storage.has(key);\r\n  }\r\n  getAll() {\r\n    return this.#storage.size > 0 ? (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.objectFromMap)(this.#storage) : null;\r\n  }\r\n  setAll(obj) {\r\n    for (const [key, val] of Object.entries(obj)) {\r\n      this.setValue(key, val);\r\n    }\r\n  }\r\n  get size() {\r\n    return this.#storage.size;\r\n  }\r\n  #setModified() {\r\n    if (!this.#modified) {\r\n      this.#modified = true;\r\n      if (typeof this.onSetModified === \"function\") {\r\n        this.onSetModified();\r\n      }\r\n    }\r\n  }\r\n  resetModified() {\r\n    if (this.#modified) {\r\n      this.#modified = false;\r\n      if (typeof this.onResetModified === \"function\") {\r\n        this.onResetModified();\r\n      }\r\n    }\r\n  }\r\n  get print() {\r\n    return new PrintAnnotationStorage(this);\r\n  }\r\n  get serializable() {\r\n    if (this.#storage.size === 0) {\r\n      return SerializableEmpty;\r\n    }\r\n    const map = new Map(),\r\n      hash = new _shared_murmurhash3_js__WEBPACK_IMPORTED_MODULE_2__.MurmurHash3_64(),\r\n      transfer = [];\r\n    const context = Object.create(null);\r\n    let hasBitmap = false;\r\n    for (const [key, val] of this.#storage) {\r\n      const serialized = val instanceof _editor_editor_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationEditor ? val.serialize(false, context) : val;\r\n      if (serialized) {\r\n        map.set(key, serialized);\r\n        hash.update(`${key}:${JSON.stringify(serialized)}`);\r\n        hasBitmap ||= !!serialized.bitmap;\r\n      }\r\n    }\r\n    if (hasBitmap) {\r\n      for (const value of map.values()) {\r\n        if (value.bitmap) {\r\n          transfer.push(value.bitmap);\r\n        }\r\n      }\r\n    }\r\n    return map.size > 0 ? {\r\n      map,\r\n      hash: hash.hexdigest(),\r\n      transfer\r\n    } : SerializableEmpty;\r\n  }\r\n}\r\nclass PrintAnnotationStorage extends AnnotationStorage {\r\n  #serializable;\r\n  constructor(parent) {\r\n    super();\r\n    const {\r\n      map,\r\n      hash,\r\n      transfer\r\n    } = parent.serializable;\r\n    const clone = structuredClone(map, transfer ? {\r\n      transfer\r\n    } : null);\r\n    this.#serializable = {\r\n      map: clone,\r\n      hash,\r\n      transfer\r\n    };\r\n  }\r\n  get print() {\r\n    (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Should not call PrintAnnotationStorage.print\");\r\n  }\r\n  get serializable() {\r\n    return this.#serializable;\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 406:\r\n/***/ ((__webpack_module__, __nested_webpack_exports__, __nested_webpack_require_87337__) => {\r\n\r\n__nested_webpack_require_87337__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\r\n/* harmony export */ __nested_webpack_require_87337__.d(__nested_webpack_exports__, {\r\n/* harmony export */   PDFDataRangeTransport: () => (/* binding */ PDFDataRangeTransport),\r\n/* harmony export */   PDFWorker: () => (/* binding */ PDFWorker),\r\n/* harmony export */   build: () => (/* binding */ build),\r\n/* harmony export */   getDocument: () => (/* binding */ getDocument),\r\n/* harmony export */   version: () => (/* binding */ version)\r\n/* harmony export */ });\r\n/* unused harmony exports DefaultCanvasFactory, DefaultCMapReaderFactory, DefaultFilterFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorkerUtil, RenderTask */\r\n/* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_87337__(266);\r\n/* harmony import */ var _annotation_storage_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_87337__(780);\r\n/* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_87337__(473);\r\n/* harmony import */ var _font_loader_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_87337__(742);\r\n/* harmony import */ var display_node_utils__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_87337__(738);\r\n/* harmony import */ var _canvas_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_87337__(250);\r\n/* harmony import */ var _worker_options_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_87337__(368);\r\n/* harmony import */ var _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_87337__(694);\r\n/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_87337__(472);\r\n/* harmony import */ var _optional_content_config_js__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_87337__(890);\r\n/* harmony import */ var _transport_stream_js__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_87337__(92);\r\n/* harmony import */ var display_fetch_stream__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_87337__(171);\r\n/* harmony import */ var display_network__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_87337__(474);\r\n/* harmony import */ var display_node_stream__WEBPACK_IMPORTED_MODULE_13__ = __nested_webpack_require_87337__(498);\r\n/* harmony import */ var _xfa_text_js__WEBPACK_IMPORTED_MODULE_14__ = __nested_webpack_require_87337__(521);\r\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([display_node_utils__WEBPACK_IMPORTED_MODULE_4__, display_node_stream__WEBPACK_IMPORTED_MODULE_13__]);\r\n([display_node_utils__WEBPACK_IMPORTED_MODULE_4__, display_node_stream__WEBPACK_IMPORTED_MODULE_13__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst DEFAULT_RANGE_CHUNK_SIZE = 65536;\r\nconst RENDERING_CANCELLED_TIMEOUT = 100;\r\nconst DELAYED_CLEANUP_TIMEOUT = 5000;\r\nconst DefaultCanvasFactory = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS ? display_node_utils__WEBPACK_IMPORTED_MODULE_4__.NodeCanvasFactory : _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMCanvasFactory;\r\nconst DefaultCMapReaderFactory = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS ? display_node_utils__WEBPACK_IMPORTED_MODULE_4__.NodeCMapReaderFactory : _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMCMapReaderFactory;\r\nconst DefaultFilterFactory = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS ? display_node_utils__WEBPACK_IMPORTED_MODULE_4__.NodeFilterFactory : _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMFilterFactory;\r\nconst DefaultStandardFontDataFactory = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS ? display_node_utils__WEBPACK_IMPORTED_MODULE_4__.NodeStandardFontDataFactory : _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMStandardFontDataFactory;\r\nfunction getDocument(src) {\r\n  if (typeof src === \"string\" || src instanceof URL) {\r\n    src = {\r\n      url: src\r\n    };\r\n  } else if ((0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isArrayBuffer)(src)) {\r\n    src = {\r\n      data: src\r\n    };\r\n  }\r\n  if (typeof src !== \"object\") {\r\n    throw new Error(\"Invalid parameter in getDocument, need parameter object.\");\r\n  }\r\n  if (!src.url && !src.data && !src.range) {\r\n    throw new Error(\"Invalid parameter object: need either .data, .range or .url\");\r\n  }\r\n  const task = new PDFDocumentLoadingTask();\r\n  const {\r\n    docId\r\n  } = task;\r\n  const url = src.url ? getUrlProp(src.url) : null;\r\n  const data = src.data ? getDataProp(src.data) : null;\r\n  const httpHeaders = src.httpHeaders || null;\r\n  const withCredentials = src.withCredentials === true;\r\n  const password = src.password ?? null;\r\n  const rangeTransport = src.range instanceof PDFDataRangeTransport ? src.range : null;\r\n  const rangeChunkSize = Number.isInteger(src.rangeChunkSize) && src.rangeChunkSize > 0 ? src.rangeChunkSize : DEFAULT_RANGE_CHUNK_SIZE;\r\n  let worker = src.worker instanceof PDFWorker ? src.worker : null;\r\n  const verbosity = src.verbosity;\r\n  const docBaseUrl = typeof src.docBaseUrl === \"string\" && !(0,_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isDataScheme)(src.docBaseUrl) ? src.docBaseUrl : null;\r\n  const cMapUrl = typeof src.cMapUrl === \"string\" ? src.cMapUrl : null;\r\n  const cMapPacked = src.cMapPacked !== false;\r\n  const CMapReaderFactory = src.CMapReaderFactory || DefaultCMapReaderFactory;\r\n  const standardFontDataUrl = typeof src.standardFontDataUrl === \"string\" ? src.standardFontDataUrl : null;\r\n  const StandardFontDataFactory = src.StandardFontDataFactory || DefaultStandardFontDataFactory;\r\n  const ignoreErrors = src.stopAtErrors !== true;\r\n  const maxImageSize = Number.isInteger(src.maxImageSize) && src.maxImageSize > -1 ? src.maxImageSize : -1;\r\n  const isEvalSupported = src.isEvalSupported !== false;\r\n  const isOffscreenCanvasSupported = typeof src.isOffscreenCanvasSupported === \"boolean\" ? src.isOffscreenCanvasSupported : !_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS;\r\n  const canvasMaxAreaInBytes = Number.isInteger(src.canvasMaxAreaInBytes) ? src.canvasMaxAreaInBytes : -1;\r\n  const disableFontFace = typeof src.disableFontFace === \"boolean\" ? src.disableFontFace : _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS;\r\n  const fontExtraProperties = src.fontExtraProperties === true;\r\n  const enableXfa = src.enableXfa === true;\r\n  const ownerDocument = src.ownerDocument || globalThis.document;\r\n  const disableRange = src.disableRange === true;\r\n  const disableStream = src.disableStream === true;\r\n  const disableAutoFetch = src.disableAutoFetch === true;\r\n  const pdfBug = src.pdfBug === true;\r\n  const length = rangeTransport ? rangeTransport.length : src.length ?? NaN;\r\n  const useSystemFonts = typeof src.useSystemFonts === \"boolean\" ? src.useSystemFonts : !_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS && !disableFontFace;\r\n  const useWorkerFetch = typeof src.useWorkerFetch === \"boolean\" ? src.useWorkerFetch : CMapReaderFactory === _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMCMapReaderFactory && StandardFontDataFactory === _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMStandardFontDataFactory && cMapUrl && standardFontDataUrl && (0,_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isValidFetchUrl)(cMapUrl, document.baseURI) && (0,_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isValidFetchUrl)(standardFontDataUrl, document.baseURI);\r\n  const canvasFactory = src.canvasFactory || new DefaultCanvasFactory({\r\n    ownerDocument\r\n  });\r\n  const filterFactory = src.filterFactory || new DefaultFilterFactory({\r\n    docId,\r\n    ownerDocument\r\n  });\r\n  const styleElement = null;\r\n  (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.setVerbosityLevel)(verbosity);\r\n  const transportFactory = {\r\n    canvasFactory,\r\n    filterFactory\r\n  };\r\n  if (!useWorkerFetch) {\r\n    transportFactory.cMapReaderFactory = new CMapReaderFactory({\r\n      baseUrl: cMapUrl,\r\n      isCompressed: cMapPacked\r\n    });\r\n    transportFactory.standardFontDataFactory = new StandardFontDataFactory({\r\n      baseUrl: standardFontDataUrl\r\n    });\r\n  }\r\n  if (!worker) {\r\n    const workerParams = {\r\n      verbosity,\r\n      port: _worker_options_js__WEBPACK_IMPORTED_MODULE_6__.GlobalWorkerOptions.workerPort\r\n    };\r\n    worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);\r\n    task._worker = worker;\r\n  }\r\n  const fetchDocParams = {\r\n    docId,\r\n    apiVersion: '4.0.379',\r\n    data,\r\n    password,\r\n    disableAutoFetch,\r\n    rangeChunkSize,\r\n    length,\r\n    docBaseUrl,\r\n    enableXfa,\r\n    evaluatorOptions: {\r\n      maxImageSize,\r\n      disableFontFace,\r\n      ignoreErrors,\r\n      isEvalSupported,\r\n      isOffscreenCanvasSupported,\r\n      canvasMaxAreaInBytes,\r\n      fontExtraProperties,\r\n      useSystemFonts,\r\n      cMapUrl: useWorkerFetch ? cMapUrl : null,\r\n      standardFontDataUrl: useWorkerFetch ? standardFontDataUrl : null\r\n    }\r\n  };\r\n  const transportParams = {\r\n    ignoreErrors,\r\n    isEvalSupported,\r\n    disableFontFace,\r\n    fontExtraProperties,\r\n    enableXfa,\r\n    ownerDocument,\r\n    disableAutoFetch,\r\n    pdfBug,\r\n    styleElement\r\n  };\r\n  worker.promise.then(function () {\r\n    if (task.destroyed) {\r\n      throw new Error(\"Loading aborted\");\r\n    }\r\n    const workerIdPromise = _fetchDocument(worker, fetchDocParams);\r\n    const networkStreamPromise = new Promise(function (resolve) {\r\n      let networkStream;\r\n      if (rangeTransport) {\r\n        networkStream = new _transport_stream_js__WEBPACK_IMPORTED_MODULE_10__.PDFDataTransportStream({\r\n          length,\r\n          initialData: rangeTransport.initialData,\r\n          progressiveDone: rangeTransport.progressiveDone,\r\n          contentDispositionFilename: rangeTransport.contentDispositionFilename,\r\n          disableRange,\r\n          disableStream\r\n        }, rangeTransport);\r\n      } else if (!data) {\r\n        const createPDFNetworkStream = params => {\r\n          if (_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS) {\r\n            return new display_node_stream__WEBPACK_IMPORTED_MODULE_13__.PDFNodeStream(params);\r\n          }\r\n          return (0,_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isValidFetchUrl)(params.url) ? new display_fetch_stream__WEBPACK_IMPORTED_MODULE_11__.PDFFetchStream(params) : new display_network__WEBPACK_IMPORTED_MODULE_12__.PDFNetworkStream(params);\r\n        };\r\n        networkStream = createPDFNetworkStream({\r\n          url,\r\n          length,\r\n          httpHeaders,\r\n          withCredentials,\r\n          rangeChunkSize,\r\n          disableRange,\r\n          disableStream\r\n        });\r\n      }\r\n      resolve(networkStream);\r\n    });\r\n    return Promise.all([workerIdPromise, networkStreamPromise]).then(function ([workerId, networkStream]) {\r\n      if (task.destroyed) {\r\n        throw new Error(\"Loading aborted\");\r\n      }\r\n      const messageHandler = new _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__.MessageHandler(docId, workerId, worker.port);\r\n      const transport = new WorkerTransport(messageHandler, task, networkStream, transportParams, transportFactory);\r\n      task._transport = transport;\r\n      messageHandler.send(\"Ready\", null);\r\n    });\r\n  }).catch(task._capability.reject);\r\n  return task;\r\n}\r\nasync function _fetchDocument(worker, source) {\r\n  if (worker.destroyed) {\r\n    throw new Error(\"Worker was destroyed\");\r\n  }\r\n  const workerId = await worker.messageHandler.sendWithPromise(\"GetDocRequest\", source, source.data ? [source.data.buffer] : null);\r\n  if (worker.destroyed) {\r\n    throw new Error(\"Worker was destroyed\");\r\n  }\r\n  return workerId;\r\n}\r\nfunction getUrlProp(val) {\r\n  if (val instanceof URL) {\r\n    return val.href;\r\n  }\r\n  try {\r\n    return new URL(val, window.location).href;\r\n  } catch {\r\n    if (_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS && typeof val === \"string\") {\r\n      return val;\r\n    }\r\n  }\r\n  throw new Error(\"Invalid PDF url data: \" + \"either string or URL-object is expected in the url property.\");\r\n}\r\nfunction getDataProp(val) {\r\n  if (_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS && typeof Buffer !== \"undefined\" && val instanceof Buffer) {\r\n    throw new Error(\"Please provide binary data as `Uint8Array`, rather than `Buffer`.\");\r\n  }\r\n  if (val instanceof Uint8Array && val.byteLength === val.buffer.byteLength) {\r\n    return val;\r\n  }\r\n  if (typeof val === \"string\") {\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.stringToBytes)(val);\r\n  }\r\n  if (typeof val === \"object\" && !isNaN(val?.length) || (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isArrayBuffer)(val)) {\r\n    return new Uint8Array(val);\r\n  }\r\n  throw new Error(\"Invalid PDF binary data: either TypedArray, \" + \"string, or array-like object is expected in the data property.\");\r\n}\r\nclass PDFDocumentLoadingTask {\r\n  static #docId = 0;\r\n  constructor() {\r\n    this._capability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n    this._transport = null;\r\n    this._worker = null;\r\n    this.docId = `d${PDFDocumentLoadingTask.#docId++}`;\r\n    this.destroyed = false;\r\n    this.onPassword = null;\r\n    this.onProgress = null;\r\n  }\r\n  get promise() {\r\n    return this._capability.promise;\r\n  }\r\n  async destroy() {\r\n    this.destroyed = true;\r\n    try {\r\n      if (this._worker?.port) {\r\n        this._worker._pendingDestroy = true;\r\n      }\r\n      await this._transport?.destroy();\r\n    } catch (ex) {\r\n      if (this._worker?.port) {\r\n        delete this._worker._pendingDestroy;\r\n      }\r\n      throw ex;\r\n    }\r\n    this._transport = null;\r\n    if (this._worker) {\r\n      this._worker.destroy();\r\n      this._worker = null;\r\n    }\r\n  }\r\n}\r\nclass PDFDataRangeTransport {\r\n  constructor(length, initialData, progressiveDone = false, contentDispositionFilename = null) {\r\n    this.length = length;\r\n    this.initialData = initialData;\r\n    this.progressiveDone = progressiveDone;\r\n    this.contentDispositionFilename = contentDispositionFilename;\r\n    this._rangeListeners = [];\r\n    this._progressListeners = [];\r\n    this._progressiveReadListeners = [];\r\n    this._progressiveDoneListeners = [];\r\n    this._readyCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n  }\r\n  addRangeListener(listener) {\r\n    this._rangeListeners.push(listener);\r\n  }\r\n  addProgressListener(listener) {\r\n    this._progressListeners.push(listener);\r\n  }\r\n  addProgressiveReadListener(listener) {\r\n    this._progressiveReadListeners.push(listener);\r\n  }\r\n  addProgressiveDoneListener(listener) {\r\n    this._progressiveDoneListeners.push(listener);\r\n  }\r\n  onDataRange(begin, chunk) {\r\n    for (const listener of this._rangeListeners) {\r\n      listener(begin, chunk);\r\n    }\r\n  }\r\n  onDataProgress(loaded, total) {\r\n    this._readyCapability.promise.then(() => {\r\n      for (const listener of this._progressListeners) {\r\n        listener(loaded, total);\r\n      }\r\n    });\r\n  }\r\n  onDataProgressiveRead(chunk) {\r\n    this._readyCapability.promise.then(() => {\r\n      for (const listener of this._progressiveReadListeners) {\r\n        listener(chunk);\r\n      }\r\n    });\r\n  }\r\n  onDataProgressiveDone() {\r\n    this._readyCapability.promise.then(() => {\r\n      for (const listener of this._progressiveDoneListeners) {\r\n        listener();\r\n      }\r\n    });\r\n  }\r\n  transportReady() {\r\n    this._readyCapability.resolve();\r\n  }\r\n  requestDataRange(begin, end) {\r\n    (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Abstract method PDFDataRangeTransport.requestDataRange\");\r\n  }\r\n  abort() {}\r\n}\r\nclass PDFDocumentProxy {\r\n  constructor(pdfInfo, transport) {\r\n    this._pdfInfo = pdfInfo;\r\n    this._transport = transport;\r\n  }\r\n  get annotationStorage() {\r\n    return this._transport.annotationStorage;\r\n  }\r\n  get filterFactory() {\r\n    return this._transport.filterFactory;\r\n  }\r\n  get numPages() {\r\n    return this._pdfInfo.numPages;\r\n  }\r\n  get fingerprints() {\r\n    return this._pdfInfo.fingerprints;\r\n  }\r\n  get isPureXfa() {\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"isPureXfa\", !!this._transport._htmlForXfa);\r\n  }\r\n  get allXfaHtml() {\r\n    return this._transport._htmlForXfa;\r\n  }\r\n  getPage(pageNumber) {\r\n    return this._transport.getPage(pageNumber);\r\n  }\r\n  getPageIndex(ref) {\r\n    return this._transport.getPageIndex(ref);\r\n  }\r\n  getDestinations() {\r\n    return this._transport.getDestinations();\r\n  }\r\n  getDestination(id) {\r\n    return this._transport.getDestination(id);\r\n  }\r\n  getPageLabels() {\r\n    return this._transport.getPageLabels();\r\n  }\r\n  getPageLayout() {\r\n    return this._transport.getPageLayout();\r\n  }\r\n  getPageMode() {\r\n    return this._transport.getPageMode();\r\n  }\r\n  getViewerPreferences() {\r\n    return this._transport.getViewerPreferences();\r\n  }\r\n  getOpenAction() {\r\n    return this._transport.getOpenAction();\r\n  }\r\n  getAttachments() {\r\n    return this._transport.getAttachments();\r\n  }\r\n  getJSActions() {\r\n    return this._transport.getDocJSActions();\r\n  }\r\n  getOutline() {\r\n    return this._transport.getOutline();\r\n  }\r\n  getOptionalContentConfig() {\r\n    return this._transport.getOptionalContentConfig();\r\n  }\r\n  getPermissions() {\r\n    return this._transport.getPermissions();\r\n  }\r\n  getMetadata() {\r\n    return this._transport.getMetadata();\r\n  }\r\n  getMarkInfo() {\r\n    return this._transport.getMarkInfo();\r\n  }\r\n  getData() {\r\n    return this._transport.getData();\r\n  }\r\n  saveDocument() {\r\n    return this._transport.saveDocument();\r\n  }\r\n  getDownloadInfo() {\r\n    return this._transport.downloadInfoCapability.promise;\r\n  }\r\n  cleanup(keepLoadedFonts = false) {\r\n    return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\r\n  }\r\n  destroy() {\r\n    return this.loadingTask.destroy();\r\n  }\r\n  get loadingParams() {\r\n    return this._transport.loadingParams;\r\n  }\r\n  get loadingTask() {\r\n    return this._transport.loadingTask;\r\n  }\r\n  getFieldObjects() {\r\n    return this._transport.getFieldObjects();\r\n  }\r\n  hasJSActions() {\r\n    return this._transport.hasJSActions();\r\n  }\r\n  getCalculationOrderIds() {\r\n    return this._transport.getCalculationOrderIds();\r\n  }\r\n}\r\nclass PDFPageProxy {\r\n  #delayedCleanupTimeout = null;\r\n  #pendingCleanup = false;\r\n  constructor(pageIndex, pageInfo, transport, pdfBug = false) {\r\n    this._pageIndex = pageIndex;\r\n    this._pageInfo = pageInfo;\r\n    this._transport = transport;\r\n    this._stats = pdfBug ? new _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.StatTimer() : null;\r\n    this._pdfBug = pdfBug;\r\n    this.commonObjs = transport.commonObjs;\r\n    this.objs = new PDFObjects();\r\n    this._maybeCleanupAfterRender = false;\r\n    this._intentStates = new Map();\r\n    this.destroyed = false;\r\n  }\r\n  get pageNumber() {\r\n    return this._pageIndex + 1;\r\n  }\r\n  get rotate() {\r\n    return this._pageInfo.rotate;\r\n  }\r\n  get ref() {\r\n    return this._pageInfo.ref;\r\n  }\r\n  get userUnit() {\r\n    return this._pageInfo.userUnit;\r\n  }\r\n  get view() {\r\n    return this._pageInfo.view;\r\n  }\r\n  getViewport({\r\n    scale,\r\n    rotation = this.rotate,\r\n    offsetX = 0,\r\n    offsetY = 0,\r\n    dontFlip = false\r\n  } = {}) {\r\n    return new _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.PageViewport({\r\n      viewBox: this.view,\r\n      scale,\r\n      rotation,\r\n      offsetX,\r\n      offsetY,\r\n      dontFlip\r\n    });\r\n  }\r\n  getAnnotations({\r\n    intent = \"display\"\r\n  } = {}) {\r\n    const intentArgs = this._transport.getRenderingIntent(intent);\r\n    return this._transport.getAnnotations(this._pageIndex, intentArgs.renderingIntent);\r\n  }\r\n  getJSActions() {\r\n    return this._transport.getPageJSActions(this._pageIndex);\r\n  }\r\n  get filterFactory() {\r\n    return this._transport.filterFactory;\r\n  }\r\n  get isPureXfa() {\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"isPureXfa\", !!this._transport._htmlForXfa);\r\n  }\r\n  async getXfa() {\r\n    return this._transport._htmlForXfa?.children[this._pageIndex] || null;\r\n  }\r\n  render({\r\n    canvasContext,\r\n    viewport,\r\n    intent = \"display\",\r\n    annotationMode = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationMode.ENABLE,\r\n    transform = null,\r\n    background = null,\r\n    optionalContentConfigPromise = null,\r\n    annotationCanvasMap = null,\r\n    pageColors = null,\r\n    printAnnotationStorage = null\r\n  }) {\r\n    this._stats?.time(\"Overall\");\r\n    const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, printAnnotationStorage);\r\n    this.#pendingCleanup = false;\r\n    this.#abortDelayedCleanup();\r\n    if (!optionalContentConfigPromise) {\r\n      optionalContentConfigPromise = this._transport.getOptionalContentConfig();\r\n    }\r\n    let intentState = this._intentStates.get(intentArgs.cacheKey);\r\n    if (!intentState) {\r\n      intentState = Object.create(null);\r\n      this._intentStates.set(intentArgs.cacheKey, intentState);\r\n    }\r\n    if (intentState.streamReaderCancelTimeout) {\r\n      clearTimeout(intentState.streamReaderCancelTimeout);\r\n      intentState.streamReaderCancelTimeout = null;\r\n    }\r\n    const intentPrint = !!(intentArgs.renderingIntent & _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.PRINT);\r\n    if (!intentState.displayReadyCapability) {\r\n      intentState.displayReadyCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n      intentState.operatorList = {\r\n        fnArray: [],\r\n        argsArray: [],\r\n        lastChunk: false,\r\n        separateAnnots: null\r\n      };\r\n      this._stats?.time(\"Page Request\");\r\n      this._pumpOperatorList(intentArgs);\r\n    }\r\n    const complete = error => {\r\n      intentState.renderTasks.delete(internalRenderTask);\r\n      if (this._maybeCleanupAfterRender || intentPrint) {\r\n        this.#pendingCleanup = true;\r\n      }\r\n      this.#tryCleanup(!intentPrint);\r\n      if (error) {\r\n        internalRenderTask.capability.reject(error);\r\n        this._abortOperatorList({\r\n          intentState,\r\n          reason: error instanceof Error ? error : new Error(error)\r\n        });\r\n      } else {\r\n        internalRenderTask.capability.resolve();\r\n      }\r\n      this._stats?.timeEnd(\"Rendering\");\r\n      this._stats?.timeEnd(\"Overall\");\r\n    };\r\n    const internalRenderTask = new InternalRenderTask({\r\n      callback: complete,\r\n      params: {\r\n        canvasContext,\r\n        viewport,\r\n        transform,\r\n        background\r\n      },\r\n      objs: this.objs,\r\n      commonObjs: this.commonObjs,\r\n      annotationCanvasMap,\r\n      operatorList: intentState.operatorList,\r\n      pageIndex: this._pageIndex,\r\n      canvasFactory: this._transport.canvasFactory,\r\n      filterFactory: this._transport.filterFactory,\r\n      useRequestAnimationFrame: !intentPrint,\r\n      pdfBug: this._pdfBug,\r\n      pageColors\r\n    });\r\n    (intentState.renderTasks ||= new Set()).add(internalRenderTask);\r\n    const renderTask = internalRenderTask.task;\r\n    Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(([transparency, optionalContentConfig]) => {\r\n      if (this.destroyed) {\r\n        complete();\r\n        return;\r\n      }\r\n      this._stats?.time(\"Rendering\");\r\n      internalRenderTask.initializeGraphics({\r\n        transparency,\r\n        optionalContentConfig\r\n      });\r\n      internalRenderTask.operatorListChanged();\r\n    }).catch(complete);\r\n    return renderTask;\r\n  }\r\n  getOperatorList({\r\n    intent = \"display\",\r\n    annotationMode = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationMode.ENABLE,\r\n    printAnnotationStorage = null\r\n  } = {}) {\r\n    function operatorListChanged() {\r\n      if (intentState.operatorList.lastChunk) {\r\n        intentState.opListReadCapability.resolve(intentState.operatorList);\r\n        intentState.renderTasks.delete(opListTask);\r\n      }\r\n    }\r\n    const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, printAnnotationStorage, true);\r\n    let intentState = this._intentStates.get(intentArgs.cacheKey);\r\n    if (!intentState) {\r\n      intentState = Object.create(null);\r\n      this._intentStates.set(intentArgs.cacheKey, intentState);\r\n    }\r\n    let opListTask;\r\n    if (!intentState.opListReadCapability) {\r\n      opListTask = Object.create(null);\r\n      opListTask.operatorListChanged = operatorListChanged;\r\n      intentState.opListReadCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n      (intentState.renderTasks ||= new Set()).add(opListTask);\r\n      intentState.operatorList = {\r\n        fnArray: [],\r\n        argsArray: [],\r\n        lastChunk: false,\r\n        separateAnnots: null\r\n      };\r\n      this._stats?.time(\"Page Request\");\r\n      this._pumpOperatorList(intentArgs);\r\n    }\r\n    return intentState.opListReadCapability.promise;\r\n  }\r\n  streamTextContent({\r\n    includeMarkedContent = false,\r\n    disableNormalization = false\r\n  } = {}) {\r\n    const TEXT_CONTENT_CHUNK_SIZE = 100;\r\n    return this._transport.messageHandler.sendWithStream(\"GetTextContent\", {\r\n      pageIndex: this._pageIndex,\r\n      includeMarkedContent: includeMarkedContent === true,\r\n      disableNormalization: disableNormalization === true\r\n    }, {\r\n      highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\r\n      size(textContent) {\r\n        return textContent.items.length;\r\n      }\r\n    });\r\n  }\r\n  getTextContent(params = {}) {\r\n    if (this._transport._htmlForXfa) {\r\n      return this.getXfa().then(xfa => {\r\n        return _xfa_text_js__WEBPACK_IMPORTED_MODULE_14__.XfaText.textContent(xfa);\r\n      });\r\n    }\r\n    const readableStream = this.streamTextContent(params);\r\n    return new Promise(function (resolve, reject) {\r\n      function pump() {\r\n        reader.read().then(function ({\r\n          value,\r\n          done\r\n        }) {\r\n          if (done) {\r\n            resolve(textContent);\r\n            return;\r\n          }\r\n          Object.assign(textContent.styles, value.styles);\r\n          textContent.items.push(...value.items);\r\n          pump();\r\n        }, reject);\r\n      }\r\n      const reader = readableStream.getReader();\r\n      const textContent = {\r\n        items: [],\r\n        styles: Object.create(null)\r\n      };\r\n      pump();\r\n    });\r\n  }\r\n  getStructTree() {\r\n    return this._transport.getStructTree(this._pageIndex);\r\n  }\r\n  _destroy() {\r\n    this.destroyed = true;\r\n    const waitOn = [];\r\n    for (const intentState of this._intentStates.values()) {\r\n      this._abortOperatorList({\r\n        intentState,\r\n        reason: new Error(\"Page was destroyed.\"),\r\n        force: true\r\n      });\r\n      if (intentState.opListReadCapability) {\r\n        continue;\r\n      }\r\n      for (const internalRenderTask of intentState.renderTasks) {\r\n        waitOn.push(internalRenderTask.completed);\r\n        internalRenderTask.cancel();\r\n      }\r\n    }\r\n    this.objs.clear();\r\n    this.#pendingCleanup = false;\r\n    this.#abortDelayedCleanup();\r\n    return Promise.all(waitOn);\r\n  }\r\n  cleanup(resetStats = false) {\r\n    this.#pendingCleanup = true;\r\n    const success = this.#tryCleanup(false);\r\n    if (resetStats && success) {\r\n      this._stats &&= new _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.StatTimer();\r\n    }\r\n    return success;\r\n  }\r\n  #tryCleanup(delayed = false) {\r\n    this.#abortDelayedCleanup();\r\n    if (!this.#pendingCleanup || this.destroyed) {\r\n      return false;\r\n    }\r\n    if (delayed) {\r\n      this.#delayedCleanupTimeout = setTimeout(() => {\r\n        this.#delayedCleanupTimeout = null;\r\n        this.#tryCleanup(false);\r\n      }, DELAYED_CLEANUP_TIMEOUT);\r\n      return false;\r\n    }\r\n    for (const {\r\n      renderTasks,\r\n      operatorList\r\n    } of this._intentStates.values()) {\r\n      if (renderTasks.size > 0 || !operatorList.lastChunk) {\r\n        return false;\r\n      }\r\n    }\r\n    this._intentStates.clear();\r\n    this.objs.clear();\r\n    this.#pendingCleanup = false;\r\n    return true;\r\n  }\r\n  #abortDelayedCleanup() {\r\n    if (this.#delayedCleanupTimeout) {\r\n      clearTimeout(this.#delayedCleanupTimeout);\r\n      this.#delayedCleanupTimeout = null;\r\n    }\r\n  }\r\n  _startRenderPage(transparency, cacheKey) {\r\n    const intentState = this._intentStates.get(cacheKey);\r\n    if (!intentState) {\r\n      return;\r\n    }\r\n    this._stats?.timeEnd(\"Page Request\");\r\n    intentState.displayReadyCapability?.resolve(transparency);\r\n  }\r\n  _renderPageChunk(operatorListChunk, intentState) {\r\n    for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\r\n      intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\r\n      intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\r\n    }\r\n    intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\r\n    intentState.operatorList.separateAnnots = operatorListChunk.separateAnnots;\r\n    for (const internalRenderTask of intentState.renderTasks) {\r\n      internalRenderTask.operatorListChanged();\r\n    }\r\n    if (operatorListChunk.lastChunk) {\r\n      this.#tryCleanup(true);\r\n    }\r\n  }\r\n  _pumpOperatorList({\r\n    renderingIntent,\r\n    cacheKey,\r\n    annotationStorageSerializable\r\n  }) {\r\n    const {\r\n      map,\r\n      transfer\r\n    } = annotationStorageSerializable;\r\n    const readableStream = this._transport.messageHandler.sendWithStream(\"GetOperatorList\", {\r\n      pageIndex: this._pageIndex,\r\n      intent: renderingIntent,\r\n      cacheKey,\r\n      annotationStorage: map\r\n    }, transfer);\r\n    const reader = readableStream.getReader();\r\n    const intentState = this._intentStates.get(cacheKey);\r\n    intentState.streamReader = reader;\r\n    const pump = () => {\r\n      reader.read().then(({\r\n        value,\r\n        done\r\n      }) => {\r\n        if (done) {\r\n          intentState.streamReader = null;\r\n          return;\r\n        }\r\n        if (this._transport.destroyed) {\r\n          return;\r\n        }\r\n        this._renderPageChunk(value, intentState);\r\n        pump();\r\n      }, reason => {\r\n        intentState.streamReader = null;\r\n        if (this._transport.destroyed) {\r\n          return;\r\n        }\r\n        if (intentState.operatorList) {\r\n          intentState.operatorList.lastChunk = true;\r\n          for (const internalRenderTask of intentState.renderTasks) {\r\n            internalRenderTask.operatorListChanged();\r\n          }\r\n          this.#tryCleanup(true);\r\n        }\r\n        if (intentState.displayReadyCapability) {\r\n          intentState.displayReadyCapability.reject(reason);\r\n        } else if (intentState.opListReadCapability) {\r\n          intentState.opListReadCapability.reject(reason);\r\n        } else {\r\n          throw reason;\r\n        }\r\n      });\r\n    };\r\n    pump();\r\n  }\r\n  _abortOperatorList({\r\n    intentState,\r\n    reason,\r\n    force = false\r\n  }) {\r\n    if (!intentState.streamReader) {\r\n      return;\r\n    }\r\n    if (intentState.streamReaderCancelTimeout) {\r\n      clearTimeout(intentState.streamReaderCancelTimeout);\r\n      intentState.streamReaderCancelTimeout = null;\r\n    }\r\n    if (!force) {\r\n      if (intentState.renderTasks.size > 0) {\r\n        return;\r\n      }\r\n      if (reason instanceof _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.RenderingCancelledException) {\r\n        let delay = RENDERING_CANCELLED_TIMEOUT;\r\n        if (reason.extraDelay > 0 && reason.extraDelay < 1000) {\r\n          delay += reason.extraDelay;\r\n        }\r\n        intentState.streamReaderCancelTimeout = setTimeout(() => {\r\n          intentState.streamReaderCancelTimeout = null;\r\n          this._abortOperatorList({\r\n            intentState,\r\n            reason,\r\n            force: true\r\n          });\r\n        }, delay);\r\n        return;\r\n      }\r\n    }\r\n    intentState.streamReader.cancel(new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(reason.message)).catch(() => {});\r\n    intentState.streamReader = null;\r\n    if (this._transport.destroyed) {\r\n      return;\r\n    }\r\n    for (const [curCacheKey, curIntentState] of this._intentStates) {\r\n      if (curIntentState === intentState) {\r\n        this._intentStates.delete(curCacheKey);\r\n        break;\r\n      }\r\n    }\r\n    this.cleanup();\r\n  }\r\n  get stats() {\r\n    return this._stats;\r\n  }\r\n}\r\nclass LoopbackPort {\r\n  #listeners = new Set();\r\n  #deferred = Promise.resolve();\r\n  postMessage(obj, transfer) {\r\n    const event = {\r\n      data: structuredClone(obj, transfer ? {\r\n        transfer\r\n      } : null)\r\n    };\r\n    this.#deferred.then(() => {\r\n      for (const listener of this.#listeners) {\r\n        listener.call(this, event);\r\n      }\r\n    });\r\n  }\r\n  addEventListener(name, listener) {\r\n    this.#listeners.add(listener);\r\n  }\r\n  removeEventListener(name, listener) {\r\n    this.#listeners.delete(listener);\r\n  }\r\n  terminate() {\r\n    this.#listeners.clear();\r\n  }\r\n}\r\nconst PDFWorkerUtil = {\r\n  isWorkerDisabled: false,\r\n  fakeWorkerId: 0\r\n};\r\n{\r\n  if (_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS) {\r\n    PDFWorkerUtil.isWorkerDisabled = true;\r\n    _worker_options_js__WEBPACK_IMPORTED_MODULE_6__.GlobalWorkerOptions.workerSrc ||= \"./pdf.worker.mjs\";\r\n  }\r\n  PDFWorkerUtil.isSameOrigin = function (baseUrl, otherUrl) {\r\n    let base;\r\n    try {\r\n      base = new URL(baseUrl);\r\n      if (!base.origin || base.origin === \"null\") {\r\n        return false;\r\n      }\r\n    } catch {\r\n      return false;\r\n    }\r\n    const other = new URL(otherUrl, base);\r\n    return base.origin === other.origin;\r\n  };\r\n  PDFWorkerUtil.createCDNWrapper = function (url) {\r\n    const wrapper = `await import(\"${url}\");`;\r\n    return URL.createObjectURL(new Blob([wrapper], {\r\n      type: \"text/javascript\"\r\n    }));\r\n  };\r\n}\r\nclass PDFWorker {\r\n  static #workerPorts;\r\n  constructor({\r\n    name = null,\r\n    port = null,\r\n    verbosity = (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.getVerbosityLevel)()\r\n  } = {}) {\r\n    this.name = name;\r\n    this.destroyed = false;\r\n    this.verbosity = verbosity;\r\n    this._readyCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n    this._port = null;\r\n    this._webWorker = null;\r\n    this._messageHandler = null;\r\n    if (port) {\r\n      if (PDFWorker.#workerPorts?.has(port)) {\r\n        throw new Error(\"Cannot use more than one PDFWorker per port.\");\r\n      }\r\n      (PDFWorker.#workerPorts ||= new WeakMap()).set(port, this);\r\n      this._initializeFromPort(port);\r\n      return;\r\n    }\r\n    this._initialize();\r\n  }\r\n  get promise() {\r\n    return this._readyCapability.promise;\r\n  }\r\n  get port() {\r\n    return this._port;\r\n  }\r\n  get messageHandler() {\r\n    return this._messageHandler;\r\n  }\r\n  _initializeFromPort(port) {\r\n    this._port = port;\r\n    this._messageHandler = new _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__.MessageHandler(\"main\", \"worker\", port);\r\n    this._messageHandler.on(\"ready\", function () {});\r\n    this._readyCapability.resolve();\r\n    this._messageHandler.send(\"configure\", {\r\n      verbosity: this.verbosity\r\n    });\r\n  }\r\n  _initialize() {\r\n    if (!PDFWorkerUtil.isWorkerDisabled && !PDFWorker.#mainThreadWorkerMessageHandler) {\r\n      let {\r\n        workerSrc\r\n      } = PDFWorker;\r\n      try {\r\n        if (!PDFWorkerUtil.isSameOrigin(window.location.href, workerSrc)) {\r\n          workerSrc = PDFWorkerUtil.createCDNWrapper(new URL(workerSrc, window.location).href);\r\n        }\r\n        const worker = new Worker(workerSrc, {\r\n          type: \"module\"\r\n        });\r\n        const messageHandler = new _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__.MessageHandler(\"main\", \"worker\", worker);\r\n        const terminateEarly = () => {\r\n          worker.removeEventListener(\"error\", onWorkerError);\r\n          messageHandler.destroy();\r\n          worker.terminate();\r\n          if (this.destroyed) {\r\n            this._readyCapability.reject(new Error(\"Worker was destroyed\"));\r\n          } else {\r\n            this._setupFakeWorker();\r\n          }\r\n        };\r\n        const onWorkerError = () => {\r\n          if (!this._webWorker) {\r\n            terminateEarly();\r\n          }\r\n        };\r\n        worker.addEventListener(\"error\", onWorkerError);\r\n        messageHandler.on(\"test\", data => {\r\n          worker.removeEventListener(\"error\", onWorkerError);\r\n          if (this.destroyed) {\r\n            terminateEarly();\r\n            return;\r\n          }\r\n          if (data) {\r\n            this._messageHandler = messageHandler;\r\n            this._port = worker;\r\n            this._webWorker = worker;\r\n            this._readyCapability.resolve();\r\n            messageHandler.send(\"configure\", {\r\n              verbosity: this.verbosity\r\n            });\r\n          } else {\r\n            this._setupFakeWorker();\r\n            messageHandler.destroy();\r\n            worker.terminate();\r\n          }\r\n        });\r\n        messageHandler.on(\"ready\", data => {\r\n          worker.removeEventListener(\"error\", onWorkerError);\r\n          if (this.destroyed) {\r\n            terminateEarly();\r\n            return;\r\n          }\r\n          try {\r\n            sendTest();\r\n          } catch {\r\n            this._setupFakeWorker();\r\n          }\r\n        });\r\n        const sendTest = () => {\r\n          const testObj = new Uint8Array();\r\n          messageHandler.send(\"test\", testObj, [testObj.buffer]);\r\n        };\r\n        sendTest();\r\n        return;\r\n      } catch {\r\n        (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.info)(\"The worker has been disabled.\");\r\n      }\r\n    }\r\n    this._setupFakeWorker();\r\n  }\r\n  _setupFakeWorker() {\r\n    if (!PDFWorkerUtil.isWorkerDisabled) {\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(\"Setting up fake worker.\");\r\n      PDFWorkerUtil.isWorkerDisabled = true;\r\n    }\r\n    PDFWorker._setupFakeWorkerGlobal.then(WorkerMessageHandler => {\r\n      if (this.destroyed) {\r\n        this._readyCapability.reject(new Error(\"Worker was destroyed\"));\r\n        return;\r\n      }\r\n      const port = new LoopbackPort();\r\n      this._port = port;\r\n      const id = `fake${PDFWorkerUtil.fakeWorkerId++}`;\r\n      const workerHandler = new _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__.MessageHandler(id + \"_worker\", id, port);\r\n      WorkerMessageHandler.setup(workerHandler, port);\r\n      const messageHandler = new _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__.MessageHandler(id, id + \"_worker\", port);\r\n      this._messageHandler = messageHandler;\r\n      this._readyCapability.resolve();\r\n      messageHandler.send(\"configure\", {\r\n        verbosity: this.verbosity\r\n      });\r\n    }).catch(reason => {\r\n      this._readyCapability.reject(new Error(`Setting up fake worker failed: \"${reason.message}\".`));\r\n    });\r\n  }\r\n  destroy() {\r\n    this.destroyed = true;\r\n    if (this._webWorker) {\r\n      this._webWorker.terminate();\r\n      this._webWorker = null;\r\n    }\r\n    PDFWorker.#workerPorts?.delete(this._port);\r\n    this._port = null;\r\n    if (this._messageHandler) {\r\n      this._messageHandler.destroy();\r\n      this._messageHandler = null;\r\n    }\r\n  }\r\n  static fromPort(params) {\r\n    if (!params?.port) {\r\n      throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\r\n    }\r\n    const cachedPort = this.#workerPorts?.get(params.port);\r\n    if (cachedPort) {\r\n      if (cachedPort._pendingDestroy) {\r\n        throw new Error(\"PDFWorker.fromPort - the worker is being destroyed.\\n\" + \"Please remember to await `PDFDocumentLoadingTask.destroy()`-calls.\");\r\n      }\r\n      return cachedPort;\r\n    }\r\n    return new PDFWorker(params);\r\n  }\r\n  static get workerSrc() {\r\n    if (_worker_options_js__WEBPACK_IMPORTED_MODULE_6__.GlobalWorkerOptions.workerSrc) {\r\n      return _worker_options_js__WEBPACK_IMPORTED_MODULE_6__.GlobalWorkerOptions.workerSrc;\r\n    }\r\n    throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\r\n  }\r\n  static get #mainThreadWorkerMessageHandler() {\r\n    try {\r\n      return globalThis.pdfjsWorker?.WorkerMessageHandler || null;\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n  static get _setupFakeWorkerGlobal() {\r\n    const loader = async () => {\r\n      if (this.#mainThreadWorkerMessageHandler) {\r\n        return this.#mainThreadWorkerMessageHandler;\r\n      }\r\n      const worker = await import(/* webpackIgnore: true */ this.workerSrc);\r\n      return worker.WorkerMessageHandler;\r\n    };\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"_setupFakeWorkerGlobal\", loader());\r\n  }\r\n}\r\nclass WorkerTransport {\r\n  #methodPromises = new Map();\r\n  #pageCache = new Map();\r\n  #pagePromises = new Map();\r\n  #passwordCapability = null;\r\n  constructor(messageHandler, loadingTask, networkStream, params, factory) {\r\n    this.messageHandler = messageHandler;\r\n    this.loadingTask = loadingTask;\r\n    this.commonObjs = new PDFObjects();\r\n    this.fontLoader = new _font_loader_js__WEBPACK_IMPORTED_MODULE_3__.FontLoader({\r\n      ownerDocument: params.ownerDocument,\r\n      styleElement: params.styleElement\r\n    });\r\n    this._params = params;\r\n    this.canvasFactory = factory.canvasFactory;\r\n    this.filterFactory = factory.filterFactory;\r\n    this.cMapReaderFactory = factory.cMapReaderFactory;\r\n    this.standardFontDataFactory = factory.standardFontDataFactory;\r\n    this.destroyed = false;\r\n    this.destroyCapability = null;\r\n    this._networkStream = networkStream;\r\n    this._fullReader = null;\r\n    this._lastProgress = null;\r\n    this.downloadInfoCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n    this.setupMessageHandler();\r\n  }\r\n  #cacheSimpleMethod(name, data = null) {\r\n    const cachedPromise = this.#methodPromises.get(name);\r\n    if (cachedPromise) {\r\n      return cachedPromise;\r\n    }\r\n    const promise = this.messageHandler.sendWithPromise(name, data);\r\n    this.#methodPromises.set(name, promise);\r\n    return promise;\r\n  }\r\n  get annotationStorage() {\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"annotationStorage\", new _annotation_storage_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationStorage());\r\n  }\r\n  getRenderingIntent(intent, annotationMode = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationMode.ENABLE, printAnnotationStorage = null, isOpList = false) {\r\n    let renderingIntent = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.DISPLAY;\r\n    let annotationStorageSerializable = _annotation_storage_js__WEBPACK_IMPORTED_MODULE_1__.SerializableEmpty;\r\n    switch (intent) {\r\n      case \"any\":\r\n        renderingIntent = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.ANY;\r\n        break;\r\n      case \"display\":\r\n        break;\r\n      case \"print\":\r\n        renderingIntent = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.PRINT;\r\n        break;\r\n      default:\r\n        (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`getRenderingIntent - invalid intent: ${intent}`);\r\n    }\r\n    switch (annotationMode) {\r\n      case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationMode.DISABLE:\r\n        renderingIntent += _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.ANNOTATIONS_DISABLE;\r\n        break;\r\n      case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationMode.ENABLE:\r\n        break;\r\n      case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationMode.ENABLE_FORMS:\r\n        renderingIntent += _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.ANNOTATIONS_FORMS;\r\n        break;\r\n      case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationMode.ENABLE_STORAGE:\r\n        renderingIntent += _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.ANNOTATIONS_STORAGE;\r\n        const annotationStorage = renderingIntent & _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.PRINT && printAnnotationStorage instanceof _annotation_storage_js__WEBPACK_IMPORTED_MODULE_1__.PrintAnnotationStorage ? printAnnotationStorage : this.annotationStorage;\r\n        annotationStorageSerializable = annotationStorage.serializable;\r\n        break;\r\n      default:\r\n        (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);\r\n    }\r\n    if (isOpList) {\r\n      renderingIntent += _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.RenderingIntentFlag.OPLIST;\r\n    }\r\n    return {\r\n      renderingIntent,\r\n      cacheKey: `${renderingIntent}_${annotationStorageSerializable.hash}`,\r\n      annotationStorageSerializable\r\n    };\r\n  }\r\n  destroy() {\r\n    if (this.destroyCapability) {\r\n      return this.destroyCapability.promise;\r\n    }\r\n    this.destroyed = true;\r\n    this.destroyCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n    this.#passwordCapability?.reject(new Error(\"Worker was destroyed during onPassword callback\"));\r\n    const waitOn = [];\r\n    for (const page of this.#pageCache.values()) {\r\n      waitOn.push(page._destroy());\r\n    }\r\n    this.#pageCache.clear();\r\n    this.#pagePromises.clear();\r\n    if (this.hasOwnProperty(\"annotationStorage\")) {\r\n      this.annotationStorage.resetModified();\r\n    }\r\n    const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\r\n    waitOn.push(terminated);\r\n    Promise.all(waitOn).then(() => {\r\n      this.commonObjs.clear();\r\n      this.fontLoader.clear();\r\n      this.#methodPromises.clear();\r\n      this.filterFactory.destroy();\r\n      this._networkStream?.cancelAllRequests(new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(\"Worker was terminated.\"));\r\n      if (this.messageHandler) {\r\n        this.messageHandler.destroy();\r\n        this.messageHandler = null;\r\n      }\r\n      this.destroyCapability.resolve();\r\n    }, this.destroyCapability.reject);\r\n    return this.destroyCapability.promise;\r\n  }\r\n  setupMessageHandler() {\r\n    const {\r\n      messageHandler,\r\n      loadingTask\r\n    } = this;\r\n    messageHandler.on(\"GetReader\", (data, sink) => {\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this._networkStream, \"GetReader - no `IPDFStream` instance available.\");\r\n      this._fullReader = this._networkStream.getFullReader();\r\n      this._fullReader.onProgress = evt => {\r\n        this._lastProgress = {\r\n          loaded: evt.loaded,\r\n          total: evt.total\r\n        };\r\n      };\r\n      sink.onPull = () => {\r\n        this._fullReader.read().then(function ({\r\n          value,\r\n          done\r\n        }) {\r\n          if (done) {\r\n            sink.close();\r\n            return;\r\n          }\r\n          (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(value instanceof ArrayBuffer, \"GetReader - expected an ArrayBuffer.\");\r\n          sink.enqueue(new Uint8Array(value), 1, [value]);\r\n        }).catch(reason => {\r\n          sink.error(reason);\r\n        });\r\n      };\r\n      sink.onCancel = reason => {\r\n        this._fullReader.cancel(reason);\r\n        sink.ready.catch(readyReason => {\r\n          if (this.destroyed) {\r\n            return;\r\n          }\r\n          throw readyReason;\r\n        });\r\n      };\r\n    });\r\n    messageHandler.on(\"ReaderHeadersReady\", data => {\r\n      const headersCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n      const fullReader = this._fullReader;\r\n      fullReader.headersReady.then(() => {\r\n        if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\r\n          if (this._lastProgress) {\r\n            loadingTask.onProgress?.(this._lastProgress);\r\n          }\r\n          fullReader.onProgress = evt => {\r\n            loadingTask.onProgress?.({\r\n              loaded: evt.loaded,\r\n              total: evt.total\r\n            });\r\n          };\r\n        }\r\n        headersCapability.resolve({\r\n          isStreamingSupported: fullReader.isStreamingSupported,\r\n          isRangeSupported: fullReader.isRangeSupported,\r\n          contentLength: fullReader.contentLength\r\n        });\r\n      }, headersCapability.reject);\r\n      return headersCapability.promise;\r\n    });\r\n    messageHandler.on(\"GetRangeReader\", (data, sink) => {\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this._networkStream, \"GetRangeReader - no `IPDFStream` instance available.\");\r\n      const rangeReader = this._networkStream.getRangeReader(data.begin, data.end);\r\n      if (!rangeReader) {\r\n        sink.close();\r\n        return;\r\n      }\r\n      sink.onPull = () => {\r\n        rangeReader.read().then(function ({\r\n          value,\r\n          done\r\n        }) {\r\n          if (done) {\r\n            sink.close();\r\n            return;\r\n          }\r\n          (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(value instanceof ArrayBuffer, \"GetRangeReader - expected an ArrayBuffer.\");\r\n          sink.enqueue(new Uint8Array(value), 1, [value]);\r\n        }).catch(reason => {\r\n          sink.error(reason);\r\n        });\r\n      };\r\n      sink.onCancel = reason => {\r\n        rangeReader.cancel(reason);\r\n        sink.ready.catch(readyReason => {\r\n          if (this.destroyed) {\r\n            return;\r\n          }\r\n          throw readyReason;\r\n        });\r\n      };\r\n    });\r\n    messageHandler.on(\"GetDoc\", ({\r\n      pdfInfo\r\n    }) => {\r\n      this._numPages = pdfInfo.numPages;\r\n      this._htmlForXfa = pdfInfo.htmlForXfa;\r\n      delete pdfInfo.htmlForXfa;\r\n      loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\r\n    });\r\n    messageHandler.on(\"DocException\", function (ex) {\r\n      let reason;\r\n      switch (ex.name) {\r\n        case \"PasswordException\":\r\n          reason = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PasswordException(ex.message, ex.code);\r\n          break;\r\n        case \"InvalidPDFException\":\r\n          reason = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.InvalidPDFException(ex.message);\r\n          break;\r\n        case \"MissingPDFException\":\r\n          reason = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException(ex.message);\r\n          break;\r\n        case \"UnexpectedResponseException\":\r\n          reason = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.UnexpectedResponseException(ex.message, ex.status);\r\n          break;\r\n        case \"UnknownErrorException\":\r\n          reason = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.UnknownErrorException(ex.message, ex.details);\r\n          break;\r\n        default:\r\n          (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"DocException - expected a valid Error.\");\r\n      }\r\n      loadingTask._capability.reject(reason);\r\n    });\r\n    messageHandler.on(\"PasswordRequest\", exception => {\r\n      this.#passwordCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n      if (loadingTask.onPassword) {\r\n        const updatePassword = password => {\r\n          if (password instanceof Error) {\r\n            this.#passwordCapability.reject(password);\r\n          } else {\r\n            this.#passwordCapability.resolve({\r\n              password\r\n            });\r\n          }\r\n        };\r\n        try {\r\n          loadingTask.onPassword(updatePassword, exception.code);\r\n        } catch (ex) {\r\n          this.#passwordCapability.reject(ex);\r\n        }\r\n      } else {\r\n        this.#passwordCapability.reject(new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PasswordException(exception.message, exception.code));\r\n      }\r\n      return this.#passwordCapability.promise;\r\n    });\r\n    messageHandler.on(\"DataLoaded\", data => {\r\n      loadingTask.onProgress?.({\r\n        loaded: data.length,\r\n        total: data.length\r\n      });\r\n      this.downloadInfoCapability.resolve(data);\r\n    });\r\n    messageHandler.on(\"StartRenderPage\", data => {\r\n      if (this.destroyed) {\r\n        return;\r\n      }\r\n      const page = this.#pageCache.get(data.pageIndex);\r\n      page._startRenderPage(data.transparency, data.cacheKey);\r\n    });\r\n    messageHandler.on(\"commonobj\", ([id, type, exportedData]) => {\r\n      if (this.destroyed) {\r\n        return null;\r\n      }\r\n      if (this.commonObjs.has(id)) {\r\n        return null;\r\n      }\r\n      switch (type) {\r\n        case \"Font\":\r\n          const params = this._params;\r\n          if (\"error\" in exportedData) {\r\n            const exportedError = exportedData.error;\r\n            (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Error during font loading: ${exportedError}`);\r\n            this.commonObjs.resolve(id, exportedError);\r\n            break;\r\n          }\r\n          const inspectFont = params.pdfBug && globalThis.FontInspector?.enabled ? (font, url) => globalThis.FontInspector.fontAdded(font, url) : null;\r\n          const font = new _font_loader_js__WEBPACK_IMPORTED_MODULE_3__.FontFaceObject(exportedData, {\r\n            isEvalSupported: params.isEvalSupported,\r\n            disableFontFace: params.disableFontFace,\r\n            ignoreErrors: params.ignoreErrors,\r\n            inspectFont\r\n          });\r\n          this.fontLoader.bind(font).catch(reason => {\r\n            return messageHandler.sendWithPromise(\"FontFallback\", {\r\n              id\r\n            });\r\n          }).finally(() => {\r\n            if (!params.fontExtraProperties && font.data) {\r\n              font.data = null;\r\n            }\r\n            this.commonObjs.resolve(id, font);\r\n          });\r\n          break;\r\n        case \"CopyLocalImage\":\r\n          const {\r\n            imageRef\r\n          } = exportedData;\r\n          (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(imageRef, \"The imageRef must be defined.\");\r\n          for (const pageProxy of this.#pageCache.values()) {\r\n            for (const [, data] of pageProxy.objs) {\r\n              if (data.ref !== imageRef) {\r\n                continue;\r\n              }\r\n              if (!data.dataLen) {\r\n                return null;\r\n              }\r\n              this.commonObjs.resolve(id, structuredClone(data));\r\n              return data.dataLen;\r\n            }\r\n          }\r\n          break;\r\n        case \"FontPath\":\r\n        case \"Image\":\r\n        case \"Pattern\":\r\n          this.commonObjs.resolve(id, exportedData);\r\n          break;\r\n        default:\r\n          throw new Error(`Got unknown common object type ${type}`);\r\n      }\r\n      return null;\r\n    });\r\n    messageHandler.on(\"obj\", ([id, pageIndex, type, imageData]) => {\r\n      if (this.destroyed) {\r\n        return;\r\n      }\r\n      const pageProxy = this.#pageCache.get(pageIndex);\r\n      if (pageProxy.objs.has(id)) {\r\n        return;\r\n      }\r\n      if (pageProxy._intentStates.size === 0) {\r\n        imageData?.bitmap?.close();\r\n        return;\r\n      }\r\n      switch (type) {\r\n        case \"Image\":\r\n          pageProxy.objs.resolve(id, imageData);\r\n          if (imageData?.dataLen > _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MAX_IMAGE_SIZE_TO_CACHE) {\r\n            pageProxy._maybeCleanupAfterRender = true;\r\n          }\r\n          break;\r\n        case \"Pattern\":\r\n          pageProxy.objs.resolve(id, imageData);\r\n          break;\r\n        default:\r\n          throw new Error(`Got unknown object type ${type}`);\r\n      }\r\n    });\r\n    messageHandler.on(\"DocProgress\", data => {\r\n      if (this.destroyed) {\r\n        return;\r\n      }\r\n      loadingTask.onProgress?.({\r\n        loaded: data.loaded,\r\n        total: data.total\r\n      });\r\n    });\r\n    messageHandler.on(\"FetchBuiltInCMap\", data => {\r\n      if (this.destroyed) {\r\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\r\n      }\r\n      if (!this.cMapReaderFactory) {\r\n        return Promise.reject(new Error(\"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"));\r\n      }\r\n      return this.cMapReaderFactory.fetch(data);\r\n    });\r\n    messageHandler.on(\"FetchStandardFontData\", data => {\r\n      if (this.destroyed) {\r\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\r\n      }\r\n      if (!this.standardFontDataFactory) {\r\n        return Promise.reject(new Error(\"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"));\r\n      }\r\n      return this.standardFontDataFactory.fetch(data);\r\n    });\r\n  }\r\n  getData() {\r\n    return this.messageHandler.sendWithPromise(\"GetData\", null);\r\n  }\r\n  saveDocument() {\r\n    if (this.annotationStorage.size <= 0) {\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(\"saveDocument called while `annotationStorage` is empty, \" + \"please use the getData-method instead.\");\r\n    }\r\n    const {\r\n      map,\r\n      transfer\r\n    } = this.annotationStorage.serializable;\r\n    return this.messageHandler.sendWithPromise(\"SaveDocument\", {\r\n      isPureXfa: !!this._htmlForXfa,\r\n      numPages: this._numPages,\r\n      annotationStorage: map,\r\n      filename: this._fullReader?.filename ?? null\r\n    }, transfer).finally(() => {\r\n      this.annotationStorage.resetModified();\r\n    });\r\n  }\r\n  getPage(pageNumber) {\r\n    if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {\r\n      return Promise.reject(new Error(\"Invalid page request.\"));\r\n    }\r\n    const pageIndex = pageNumber - 1,\r\n      cachedPromise = this.#pagePromises.get(pageIndex);\r\n    if (cachedPromise) {\r\n      return cachedPromise;\r\n    }\r\n    const promise = this.messageHandler.sendWithPromise(\"GetPage\", {\r\n      pageIndex\r\n    }).then(pageInfo => {\r\n      if (this.destroyed) {\r\n        throw new Error(\"Transport destroyed\");\r\n      }\r\n      const page = new PDFPageProxy(pageIndex, pageInfo, this, this._params.pdfBug);\r\n      this.#pageCache.set(pageIndex, page);\r\n      return page;\r\n    });\r\n    this.#pagePromises.set(pageIndex, promise);\r\n    return promise;\r\n  }\r\n  getPageIndex(ref) {\r\n    if (typeof ref !== \"object\" || ref === null || !Number.isInteger(ref.num) || ref.num < 0 || !Number.isInteger(ref.gen) || ref.gen < 0) {\r\n      return Promise.reject(new Error(\"Invalid pageIndex request.\"));\r\n    }\r\n    return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\r\n      num: ref.num,\r\n      gen: ref.gen\r\n    });\r\n  }\r\n  getAnnotations(pageIndex, intent) {\r\n    return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\r\n      pageIndex,\r\n      intent\r\n    });\r\n  }\r\n  getFieldObjects() {\r\n    return this.#cacheSimpleMethod(\"GetFieldObjects\");\r\n  }\r\n  hasJSActions() {\r\n    return this.#cacheSimpleMethod(\"HasJSActions\");\r\n  }\r\n  getCalculationOrderIds() {\r\n    return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\r\n  }\r\n  getDestinations() {\r\n    return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\r\n  }\r\n  getDestination(id) {\r\n    if (typeof id !== \"string\") {\r\n      return Promise.reject(new Error(\"Invalid destination request.\"));\r\n    }\r\n    return this.messageHandler.sendWithPromise(\"GetDestination\", {\r\n      id\r\n    });\r\n  }\r\n  getPageLabels() {\r\n    return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\r\n  }\r\n  getPageLayout() {\r\n    return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\r\n  }\r\n  getPageMode() {\r\n    return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\r\n  }\r\n  getViewerPreferences() {\r\n    return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\r\n  }\r\n  getOpenAction() {\r\n    return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\r\n  }\r\n  getAttachments() {\r\n    return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\r\n  }\r\n  getDocJSActions() {\r\n    return this.#cacheSimpleMethod(\"GetDocJSActions\");\r\n  }\r\n  getPageJSActions(pageIndex) {\r\n    return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\r\n      pageIndex\r\n    });\r\n  }\r\n  getStructTree(pageIndex) {\r\n    return this.messageHandler.sendWithPromise(\"GetStructTree\", {\r\n      pageIndex\r\n    });\r\n  }\r\n  getOutline() {\r\n    return this.messageHandler.sendWithPromise(\"GetOutline\", null);\r\n  }\r\n  getOptionalContentConfig() {\r\n    return this.messageHandler.sendWithPromise(\"GetOptionalContentConfig\", null).then(results => {\r\n      return new _optional_content_config_js__WEBPACK_IMPORTED_MODULE_9__.OptionalContentConfig(results);\r\n    });\r\n  }\r\n  getPermissions() {\r\n    return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\r\n  }\r\n  getMetadata() {\r\n    const name = \"GetMetadata\",\r\n      cachedPromise = this.#methodPromises.get(name);\r\n    if (cachedPromise) {\r\n      return cachedPromise;\r\n    }\r\n    const promise = this.messageHandler.sendWithPromise(name, null).then(results => {\r\n      return {\r\n        info: results[0],\r\n        metadata: results[1] ? new _metadata_js__WEBPACK_IMPORTED_MODULE_8__.Metadata(results[1]) : null,\r\n        contentDispositionFilename: this._fullReader?.filename ?? null,\r\n        contentLength: this._fullReader?.contentLength ?? null\r\n      };\r\n    });\r\n    this.#methodPromises.set(name, promise);\r\n    return promise;\r\n  }\r\n  getMarkInfo() {\r\n    return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\r\n  }\r\n  async startCleanup(keepLoadedFonts = false) {\r\n    if (this.destroyed) {\r\n      return;\r\n    }\r\n    await this.messageHandler.sendWithPromise(\"Cleanup\", null);\r\n    for (const page of this.#pageCache.values()) {\r\n      const cleanupSuccessful = page.cleanup();\r\n      if (!cleanupSuccessful) {\r\n        throw new Error(`startCleanup: Page ${page.pageNumber} is currently rendering.`);\r\n      }\r\n    }\r\n    this.commonObjs.clear();\r\n    if (!keepLoadedFonts) {\r\n      this.fontLoader.clear();\r\n    }\r\n    this.#methodPromises.clear();\r\n    this.filterFactory.destroy(true);\r\n  }\r\n  get loadingParams() {\r\n    const {\r\n      disableAutoFetch,\r\n      enableXfa\r\n    } = this._params;\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"loadingParams\", {\r\n      disableAutoFetch,\r\n      enableXfa\r\n    });\r\n  }\r\n}\r\nclass PDFObjects {\r\n  #objs = Object.create(null);\r\n  #ensureObj(objId) {\r\n    return this.#objs[objId] ||= {\r\n      capability: new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability(),\r\n      data: null\r\n    };\r\n  }\r\n  get(objId, callback = null) {\r\n    if (callback) {\r\n      const obj = this.#ensureObj(objId);\r\n      obj.capability.promise.then(() => callback(obj.data));\r\n      return null;\r\n    }\r\n    const obj = this.#objs[objId];\r\n    if (!obj?.capability.settled) {\r\n      throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\r\n    }\r\n    return obj.data;\r\n  }\r\n  has(objId) {\r\n    const obj = this.#objs[objId];\r\n    return obj?.capability.settled ?? false;\r\n  }\r\n  resolve(objId, data = null) {\r\n    const obj = this.#ensureObj(objId);\r\n    obj.data = data;\r\n    obj.capability.resolve();\r\n  }\r\n  clear() {\r\n    for (const objId in this.#objs) {\r\n      const {\r\n        data\r\n      } = this.#objs[objId];\r\n      data?.bitmap?.close();\r\n    }\r\n    this.#objs = Object.create(null);\r\n  }\r\n  *[Symbol.iterator]() {\r\n    for (const objId in this.#objs) {\r\n      const {\r\n        capability,\r\n        data\r\n      } = this.#objs[objId];\r\n      if (!capability.settled) {\r\n        continue;\r\n      }\r\n      yield [objId, data];\r\n    }\r\n  }\r\n}\r\nclass RenderTask {\r\n  #internalRenderTask = null;\r\n  constructor(internalRenderTask) {\r\n    this.#internalRenderTask = internalRenderTask;\r\n    this.onContinue = null;\r\n  }\r\n  get promise() {\r\n    return this.#internalRenderTask.capability.promise;\r\n  }\r\n  cancel(extraDelay = 0) {\r\n    this.#internalRenderTask.cancel(null, extraDelay);\r\n  }\r\n  get separateAnnots() {\r\n    const {\r\n      separateAnnots\r\n    } = this.#internalRenderTask.operatorList;\r\n    if (!separateAnnots) {\r\n      return false;\r\n    }\r\n    const {\r\n      annotationCanvasMap\r\n    } = this.#internalRenderTask;\r\n    return separateAnnots.form || separateAnnots.canvas && annotationCanvasMap?.size > 0;\r\n  }\r\n}\r\nclass InternalRenderTask {\r\n  static #canvasInUse = new WeakSet();\r\n  constructor({\r\n    callback,\r\n    params,\r\n    objs,\r\n    commonObjs,\r\n    annotationCanvasMap,\r\n    operatorList,\r\n    pageIndex,\r\n    canvasFactory,\r\n    filterFactory,\r\n    useRequestAnimationFrame = false,\r\n    pdfBug = false,\r\n    pageColors = null\r\n  }) {\r\n    this.callback = callback;\r\n    this.params = params;\r\n    this.objs = objs;\r\n    this.commonObjs = commonObjs;\r\n    this.annotationCanvasMap = annotationCanvasMap;\r\n    this.operatorListIdx = null;\r\n    this.operatorList = operatorList;\r\n    this._pageIndex = pageIndex;\r\n    this.canvasFactory = canvasFactory;\r\n    this.filterFactory = filterFactory;\r\n    this._pdfBug = pdfBug;\r\n    this.pageColors = pageColors;\r\n    this.running = false;\r\n    this.graphicsReadyCallback = null;\r\n    this.graphicsReady = false;\r\n    this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== \"undefined\";\r\n    this.cancelled = false;\r\n    this.capability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n    this.task = new RenderTask(this);\r\n    this._cancelBound = this.cancel.bind(this);\r\n    this._continueBound = this._continue.bind(this);\r\n    this._scheduleNextBound = this._scheduleNext.bind(this);\r\n    this._nextBound = this._next.bind(this);\r\n    this._canvas = params.canvasContext.canvas;\r\n  }\r\n  get completed() {\r\n    return this.capability.promise.catch(function () {});\r\n  }\r\n  initializeGraphics({\r\n    transparency = false,\r\n    optionalContentConfig\r\n  }) {\r\n    if (this.cancelled) {\r\n      return;\r\n    }\r\n    if (this._canvas) {\r\n      if (InternalRenderTask.#canvasInUse.has(this._canvas)) {\r\n        throw new Error(\"Cannot use the same canvas during multiple render() operations. \" + \"Use different canvas or ensure previous operations were \" + \"cancelled or completed.\");\r\n      }\r\n      InternalRenderTask.#canvasInUse.add(this._canvas);\r\n    }\r\n    if (this._pdfBug && globalThis.StepperManager?.enabled) {\r\n      this.stepper = globalThis.StepperManager.create(this._pageIndex);\r\n      this.stepper.init(this.operatorList);\r\n      this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\r\n    }\r\n    const {\r\n      canvasContext,\r\n      viewport,\r\n      transform,\r\n      background\r\n    } = this.params;\r\n    this.gfx = new _canvas_js__WEBPACK_IMPORTED_MODULE_5__.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {\r\n      optionalContentConfig\r\n    }, this.annotationCanvasMap, this.pageColors);\r\n    this.gfx.beginDrawing({\r\n      transform,\r\n      viewport,\r\n      transparency,\r\n      background\r\n    });\r\n    this.operatorListIdx = 0;\r\n    this.graphicsReady = true;\r\n    this.graphicsReadyCallback?.();\r\n  }\r\n  cancel(error = null, extraDelay = 0) {\r\n    this.running = false;\r\n    this.cancelled = true;\r\n    this.gfx?.endDrawing();\r\n    InternalRenderTask.#canvasInUse.delete(this._canvas);\r\n    this.callback(error || new _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, extraDelay));\r\n  }\r\n  operatorListChanged() {\r\n    if (!this.graphicsReady) {\r\n      this.graphicsReadyCallback ||= this._continueBound;\r\n      return;\r\n    }\r\n    this.stepper?.updateOperatorList(this.operatorList);\r\n    if (this.running) {\r\n      return;\r\n    }\r\n    this._continue();\r\n  }\r\n  _continue() {\r\n    this.running = true;\r\n    if (this.cancelled) {\r\n      return;\r\n    }\r\n    if (this.task.onContinue) {\r\n      this.task.onContinue(this._scheduleNextBound);\r\n    } else {\r\n      this._scheduleNext();\r\n    }\r\n  }\r\n  _scheduleNext() {\r\n    if (this._useRequestAnimationFrame) {\r\n      window.requestAnimationFrame(() => {\r\n        this._nextBound().catch(this._cancelBound);\r\n      });\r\n    } else {\r\n      Promise.resolve().then(this._nextBound).catch(this._cancelBound);\r\n    }\r\n  }\r\n  async _next() {\r\n    if (this.cancelled) {\r\n      return;\r\n    }\r\n    this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);\r\n    if (this.operatorListIdx === this.operatorList.argsArray.length) {\r\n      this.running = false;\r\n      if (this.operatorList.lastChunk) {\r\n        this.gfx.endDrawing();\r\n        InternalRenderTask.#canvasInUse.delete(this._canvas);\r\n        this.callback();\r\n      }\r\n    }\r\n  }\r\n}\r\nconst version = '4.0.379';\r\nconst build = '9e14d04fd';\r\n\r\n__webpack_async_result__();\r\n} catch(e) { __webpack_async_result__(e); } });\r\n\r\n/***/ }),\r\n\r\n/***/ 822:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_155128__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_155128__.d(__nested_webpack_exports__, {\r\n/* harmony export */   BaseCMapReaderFactory: () => (/* binding */ BaseCMapReaderFactory),\r\n/* harmony export */   BaseCanvasFactory: () => (/* binding */ BaseCanvasFactory),\r\n/* harmony export */   BaseFilterFactory: () => (/* binding */ BaseFilterFactory),\r\n/* harmony export */   BaseSVGFactory: () => (/* binding */ BaseSVGFactory),\r\n/* harmony export */   BaseStandardFontDataFactory: () => (/* binding */ BaseStandardFontDataFactory)\r\n/* harmony export */ });\r\n/* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_155128__(266);\r\n\r\nclass BaseFilterFactory {\r\n  constructor() {\r\n    if (this.constructor === BaseFilterFactory) {\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Cannot initialize BaseFilterFactory.\");\r\n    }\r\n  }\r\n  addFilter(maps) {\r\n    return \"none\";\r\n  }\r\n  addHCMFilter(fgColor, bgColor) {\r\n    return \"none\";\r\n  }\r\n  addHighlightHCMFilter(fgColor, bgColor, newFgColor, newBgColor) {\r\n    return \"none\";\r\n  }\r\n  destroy(keepHCM = false) {}\r\n}\r\nclass BaseCanvasFactory {\r\n  constructor() {\r\n    if (this.constructor === BaseCanvasFactory) {\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Cannot initialize BaseCanvasFactory.\");\r\n    }\r\n  }\r\n  create(width, height) {\r\n    if (width <= 0 || height <= 0) {\r\n      throw new Error(\"Invalid canvas size\");\r\n    }\r\n    const canvas = this._createCanvas(width, height);\r\n    return {\r\n      canvas,\r\n      context: canvas.getContext(\"2d\")\r\n    };\r\n  }\r\n  reset(canvasAndContext, width, height) {\r\n    if (!canvasAndContext.canvas) {\r\n      throw new Error(\"Canvas is not specified\");\r\n    }\r\n    if (width <= 0 || height <= 0) {\r\n      throw new Error(\"Invalid canvas size\");\r\n    }\r\n    canvasAndContext.canvas.width = width;\r\n    canvasAndContext.canvas.height = height;\r\n  }\r\n  destroy(canvasAndContext) {\r\n    if (!canvasAndContext.canvas) {\r\n      throw new Error(\"Canvas is not specified\");\r\n    }\r\n    canvasAndContext.canvas.width = 0;\r\n    canvasAndContext.canvas.height = 0;\r\n    canvasAndContext.canvas = null;\r\n    canvasAndContext.context = null;\r\n  }\r\n  _createCanvas(width, height) {\r\n    (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Abstract method `_createCanvas` called.\");\r\n  }\r\n}\r\nclass BaseCMapReaderFactory {\r\n  constructor({\r\n    baseUrl = null,\r\n    isCompressed = true\r\n  }) {\r\n    if (this.constructor === BaseCMapReaderFactory) {\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Cannot initialize BaseCMapReaderFactory.\");\r\n    }\r\n    this.baseUrl = baseUrl;\r\n    this.isCompressed = isCompressed;\r\n  }\r\n  async fetch({\r\n    name\r\n  }) {\r\n    if (!this.baseUrl) {\r\n      throw new Error('The CMap \"baseUrl\" parameter must be specified, ensure that ' + 'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.');\r\n    }\r\n    if (!name) {\r\n      throw new Error(\"CMap name must be specified.\");\r\n    }\r\n    const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\r\n    const compressionType = this.isCompressed ? _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.CMapCompressionType.BINARY : _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.CMapCompressionType.NONE;\r\n    return this._fetchData(url, compressionType).catch(reason => {\r\n      throw new Error(`Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`);\r\n    });\r\n  }\r\n  _fetchData(url, compressionType) {\r\n    (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Abstract method `_fetchData` called.\");\r\n  }\r\n}\r\nclass BaseStandardFontDataFactory {\r\n  constructor({\r\n    baseUrl = null\r\n  }) {\r\n    if (this.constructor === BaseStandardFontDataFactory) {\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Cannot initialize BaseStandardFontDataFactory.\");\r\n    }\r\n    this.baseUrl = baseUrl;\r\n  }\r\n  async fetch({\r\n    filename\r\n  }) {\r\n    if (!this.baseUrl) {\r\n      throw new Error('The standard font \"baseUrl\" parameter must be specified, ensure that ' + 'the \"standardFontDataUrl\" API parameter is provided.');\r\n    }\r\n    if (!filename) {\r\n      throw new Error(\"Font filename must be specified.\");\r\n    }\r\n    const url = `${this.baseUrl}${filename}`;\r\n    return this._fetchData(url).catch(reason => {\r\n      throw new Error(`Unable to load font data at: ${url}`);\r\n    });\r\n  }\r\n  _fetchData(url) {\r\n    (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Abstract method `_fetchData` called.\");\r\n  }\r\n}\r\nclass BaseSVGFactory {\r\n  constructor() {\r\n    if (this.constructor === BaseSVGFactory) {\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Cannot initialize BaseSVGFactory.\");\r\n    }\r\n  }\r\n  create(width, height, skipDimensions = false) {\r\n    if (width <= 0 || height <= 0) {\r\n      throw new Error(\"Invalid SVG dimensions\");\r\n    }\r\n    const svg = this._createSVG(\"svg:svg\");\r\n    svg.setAttribute(\"version\", \"1.1\");\r\n    if (!skipDimensions) {\r\n      svg.setAttribute(\"width\", `${width}px`);\r\n      svg.setAttribute(\"height\", `${height}px`);\r\n    }\r\n    svg.setAttribute(\"preserveAspectRatio\", \"none\");\r\n    svg.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\r\n    return svg;\r\n  }\r\n  createElement(type) {\r\n    if (typeof type !== \"string\") {\r\n      throw new Error(\"Invalid SVG element type\");\r\n    }\r\n    return this._createSVG(type);\r\n  }\r\n  _createSVG(type) {\r\n    (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Abstract method `_createSVG` called.\");\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 250:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_160767__) => {\r\n\r\n\r\n// EXPORTS\r\n__nested_webpack_require_160767__.d(__nested_webpack_exports__, {\r\n  CanvasGraphics: () => (/* binding */ CanvasGraphics)\r\n});\r\n\r\n// EXTERNAL MODULE: ./src/shared/util.js\r\nvar util = __nested_webpack_require_160767__(266);\r\n// EXTERNAL MODULE: ./src/display/display_utils.js\r\nvar display_utils = __nested_webpack_require_160767__(473);\r\n;// CONCATENATED MODULE: ./src/display/pattern_helper.js\r\n\r\n\r\nconst PathType = {\r\n  FILL: \"Fill\",\r\n  STROKE: \"Stroke\",\r\n  SHADING: \"Shading\"\r\n};\r\nfunction applyBoundingBox(ctx, bbox) {\r\n  if (!bbox) {\r\n    return;\r\n  }\r\n  const width = bbox[2] - bbox[0];\r\n  const height = bbox[3] - bbox[1];\r\n  const region = new Path2D();\r\n  region.rect(bbox[0], bbox[1], width, height);\r\n  ctx.clip(region);\r\n}\r\nclass BaseShadingPattern {\r\n  constructor() {\r\n    if (this.constructor === BaseShadingPattern) {\r\n      (0,util.unreachable)(\"Cannot initialize BaseShadingPattern.\");\r\n    }\r\n  }\r\n  getPattern() {\r\n    (0,util.unreachable)(\"Abstract method `getPattern` called.\");\r\n  }\r\n}\r\nclass RadialAxialShadingPattern extends BaseShadingPattern {\r\n  constructor(IR) {\r\n    super();\r\n    this._type = IR[1];\r\n    this._bbox = IR[2];\r\n    this._colorStops = IR[3];\r\n    this._p0 = IR[4];\r\n    this._p1 = IR[5];\r\n    this._r0 = IR[6];\r\n    this._r1 = IR[7];\r\n    this.matrix = null;\r\n  }\r\n  _createGradient(ctx) {\r\n    let grad;\r\n    if (this._type === \"axial\") {\r\n      grad = ctx.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]);\r\n    } else if (this._type === \"radial\") {\r\n      grad = ctx.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1);\r\n    }\r\n    for (const colorStop of this._colorStops) {\r\n      grad.addColorStop(colorStop[0], colorStop[1]);\r\n    }\r\n    return grad;\r\n  }\r\n  getPattern(ctx, owner, inverse, pathType) {\r\n    let pattern;\r\n    if (pathType === PathType.STROKE || pathType === PathType.FILL) {\r\n      const ownerBBox = owner.current.getClippedPathBoundingBox(pathType, (0,display_utils.getCurrentTransform)(ctx)) || [0, 0, 0, 0];\r\n      const width = Math.ceil(ownerBBox[2] - ownerBBox[0]) || 1;\r\n      const height = Math.ceil(ownerBBox[3] - ownerBBox[1]) || 1;\r\n      const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", width, height, true);\r\n      const tmpCtx = tmpCanvas.context;\r\n      tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\r\n      tmpCtx.beginPath();\r\n      tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\r\n      tmpCtx.translate(-ownerBBox[0], -ownerBBox[1]);\r\n      inverse = util.Util.transform(inverse, [1, 0, 0, 1, ownerBBox[0], ownerBBox[1]]);\r\n      tmpCtx.transform(...owner.baseTransform);\r\n      if (this.matrix) {\r\n        tmpCtx.transform(...this.matrix);\r\n      }\r\n      applyBoundingBox(tmpCtx, this._bbox);\r\n      tmpCtx.fillStyle = this._createGradient(tmpCtx);\r\n      tmpCtx.fill();\r\n      pattern = ctx.createPattern(tmpCanvas.canvas, \"no-repeat\");\r\n      const domMatrix = new DOMMatrix(inverse);\r\n      pattern.setTransform(domMatrix);\r\n    } else {\r\n      applyBoundingBox(ctx, this._bbox);\r\n      pattern = this._createGradient(ctx);\r\n    }\r\n    return pattern;\r\n  }\r\n}\r\nfunction drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\r\n  const coords = context.coords,\r\n    colors = context.colors;\r\n  const bytes = data.data,\r\n    rowSize = data.width * 4;\r\n  let tmp;\r\n  if (coords[p1 + 1] > coords[p2 + 1]) {\r\n    tmp = p1;\r\n    p1 = p2;\r\n    p2 = tmp;\r\n    tmp = c1;\r\n    c1 = c2;\r\n    c2 = tmp;\r\n  }\r\n  if (coords[p2 + 1] > coords[p3 + 1]) {\r\n    tmp = p2;\r\n    p2 = p3;\r\n    p3 = tmp;\r\n    tmp = c2;\r\n    c2 = c3;\r\n    c3 = tmp;\r\n  }\r\n  if (coords[p1 + 1] > coords[p2 + 1]) {\r\n    tmp = p1;\r\n    p1 = p2;\r\n    p2 = tmp;\r\n    tmp = c1;\r\n    c1 = c2;\r\n    c2 = tmp;\r\n  }\r\n  const x1 = (coords[p1] + context.offsetX) * context.scaleX;\r\n  const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\r\n  const x2 = (coords[p2] + context.offsetX) * context.scaleX;\r\n  const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\r\n  const x3 = (coords[p3] + context.offsetX) * context.scaleX;\r\n  const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\r\n  if (y1 >= y3) {\r\n    return;\r\n  }\r\n  const c1r = colors[c1],\r\n    c1g = colors[c1 + 1],\r\n    c1b = colors[c1 + 2];\r\n  const c2r = colors[c2],\r\n    c2g = colors[c2 + 1],\r\n    c2b = colors[c2 + 2];\r\n  const c3r = colors[c3],\r\n    c3g = colors[c3 + 1],\r\n    c3b = colors[c3 + 2];\r\n  const minY = Math.round(y1),\r\n    maxY = Math.round(y3);\r\n  let xa, car, cag, cab;\r\n  let xb, cbr, cbg, cbb;\r\n  for (let y = minY; y <= maxY; y++) {\r\n    if (y < y2) {\r\n      const k = y < y1 ? 0 : (y1 - y) / (y1 - y2);\r\n      xa = x1 - (x1 - x2) * k;\r\n      car = c1r - (c1r - c2r) * k;\r\n      cag = c1g - (c1g - c2g) * k;\r\n      cab = c1b - (c1b - c2b) * k;\r\n    } else {\r\n      let k;\r\n      if (y > y3) {\r\n        k = 1;\r\n      } else if (y2 === y3) {\r\n        k = 0;\r\n      } else {\r\n        k = (y2 - y) / (y2 - y3);\r\n      }\r\n      xa = x2 - (x2 - x3) * k;\r\n      car = c2r - (c2r - c3r) * k;\r\n      cag = c2g - (c2g - c3g) * k;\r\n      cab = c2b - (c2b - c3b) * k;\r\n    }\r\n    let k;\r\n    if (y < y1) {\r\n      k = 0;\r\n    } else if (y > y3) {\r\n      k = 1;\r\n    } else {\r\n      k = (y1 - y) / (y1 - y3);\r\n    }\r\n    xb = x1 - (x1 - x3) * k;\r\n    cbr = c1r - (c1r - c3r) * k;\r\n    cbg = c1g - (c1g - c3g) * k;\r\n    cbb = c1b - (c1b - c3b) * k;\r\n    const x1_ = Math.round(Math.min(xa, xb));\r\n    const x2_ = Math.round(Math.max(xa, xb));\r\n    let j = rowSize * y + x1_ * 4;\r\n    for (let x = x1_; x <= x2_; x++) {\r\n      k = (xa - x) / (xa - xb);\r\n      if (k < 0) {\r\n        k = 0;\r\n      } else if (k > 1) {\r\n        k = 1;\r\n      }\r\n      bytes[j++] = car - (car - cbr) * k | 0;\r\n      bytes[j++] = cag - (cag - cbg) * k | 0;\r\n      bytes[j++] = cab - (cab - cbb) * k | 0;\r\n      bytes[j++] = 255;\r\n    }\r\n  }\r\n}\r\nfunction drawFigure(data, figure, context) {\r\n  const ps = figure.coords;\r\n  const cs = figure.colors;\r\n  let i, ii;\r\n  switch (figure.type) {\r\n    case \"lattice\":\r\n      const verticesPerRow = figure.verticesPerRow;\r\n      const rows = Math.floor(ps.length / verticesPerRow) - 1;\r\n      const cols = verticesPerRow - 1;\r\n      for (i = 0; i < rows; i++) {\r\n        let q = i * verticesPerRow;\r\n        for (let j = 0; j < cols; j++, q++) {\r\n          drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);\r\n          drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);\r\n        }\r\n      }\r\n      break;\r\n    case \"triangles\":\r\n      for (i = 0, ii = ps.length; i < ii; i += 3) {\r\n        drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);\r\n      }\r\n      break;\r\n    default:\r\n      throw new Error(\"illegal figure\");\r\n  }\r\n}\r\nclass MeshShadingPattern extends BaseShadingPattern {\r\n  constructor(IR) {\r\n    super();\r\n    this._coords = IR[2];\r\n    this._colors = IR[3];\r\n    this._figures = IR[4];\r\n    this._bounds = IR[5];\r\n    this._bbox = IR[7];\r\n    this._background = IR[8];\r\n    this.matrix = null;\r\n  }\r\n  _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {\r\n    const EXPECTED_SCALE = 1.1;\r\n    const MAX_PATTERN_SIZE = 3000;\r\n    const BORDER_SIZE = 2;\r\n    const offsetX = Math.floor(this._bounds[0]);\r\n    const offsetY = Math.floor(this._bounds[1]);\r\n    const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;\r\n    const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;\r\n    const width = Math.min(Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\r\n    const height = Math.min(Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\r\n    const scaleX = boundsWidth / width;\r\n    const scaleY = boundsHeight / height;\r\n    const context = {\r\n      coords: this._coords,\r\n      colors: this._colors,\r\n      offsetX: -offsetX,\r\n      offsetY: -offsetY,\r\n      scaleX: 1 / scaleX,\r\n      scaleY: 1 / scaleY\r\n    };\r\n    const paddedWidth = width + BORDER_SIZE * 2;\r\n    const paddedHeight = height + BORDER_SIZE * 2;\r\n    const tmpCanvas = cachedCanvases.getCanvas(\"mesh\", paddedWidth, paddedHeight, false);\r\n    const tmpCtx = tmpCanvas.context;\r\n    const data = tmpCtx.createImageData(width, height);\r\n    if (backgroundColor) {\r\n      const bytes = data.data;\r\n      for (let i = 0, ii = bytes.length; i < ii; i += 4) {\r\n        bytes[i] = backgroundColor[0];\r\n        bytes[i + 1] = backgroundColor[1];\r\n        bytes[i + 2] = backgroundColor[2];\r\n        bytes[i + 3] = 255;\r\n      }\r\n    }\r\n    for (const figure of this._figures) {\r\n      drawFigure(data, figure, context);\r\n    }\r\n    tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\r\n    const canvas = tmpCanvas.canvas;\r\n    return {\r\n      canvas,\r\n      offsetX: offsetX - BORDER_SIZE * scaleX,\r\n      offsetY: offsetY - BORDER_SIZE * scaleY,\r\n      scaleX,\r\n      scaleY\r\n    };\r\n  }\r\n  getPattern(ctx, owner, inverse, pathType) {\r\n    applyBoundingBox(ctx, this._bbox);\r\n    let scale;\r\n    if (pathType === PathType.SHADING) {\r\n      scale = util.Util.singularValueDecompose2dScale((0,display_utils.getCurrentTransform)(ctx));\r\n    } else {\r\n      scale = util.Util.singularValueDecompose2dScale(owner.baseTransform);\r\n      if (this.matrix) {\r\n        const matrixScale = util.Util.singularValueDecompose2dScale(this.matrix);\r\n        scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\r\n      }\r\n    }\r\n    const temporaryPatternCanvas = this._createMeshCanvas(scale, pathType === PathType.SHADING ? null : this._background, owner.cachedCanvases);\r\n    if (pathType !== PathType.SHADING) {\r\n      ctx.setTransform(...owner.baseTransform);\r\n      if (this.matrix) {\r\n        ctx.transform(...this.matrix);\r\n      }\r\n    }\r\n    ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\r\n    ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\r\n    return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\r\n  }\r\n}\r\nclass DummyShadingPattern extends BaseShadingPattern {\r\n  getPattern() {\r\n    return \"hotpink\";\r\n  }\r\n}\r\nfunction getShadingPattern(IR) {\r\n  switch (IR[0]) {\r\n    case \"RadialAxial\":\r\n      return new RadialAxialShadingPattern(IR);\r\n    case \"Mesh\":\r\n      return new MeshShadingPattern(IR);\r\n    case \"Dummy\":\r\n      return new DummyShadingPattern();\r\n  }\r\n  throw new Error(`Unknown IR type: ${IR[0]}`);\r\n}\r\nconst PaintType = {\r\n  COLORED: 1,\r\n  UNCOLORED: 2\r\n};\r\nclass TilingPattern {\r\n  static MAX_PATTERN_SIZE = 3000;\r\n  constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\r\n    this.operatorList = IR[2];\r\n    this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\r\n    this.bbox = IR[4];\r\n    this.xstep = IR[5];\r\n    this.ystep = IR[6];\r\n    this.paintType = IR[7];\r\n    this.tilingType = IR[8];\r\n    this.color = color;\r\n    this.ctx = ctx;\r\n    this.canvasGraphicsFactory = canvasGraphicsFactory;\r\n    this.baseTransform = baseTransform;\r\n  }\r\n  createPatternCanvas(owner) {\r\n    const operatorList = this.operatorList;\r\n    const bbox = this.bbox;\r\n    const xstep = this.xstep;\r\n    const ystep = this.ystep;\r\n    const paintType = this.paintType;\r\n    const tilingType = this.tilingType;\r\n    const color = this.color;\r\n    const canvasGraphicsFactory = this.canvasGraphicsFactory;\r\n    (0,util.info)(\"TilingType: \" + tilingType);\r\n    const x0 = bbox[0],\r\n      y0 = bbox[1],\r\n      x1 = bbox[2],\r\n      y1 = bbox[3];\r\n    const matrixScale = util.Util.singularValueDecompose2dScale(this.matrix);\r\n    const curMatrixScale = util.Util.singularValueDecompose2dScale(this.baseTransform);\r\n    const combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];\r\n    const dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);\r\n    const dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);\r\n    const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", dimx.size, dimy.size, true);\r\n    const tmpCtx = tmpCanvas.context;\r\n    const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\r\n    graphics.groupLevel = owner.groupLevel;\r\n    this.setFillAndStrokeStyleToContext(graphics, paintType, color);\r\n    let adjustedX0 = x0;\r\n    let adjustedY0 = y0;\r\n    let adjustedX1 = x1;\r\n    let adjustedY1 = y1;\r\n    if (x0 < 0) {\r\n      adjustedX0 = 0;\r\n      adjustedX1 += Math.abs(x0);\r\n    }\r\n    if (y0 < 0) {\r\n      adjustedY0 = 0;\r\n      adjustedY1 += Math.abs(y0);\r\n    }\r\n    tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));\r\n    graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\r\n    tmpCtx.save();\r\n    this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);\r\n    graphics.baseTransform = (0,display_utils.getCurrentTransform)(graphics.ctx);\r\n    graphics.executeOperatorList(operatorList);\r\n    graphics.endDrawing();\r\n    return {\r\n      canvas: tmpCanvas.canvas,\r\n      scaleX: dimx.scale,\r\n      scaleY: dimy.scale,\r\n      offsetX: adjustedX0,\r\n      offsetY: adjustedY0\r\n    };\r\n  }\r\n  getSizeAndScale(step, realOutputSize, scale) {\r\n    step = Math.abs(step);\r\n    const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);\r\n    let size = Math.ceil(step * scale);\r\n    if (size >= maxSize) {\r\n      size = maxSize;\r\n    } else {\r\n      scale = size / step;\r\n    }\r\n    return {\r\n      scale,\r\n      size\r\n    };\r\n  }\r\n  clipBbox(graphics, x0, y0, x1, y1) {\r\n    const bboxWidth = x1 - x0;\r\n    const bboxHeight = y1 - y0;\r\n    graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\r\n    graphics.current.updateRectMinMax((0,display_utils.getCurrentTransform)(graphics.ctx), [x0, y0, x1, y1]);\r\n    graphics.clip();\r\n    graphics.endPath();\r\n  }\r\n  setFillAndStrokeStyleToContext(graphics, paintType, color) {\r\n    const context = graphics.ctx,\r\n      current = graphics.current;\r\n    switch (paintType) {\r\n      case PaintType.COLORED:\r\n        const ctx = this.ctx;\r\n        context.fillStyle = ctx.fillStyle;\r\n        context.strokeStyle = ctx.strokeStyle;\r\n        current.fillColor = ctx.fillStyle;\r\n        current.strokeColor = ctx.strokeStyle;\r\n        break;\r\n      case PaintType.UNCOLORED:\r\n        const cssColor = util.Util.makeHexColor(color[0], color[1], color[2]);\r\n        context.fillStyle = cssColor;\r\n        context.strokeStyle = cssColor;\r\n        current.fillColor = cssColor;\r\n        current.strokeColor = cssColor;\r\n        break;\r\n      default:\r\n        throw new util.FormatError(`Unsupported paint type: ${paintType}`);\r\n    }\r\n  }\r\n  getPattern(ctx, owner, inverse, pathType) {\r\n    let matrix = inverse;\r\n    if (pathType !== PathType.SHADING) {\r\n      matrix = util.Util.transform(matrix, owner.baseTransform);\r\n      if (this.matrix) {\r\n        matrix = util.Util.transform(matrix, this.matrix);\r\n      }\r\n    }\r\n    const temporaryPatternCanvas = this.createPatternCanvas(owner);\r\n    let domMatrix = new DOMMatrix(matrix);\r\n    domMatrix = domMatrix.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\r\n    domMatrix = domMatrix.scale(1 / temporaryPatternCanvas.scaleX, 1 / temporaryPatternCanvas.scaleY);\r\n    const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, \"repeat\");\r\n    pattern.setTransform(domMatrix);\r\n    return pattern;\r\n  }\r\n}\r\n\r\n;// CONCATENATED MODULE: ./src/shared/image_utils.js\r\n\r\nfunction convertToRGBA(params) {\r\n  switch (params.kind) {\r\n    case ImageKind.GRAYSCALE_1BPP:\r\n      return convertBlackAndWhiteToRGBA(params);\r\n    case ImageKind.RGB_24BPP:\r\n      return convertRGBToRGBA(params);\r\n  }\r\n  return null;\r\n}\r\nfunction convertBlackAndWhiteToRGBA({\r\n  src,\r\n  srcPos = 0,\r\n  dest,\r\n  width,\r\n  height,\r\n  nonBlackColor = 0xffffffff,\r\n  inverseDecode = false\r\n}) {\r\n  const black = util.FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\r\n  const [zeroMapping, oneMapping] = inverseDecode ? [nonBlackColor, black] : [black, nonBlackColor];\r\n  const widthInSource = width >> 3;\r\n  const widthRemainder = width & 7;\r\n  const srcLength = src.length;\r\n  dest = new Uint32Array(dest.buffer);\r\n  let destPos = 0;\r\n  for (let i = 0; i < height; i++) {\r\n    for (const max = srcPos + widthInSource; srcPos < max; srcPos++) {\r\n      const elem = srcPos < srcLength ? src[srcPos] : 255;\r\n      dest[destPos++] = elem & 0b10000000 ? oneMapping : zeroMapping;\r\n      dest[destPos++] = elem & 0b1000000 ? oneMapping : zeroMapping;\r\n      dest[destPos++] = elem & 0b100000 ? oneMapping : zeroMapping;\r\n      dest[destPos++] = elem & 0b10000 ? oneMapping : zeroMapping;\r\n      dest[destPos++] = elem & 0b1000 ? oneMapping : zeroMapping;\r\n      dest[destPos++] = elem & 0b100 ? oneMapping : zeroMapping;\r\n      dest[destPos++] = elem & 0b10 ? oneMapping : zeroMapping;\r\n      dest[destPos++] = elem & 0b1 ? oneMapping : zeroMapping;\r\n    }\r\n    if (widthRemainder === 0) {\r\n      continue;\r\n    }\r\n    const elem = srcPos < srcLength ? src[srcPos++] : 255;\r\n    for (let j = 0; j < widthRemainder; j++) {\r\n      dest[destPos++] = elem & 1 << 7 - j ? oneMapping : zeroMapping;\r\n    }\r\n  }\r\n  return {\r\n    srcPos,\r\n    destPos\r\n  };\r\n}\r\nfunction convertRGBToRGBA({\r\n  src,\r\n  srcPos = 0,\r\n  dest,\r\n  destPos = 0,\r\n  width,\r\n  height\r\n}) {\r\n  let i = 0;\r\n  const len32 = src.length >> 2;\r\n  const src32 = new Uint32Array(src.buffer, srcPos, len32);\r\n  if (FeatureTest.isLittleEndian) {\r\n    for (; i < len32 - 2; i += 3, destPos += 4) {\r\n      const s1 = src32[i];\r\n      const s2 = src32[i + 1];\r\n      const s3 = src32[i + 2];\r\n      dest[destPos] = s1 | 0xff000000;\r\n      dest[destPos + 1] = s1 >>> 24 | s2 << 8 | 0xff000000;\r\n      dest[destPos + 2] = s2 >>> 16 | s3 << 16 | 0xff000000;\r\n      dest[destPos + 3] = s3 >>> 8 | 0xff000000;\r\n    }\r\n    for (let j = i * 4, jj = src.length; j < jj; j += 3) {\r\n      dest[destPos++] = src[j] | src[j + 1] << 8 | src[j + 2] << 16 | 0xff000000;\r\n    }\r\n  } else {\r\n    for (; i < len32 - 2; i += 3, destPos += 4) {\r\n      const s1 = src32[i];\r\n      const s2 = src32[i + 1];\r\n      const s3 = src32[i + 2];\r\n      dest[destPos] = s1 | 0xff;\r\n      dest[destPos + 1] = s1 << 24 | s2 >>> 8 | 0xff;\r\n      dest[destPos + 2] = s2 << 16 | s3 >>> 16 | 0xff;\r\n      dest[destPos + 3] = s3 << 8 | 0xff;\r\n    }\r\n    for (let j = i * 4, jj = src.length; j < jj; j += 3) {\r\n      dest[destPos++] = src[j] << 24 | src[j + 1] << 16 | src[j + 2] << 8 | 0xff;\r\n    }\r\n  }\r\n  return {\r\n    srcPos,\r\n    destPos\r\n  };\r\n}\r\nfunction grayToRGBA(src, dest) {\r\n  if (FeatureTest.isLittleEndian) {\r\n    for (let i = 0, ii = src.length; i < ii; i++) {\r\n      dest[i] = src[i] * 0x10101 | 0xff000000;\r\n    }\r\n  } else {\r\n    for (let i = 0, ii = src.length; i < ii; i++) {\r\n      dest[i] = src[i] * 0x1010100 | 0x000000ff;\r\n    }\r\n  }\r\n}\r\n\r\n;// CONCATENATED MODULE: ./src/display/canvas.js\r\n\r\n\r\n\r\n\r\nconst MIN_FONT_SIZE = 16;\r\nconst MAX_FONT_SIZE = 100;\r\nconst MAX_GROUP_SIZE = 4096;\r\nconst EXECUTION_TIME = 15;\r\nconst EXECUTION_STEPS = 10;\r\nconst MAX_SIZE_TO_COMPILE = 1000;\r\nconst FULL_CHUNK_HEIGHT = 16;\r\nfunction mirrorContextOperations(ctx, destCtx) {\r\n  if (ctx._removeMirroring) {\r\n    throw new Error(\"Context is already forwarding operations.\");\r\n  }\r\n  ctx.__originalSave = ctx.save;\r\n  ctx.__originalRestore = ctx.restore;\r\n  ctx.__originalRotate = ctx.rotate;\r\n  ctx.__originalScale = ctx.scale;\r\n  ctx.__originalTranslate = ctx.translate;\r\n  ctx.__originalTransform = ctx.transform;\r\n  ctx.__originalSetTransform = ctx.setTransform;\r\n  ctx.__originalResetTransform = ctx.resetTransform;\r\n  ctx.__originalClip = ctx.clip;\r\n  ctx.__originalMoveTo = ctx.moveTo;\r\n  ctx.__originalLineTo = ctx.lineTo;\r\n  ctx.__originalBezierCurveTo = ctx.bezierCurveTo;\r\n  ctx.__originalRect = ctx.rect;\r\n  ctx.__originalClosePath = ctx.closePath;\r\n  ctx.__originalBeginPath = ctx.beginPath;\r\n  ctx._removeMirroring = () => {\r\n    ctx.save = ctx.__originalSave;\r\n    ctx.restore = ctx.__originalRestore;\r\n    ctx.rotate = ctx.__originalRotate;\r\n    ctx.scale = ctx.__originalScale;\r\n    ctx.translate = ctx.__originalTranslate;\r\n    ctx.transform = ctx.__originalTransform;\r\n    ctx.setTransform = ctx.__originalSetTransform;\r\n    ctx.resetTransform = ctx.__originalResetTransform;\r\n    ctx.clip = ctx.__originalClip;\r\n    ctx.moveTo = ctx.__originalMoveTo;\r\n    ctx.lineTo = ctx.__originalLineTo;\r\n    ctx.bezierCurveTo = ctx.__originalBezierCurveTo;\r\n    ctx.rect = ctx.__originalRect;\r\n    ctx.closePath = ctx.__originalClosePath;\r\n    ctx.beginPath = ctx.__originalBeginPath;\r\n    delete ctx._removeMirroring;\r\n  };\r\n  ctx.save = function ctxSave() {\r\n    destCtx.save();\r\n    this.__originalSave();\r\n  };\r\n  ctx.restore = function ctxRestore() {\r\n    destCtx.restore();\r\n    this.__originalRestore();\r\n  };\r\n  ctx.translate = function ctxTranslate(x, y) {\r\n    destCtx.translate(x, y);\r\n    this.__originalTranslate(x, y);\r\n  };\r\n  ctx.scale = function ctxScale(x, y) {\r\n    destCtx.scale(x, y);\r\n    this.__originalScale(x, y);\r\n  };\r\n  ctx.transform = function ctxTransform(a, b, c, d, e, f) {\r\n    destCtx.transform(a, b, c, d, e, f);\r\n    this.__originalTransform(a, b, c, d, e, f);\r\n  };\r\n  ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\r\n    destCtx.setTransform(a, b, c, d, e, f);\r\n    this.__originalSetTransform(a, b, c, d, e, f);\r\n  };\r\n  ctx.resetTransform = function ctxResetTransform() {\r\n    destCtx.resetTransform();\r\n    this.__originalResetTransform();\r\n  };\r\n  ctx.rotate = function ctxRotate(angle) {\r\n    destCtx.rotate(angle);\r\n    this.__originalRotate(angle);\r\n  };\r\n  ctx.clip = function ctxRotate(rule) {\r\n    destCtx.clip(rule);\r\n    this.__originalClip(rule);\r\n  };\r\n  ctx.moveTo = function (x, y) {\r\n    destCtx.moveTo(x, y);\r\n    this.__originalMoveTo(x, y);\r\n  };\r\n  ctx.lineTo = function (x, y) {\r\n    destCtx.lineTo(x, y);\r\n    this.__originalLineTo(x, y);\r\n  };\r\n  ctx.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\r\n    destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\r\n    this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\r\n  };\r\n  ctx.rect = function (x, y, width, height) {\r\n    destCtx.rect(x, y, width, height);\r\n    this.__originalRect(x, y, width, height);\r\n  };\r\n  ctx.closePath = function () {\r\n    destCtx.closePath();\r\n    this.__originalClosePath();\r\n  };\r\n  ctx.beginPath = function () {\r\n    destCtx.beginPath();\r\n    this.__originalBeginPath();\r\n  };\r\n}\r\nclass CachedCanvases {\r\n  constructor(canvasFactory) {\r\n    this.canvasFactory = canvasFactory;\r\n    this.cache = Object.create(null);\r\n  }\r\n  getCanvas(id, width, height) {\r\n    let canvasEntry;\r\n    if (this.cache[id] !== undefined) {\r\n      canvasEntry = this.cache[id];\r\n      this.canvasFactory.reset(canvasEntry, width, height);\r\n    } else {\r\n      canvasEntry = this.canvasFactory.create(width, height);\r\n      this.cache[id] = canvasEntry;\r\n    }\r\n    return canvasEntry;\r\n  }\r\n  delete(id) {\r\n    delete this.cache[id];\r\n  }\r\n  clear() {\r\n    for (const id in this.cache) {\r\n      const canvasEntry = this.cache[id];\r\n      this.canvasFactory.destroy(canvasEntry);\r\n      delete this.cache[id];\r\n    }\r\n  }\r\n}\r\nfunction drawImageAtIntegerCoords(ctx, srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH) {\r\n  const [a, b, c, d, tx, ty] = (0,display_utils.getCurrentTransform)(ctx);\r\n  if (b === 0 && c === 0) {\r\n    const tlX = destX * a + tx;\r\n    const rTlX = Math.round(tlX);\r\n    const tlY = destY * d + ty;\r\n    const rTlY = Math.round(tlY);\r\n    const brX = (destX + destW) * a + tx;\r\n    const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;\r\n    const brY = (destY + destH) * d + ty;\r\n    const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;\r\n    ctx.setTransform(Math.sign(a), 0, 0, Math.sign(d), rTlX, rTlY);\r\n    ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rWidth, rHeight);\r\n    ctx.setTransform(a, b, c, d, tx, ty);\r\n    return [rWidth, rHeight];\r\n  }\r\n  if (a === 0 && d === 0) {\r\n    const tlX = destY * c + tx;\r\n    const rTlX = Math.round(tlX);\r\n    const tlY = destX * b + ty;\r\n    const rTlY = Math.round(tlY);\r\n    const brX = (destY + destH) * c + tx;\r\n    const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;\r\n    const brY = (destX + destW) * b + ty;\r\n    const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;\r\n    ctx.setTransform(0, Math.sign(b), Math.sign(c), 0, rTlX, rTlY);\r\n    ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rHeight, rWidth);\r\n    ctx.setTransform(a, b, c, d, tx, ty);\r\n    return [rHeight, rWidth];\r\n  }\r\n  ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH);\r\n  const scaleX = Math.hypot(a, b);\r\n  const scaleY = Math.hypot(c, d);\r\n  return [scaleX * destW, scaleY * destH];\r\n}\r\nfunction compileType3Glyph(imgData) {\r\n  const {\r\n    width,\r\n    height\r\n  } = imgData;\r\n  if (width > MAX_SIZE_TO_COMPILE || height > MAX_SIZE_TO_COMPILE) {\r\n    return null;\r\n  }\r\n  const POINT_TO_PROCESS_LIMIT = 1000;\r\n  const POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);\r\n  const width1 = width + 1;\r\n  let points = new Uint8Array(width1 * (height + 1));\r\n  let i, j, j0;\r\n  const lineSize = width + 7 & ~7;\r\n  let data = new Uint8Array(lineSize * height),\r\n    pos = 0;\r\n  for (const elem of imgData.data) {\r\n    let mask = 128;\r\n    while (mask > 0) {\r\n      data[pos++] = elem & mask ? 0 : 255;\r\n      mask >>= 1;\r\n    }\r\n  }\r\n  let count = 0;\r\n  pos = 0;\r\n  if (data[pos] !== 0) {\r\n    points[0] = 1;\r\n    ++count;\r\n  }\r\n  for (j = 1; j < width; j++) {\r\n    if (data[pos] !== data[pos + 1]) {\r\n      points[j] = data[pos] ? 2 : 1;\r\n      ++count;\r\n    }\r\n    pos++;\r\n  }\r\n  if (data[pos] !== 0) {\r\n    points[j] = 2;\r\n    ++count;\r\n  }\r\n  for (i = 1; i < height; i++) {\r\n    pos = i * lineSize;\r\n    j0 = i * width1;\r\n    if (data[pos - lineSize] !== data[pos]) {\r\n      points[j0] = data[pos] ? 1 : 8;\r\n      ++count;\r\n    }\r\n    let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\r\n    for (j = 1; j < width; j++) {\r\n      sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);\r\n      if (POINT_TYPES[sum]) {\r\n        points[j0 + j] = POINT_TYPES[sum];\r\n        ++count;\r\n      }\r\n      pos++;\r\n    }\r\n    if (data[pos - lineSize] !== data[pos]) {\r\n      points[j0 + j] = data[pos] ? 2 : 4;\r\n      ++count;\r\n    }\r\n    if (count > POINT_TO_PROCESS_LIMIT) {\r\n      return null;\r\n    }\r\n  }\r\n  pos = lineSize * (height - 1);\r\n  j0 = i * width1;\r\n  if (data[pos] !== 0) {\r\n    points[j0] = 8;\r\n    ++count;\r\n  }\r\n  for (j = 1; j < width; j++) {\r\n    if (data[pos] !== data[pos + 1]) {\r\n      points[j0 + j] = data[pos] ? 4 : 8;\r\n      ++count;\r\n    }\r\n    pos++;\r\n  }\r\n  if (data[pos] !== 0) {\r\n    points[j0 + j] = 4;\r\n    ++count;\r\n  }\r\n  if (count > POINT_TO_PROCESS_LIMIT) {\r\n    return null;\r\n  }\r\n  const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\r\n  const path = new Path2D();\r\n  for (i = 0; count && i <= height; i++) {\r\n    let p = i * width1;\r\n    const end = p + width;\r\n    while (p < end && !points[p]) {\r\n      p++;\r\n    }\r\n    if (p === end) {\r\n      continue;\r\n    }\r\n    path.moveTo(p % width1, i);\r\n    const p0 = p;\r\n    let type = points[p];\r\n    do {\r\n      const step = steps[type];\r\n      do {\r\n        p += step;\r\n      } while (!points[p]);\r\n      const pp = points[p];\r\n      if (pp !== 5 && pp !== 10) {\r\n        type = pp;\r\n        points[p] = 0;\r\n      } else {\r\n        type = pp & 0x33 * type >> 4;\r\n        points[p] &= type >> 2 | type << 2;\r\n      }\r\n      path.lineTo(p % width1, p / width1 | 0);\r\n      if (!points[p]) {\r\n        --count;\r\n      }\r\n    } while (p0 !== p);\r\n    --i;\r\n  }\r\n  data = null;\r\n  points = null;\r\n  const drawOutline = function (c) {\r\n    c.save();\r\n    c.scale(1 / width, -1 / height);\r\n    c.translate(0, -height);\r\n    c.fill(path);\r\n    c.beginPath();\r\n    c.restore();\r\n  };\r\n  return drawOutline;\r\n}\r\nclass CanvasExtraState {\r\n  constructor(width, height) {\r\n    this.alphaIsShape = false;\r\n    this.fontSize = 0;\r\n    this.fontSizeScale = 1;\r\n    this.textMatrix = util.IDENTITY_MATRIX;\r\n    this.textMatrixScale = 1;\r\n    this.fontMatrix = util.FONT_IDENTITY_MATRIX;\r\n    this.leading = 0;\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this.lineX = 0;\r\n    this.lineY = 0;\r\n    this.charSpacing = 0;\r\n    this.wordSpacing = 0;\r\n    this.textHScale = 1;\r\n    this.textRenderingMode = util.TextRenderingMode.FILL;\r\n    this.textRise = 0;\r\n    this.fillColor = \"#000000\";\r\n    this.strokeColor = \"#000000\";\r\n    this.patternFill = false;\r\n    this.fillAlpha = 1;\r\n    this.strokeAlpha = 1;\r\n    this.lineWidth = 1;\r\n    this.activeSMask = null;\r\n    this.transferMaps = \"none\";\r\n    this.startNewPathAndClipBox([0, 0, width, height]);\r\n  }\r\n  clone() {\r\n    const clone = Object.create(this);\r\n    clone.clipBox = this.clipBox.slice();\r\n    return clone;\r\n  }\r\n  setCurrentPoint(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n  updatePathMinMax(transform, x, y) {\r\n    [x, y] = util.Util.applyTransform([x, y], transform);\r\n    this.minX = Math.min(this.minX, x);\r\n    this.minY = Math.min(this.minY, y);\r\n    this.maxX = Math.max(this.maxX, x);\r\n    this.maxY = Math.max(this.maxY, y);\r\n  }\r\n  updateRectMinMax(transform, rect) {\r\n    const p1 = util.Util.applyTransform(rect, transform);\r\n    const p2 = util.Util.applyTransform(rect.slice(2), transform);\r\n    const p3 = util.Util.applyTransform([rect[0], rect[3]], transform);\r\n    const p4 = util.Util.applyTransform([rect[2], rect[1]], transform);\r\n    this.minX = Math.min(this.minX, p1[0], p2[0], p3[0], p4[0]);\r\n    this.minY = Math.min(this.minY, p1[1], p2[1], p3[1], p4[1]);\r\n    this.maxX = Math.max(this.maxX, p1[0], p2[0], p3[0], p4[0]);\r\n    this.maxY = Math.max(this.maxY, p1[1], p2[1], p3[1], p4[1]);\r\n  }\r\n  updateScalingPathMinMax(transform, minMax) {\r\n    util.Util.scaleMinMax(transform, minMax);\r\n    this.minX = Math.min(this.minX, minMax[0]);\r\n    this.maxX = Math.max(this.maxX, minMax[1]);\r\n    this.minY = Math.min(this.minY, minMax[2]);\r\n    this.maxY = Math.max(this.maxY, minMax[3]);\r\n  }\r\n  updateCurvePathMinMax(transform, x0, y0, x1, y1, x2, y2, x3, y3, minMax) {\r\n    const box = util.Util.bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3);\r\n    if (minMax) {\r\n      minMax[0] = Math.min(minMax[0], box[0], box[2]);\r\n      minMax[1] = Math.max(minMax[1], box[0], box[2]);\r\n      minMax[2] = Math.min(minMax[2], box[1], box[3]);\r\n      minMax[3] = Math.max(minMax[3], box[1], box[3]);\r\n      return;\r\n    }\r\n    this.updateRectMinMax(transform, box);\r\n  }\r\n  getPathBoundingBox(pathType = PathType.FILL, transform = null) {\r\n    const box = [this.minX, this.minY, this.maxX, this.maxY];\r\n    if (pathType === PathType.STROKE) {\r\n      if (!transform) {\r\n        (0,util.unreachable)(\"Stroke bounding box must include transform.\");\r\n      }\r\n      const scale = util.Util.singularValueDecompose2dScale(transform);\r\n      const xStrokePad = scale[0] * this.lineWidth / 2;\r\n      const yStrokePad = scale[1] * this.lineWidth / 2;\r\n      box[0] -= xStrokePad;\r\n      box[1] -= yStrokePad;\r\n      box[2] += xStrokePad;\r\n      box[3] += yStrokePad;\r\n    }\r\n    return box;\r\n  }\r\n  updateClipFromPath() {\r\n    const intersect = util.Util.intersect(this.clipBox, this.getPathBoundingBox());\r\n    this.startNewPathAndClipBox(intersect || [0, 0, 0, 0]);\r\n  }\r\n  isEmptyClip() {\r\n    return this.minX === Infinity;\r\n  }\r\n  startNewPathAndClipBox(box) {\r\n    this.clipBox = box;\r\n    this.minX = Infinity;\r\n    this.minY = Infinity;\r\n    this.maxX = 0;\r\n    this.maxY = 0;\r\n  }\r\n  getClippedPathBoundingBox(pathType = PathType.FILL, transform = null) {\r\n    return util.Util.intersect(this.clipBox, this.getPathBoundingBox(pathType, transform));\r\n  }\r\n}\r\nfunction putBinaryImageData(ctx, imgData) {\r\n  if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\r\n    ctx.putImageData(imgData, 0, 0);\r\n    return;\r\n  }\r\n  const height = imgData.height,\r\n    width = imgData.width;\r\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\r\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\r\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\r\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\r\n  let srcPos = 0,\r\n    destPos;\r\n  const src = imgData.data;\r\n  const dest = chunkImgData.data;\r\n  let i, j, thisChunkHeight, elemsInThisChunk;\r\n  if (imgData.kind === util.ImageKind.GRAYSCALE_1BPP) {\r\n    const srcLength = src.byteLength;\r\n    const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\r\n    const dest32DataLength = dest32.length;\r\n    const fullSrcDiff = width + 7 >> 3;\r\n    const white = 0xffffffff;\r\n    const black = util.FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\r\n    for (i = 0; i < totalChunks; i++) {\r\n      thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\r\n      destPos = 0;\r\n      for (j = 0; j < thisChunkHeight; j++) {\r\n        const srcDiff = srcLength - srcPos;\r\n        let k = 0;\r\n        const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\r\n        const kEndUnrolled = kEnd & ~7;\r\n        let mask = 0;\r\n        let srcByte = 0;\r\n        for (; k < kEndUnrolled; k += 8) {\r\n          srcByte = src[srcPos++];\r\n          dest32[destPos++] = srcByte & 128 ? white : black;\r\n          dest32[destPos++] = srcByte & 64 ? white : black;\r\n          dest32[destPos++] = srcByte & 32 ? white : black;\r\n          dest32[destPos++] = srcByte & 16 ? white : black;\r\n          dest32[destPos++] = srcByte & 8 ? white : black;\r\n          dest32[destPos++] = srcByte & 4 ? white : black;\r\n          dest32[destPos++] = srcByte & 2 ? white : black;\r\n          dest32[destPos++] = srcByte & 1 ? white : black;\r\n        }\r\n        for (; k < kEnd; k++) {\r\n          if (mask === 0) {\r\n            srcByte = src[srcPos++];\r\n            mask = 128;\r\n          }\r\n          dest32[destPos++] = srcByte & mask ? white : black;\r\n          mask >>= 1;\r\n        }\r\n      }\r\n      while (destPos < dest32DataLength) {\r\n        dest32[destPos++] = 0;\r\n      }\r\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\r\n    }\r\n  } else if (imgData.kind === util.ImageKind.RGBA_32BPP) {\r\n    j = 0;\r\n    elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\r\n    for (i = 0; i < fullChunks; i++) {\r\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\r\n      srcPos += elemsInThisChunk;\r\n      ctx.putImageData(chunkImgData, 0, j);\r\n      j += FULL_CHUNK_HEIGHT;\r\n    }\r\n    if (i < totalChunks) {\r\n      elemsInThisChunk = width * partialChunkHeight * 4;\r\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\r\n      ctx.putImageData(chunkImgData, 0, j);\r\n    }\r\n  } else if (imgData.kind === util.ImageKind.RGB_24BPP) {\r\n    thisChunkHeight = FULL_CHUNK_HEIGHT;\r\n    elemsInThisChunk = width * thisChunkHeight;\r\n    for (i = 0; i < totalChunks; i++) {\r\n      if (i >= fullChunks) {\r\n        thisChunkHeight = partialChunkHeight;\r\n        elemsInThisChunk = width * thisChunkHeight;\r\n      }\r\n      destPos = 0;\r\n      for (j = elemsInThisChunk; j--;) {\r\n        dest[destPos++] = src[srcPos++];\r\n        dest[destPos++] = src[srcPos++];\r\n        dest[destPos++] = src[srcPos++];\r\n        dest[destPos++] = 255;\r\n      }\r\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\r\n    }\r\n  } else {\r\n    throw new Error(`bad image kind: ${imgData.kind}`);\r\n  }\r\n}\r\nfunction putBinaryImageMask(ctx, imgData) {\r\n  if (imgData.bitmap) {\r\n    ctx.drawImage(imgData.bitmap, 0, 0);\r\n    return;\r\n  }\r\n  const height = imgData.height,\r\n    width = imgData.width;\r\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\r\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\r\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\r\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\r\n  let srcPos = 0;\r\n  const src = imgData.data;\r\n  const dest = chunkImgData.data;\r\n  for (let i = 0; i < totalChunks; i++) {\r\n    const thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\r\n    ({\r\n      srcPos\r\n    } = convertBlackAndWhiteToRGBA({\r\n      src,\r\n      srcPos,\r\n      dest,\r\n      width,\r\n      height: thisChunkHeight,\r\n      nonBlackColor: 0\r\n    }));\r\n    ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\r\n  }\r\n}\r\nfunction copyCtxState(sourceCtx, destCtx) {\r\n  const properties = [\"strokeStyle\", \"fillStyle\", \"fillRule\", \"globalAlpha\", \"lineWidth\", \"lineCap\", \"lineJoin\", \"miterLimit\", \"globalCompositeOperation\", \"font\", \"filter\"];\r\n  for (const property of properties) {\r\n    if (sourceCtx[property] !== undefined) {\r\n      destCtx[property] = sourceCtx[property];\r\n    }\r\n  }\r\n  if (sourceCtx.setLineDash !== undefined) {\r\n    destCtx.setLineDash(sourceCtx.getLineDash());\r\n    destCtx.lineDashOffset = sourceCtx.lineDashOffset;\r\n  }\r\n}\r\nfunction resetCtxToDefault(ctx) {\r\n  ctx.strokeStyle = ctx.fillStyle = \"#000000\";\r\n  ctx.fillRule = \"nonzero\";\r\n  ctx.globalAlpha = 1;\r\n  ctx.lineWidth = 1;\r\n  ctx.lineCap = \"butt\";\r\n  ctx.lineJoin = \"miter\";\r\n  ctx.miterLimit = 10;\r\n  ctx.globalCompositeOperation = \"source-over\";\r\n  ctx.font = \"10px sans-serif\";\r\n  if (ctx.setLineDash !== undefined) {\r\n    ctx.setLineDash([]);\r\n    ctx.lineDashOffset = 0;\r\n  }\r\n  if (!util.isNodeJS) {\r\n    const {\r\n      filter\r\n    } = ctx;\r\n    if (filter !== \"none\" && filter !== \"\") {\r\n      ctx.filter = \"none\";\r\n    }\r\n  }\r\n}\r\nfunction composeSMaskBackdrop(bytes, r0, g0, b0) {\r\n  const length = bytes.length;\r\n  for (let i = 3; i < length; i += 4) {\r\n    const alpha = bytes[i];\r\n    if (alpha === 0) {\r\n      bytes[i - 3] = r0;\r\n      bytes[i - 2] = g0;\r\n      bytes[i - 1] = b0;\r\n    } else if (alpha < 255) {\r\n      const alpha_ = 255 - alpha;\r\n      bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;\r\n      bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;\r\n      bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;\r\n    }\r\n  }\r\n}\r\nfunction composeSMaskAlpha(maskData, layerData, transferMap) {\r\n  const length = maskData.length;\r\n  const scale = 1 / 255;\r\n  for (let i = 3; i < length; i += 4) {\r\n    const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\r\n    layerData[i] = layerData[i] * alpha * scale | 0;\r\n  }\r\n}\r\nfunction composeSMaskLuminosity(maskData, layerData, transferMap) {\r\n  const length = maskData.length;\r\n  for (let i = 3; i < length; i += 4) {\r\n    const y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;\r\n    layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;\r\n  }\r\n}\r\nfunction genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap, layerOffsetX, layerOffsetY, maskOffsetX, maskOffsetY) {\r\n  const hasBackdrop = !!backdrop;\r\n  const r0 = hasBackdrop ? backdrop[0] : 0;\r\n  const g0 = hasBackdrop ? backdrop[1] : 0;\r\n  const b0 = hasBackdrop ? backdrop[2] : 0;\r\n  const composeFn = subtype === \"Luminosity\" ? composeSMaskLuminosity : composeSMaskAlpha;\r\n  const PIXELS_TO_PROCESS = 1048576;\r\n  const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\r\n  for (let row = 0; row < height; row += chunkSize) {\r\n    const chunkHeight = Math.min(chunkSize, height - row);\r\n    const maskData = maskCtx.getImageData(layerOffsetX - maskOffsetX, row + (layerOffsetY - maskOffsetY), width, chunkHeight);\r\n    const layerData = layerCtx.getImageData(layerOffsetX, row + layerOffsetY, width, chunkHeight);\r\n    if (hasBackdrop) {\r\n      composeSMaskBackdrop(maskData.data, r0, g0, b0);\r\n    }\r\n    composeFn(maskData.data, layerData.data, transferMap);\r\n    layerCtx.putImageData(layerData, layerOffsetX, row + layerOffsetY);\r\n  }\r\n}\r\nfunction composeSMask(ctx, smask, layerCtx, layerBox) {\r\n  const layerOffsetX = layerBox[0];\r\n  const layerOffsetY = layerBox[1];\r\n  const layerWidth = layerBox[2] - layerOffsetX;\r\n  const layerHeight = layerBox[3] - layerOffsetY;\r\n  if (layerWidth === 0 || layerHeight === 0) {\r\n    return;\r\n  }\r\n  genericComposeSMask(smask.context, layerCtx, layerWidth, layerHeight, smask.subtype, smask.backdrop, smask.transferMap, layerOffsetX, layerOffsetY, smask.offsetX, smask.offsetY);\r\n  ctx.save();\r\n  ctx.globalAlpha = 1;\r\n  ctx.globalCompositeOperation = \"source-over\";\r\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n  ctx.drawImage(layerCtx.canvas, 0, 0);\r\n  ctx.restore();\r\n}\r\nfunction getImageSmoothingEnabled(transform, interpolate) {\r\n  const scale = util.Util.singularValueDecompose2dScale(transform);\r\n  scale[0] = Math.fround(scale[0]);\r\n  scale[1] = Math.fround(scale[1]);\r\n  const actualScale = Math.fround((globalThis.devicePixelRatio || 1) * display_utils.PixelsPerInch.PDF_TO_CSS_UNITS);\r\n  if (interpolate !== undefined) {\r\n    return interpolate;\r\n  } else if (scale[0] <= actualScale || scale[1] <= actualScale) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\nconst LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\r\nconst LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\r\nconst NORMAL_CLIP = {};\r\nconst EO_CLIP = {};\r\nclass CanvasGraphics {\r\n  constructor(canvasCtx, commonObjs, objs, canvasFactory, filterFactory, {\r\n    optionalContentConfig,\r\n    markedContentStack = null\r\n  }, annotationCanvasMap, pageColors) {\r\n    this.ctx = canvasCtx;\r\n    this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);\r\n    this.stateStack = [];\r\n    this.pendingClip = null;\r\n    this.pendingEOFill = false;\r\n    this.res = null;\r\n    this.xobjs = null;\r\n    this.commonObjs = commonObjs;\r\n    this.objs = objs;\r\n    this.canvasFactory = canvasFactory;\r\n    this.filterFactory = filterFactory;\r\n    this.groupStack = [];\r\n    this.processingType3 = null;\r\n    this.baseTransform = null;\r\n    this.baseTransformStack = [];\r\n    this.groupLevel = 0;\r\n    this.smaskStack = [];\r\n    this.smaskCounter = 0;\r\n    this.tempSMask = null;\r\n    this.suspendedCtx = null;\r\n    this.contentVisible = true;\r\n    this.markedContentStack = markedContentStack || [];\r\n    this.optionalContentConfig = optionalContentConfig;\r\n    this.cachedCanvases = new CachedCanvases(this.canvasFactory);\r\n    this.cachedPatterns = new Map();\r\n    this.annotationCanvasMap = annotationCanvasMap;\r\n    this.viewportScale = 1;\r\n    this.outputScaleX = 1;\r\n    this.outputScaleY = 1;\r\n    this.pageColors = pageColors;\r\n    this._cachedScaleForStroking = [-1, 0];\r\n    this._cachedGetSinglePixelWidth = null;\r\n    this._cachedBitmapsMap = new Map();\r\n  }\r\n  getObject(data, fallback = null) {\r\n    if (typeof data === \"string\") {\r\n      return data.startsWith(\"g_\") ? this.commonObjs.get(data) : this.objs.get(data);\r\n    }\r\n    return fallback;\r\n  }\r\n  beginDrawing({\r\n    transform,\r\n    viewport,\r\n    transparency = false,\r\n    background = null\r\n  }) {\r\n    const width = this.ctx.canvas.width;\r\n    const height = this.ctx.canvas.height;\r\n    const savedFillStyle = this.ctx.fillStyle;\r\n    this.ctx.fillStyle = background || \"#ffffff\";\r\n    this.ctx.fillRect(0, 0, width, height);\r\n    this.ctx.fillStyle = savedFillStyle;\r\n    if (transparency) {\r\n      const transparentCanvas = this.cachedCanvases.getCanvas(\"transparent\", width, height);\r\n      this.compositeCtx = this.ctx;\r\n      this.transparentCanvas = transparentCanvas.canvas;\r\n      this.ctx = transparentCanvas.context;\r\n      this.ctx.save();\r\n      this.ctx.transform(...(0,display_utils.getCurrentTransform)(this.compositeCtx));\r\n    }\r\n    this.ctx.save();\r\n    resetCtxToDefault(this.ctx);\r\n    if (transform) {\r\n      this.ctx.transform(...transform);\r\n      this.outputScaleX = transform[0];\r\n      this.outputScaleY = transform[0];\r\n    }\r\n    this.ctx.transform(...viewport.transform);\r\n    this.viewportScale = viewport.scale;\r\n    this.baseTransform = (0,display_utils.getCurrentTransform)(this.ctx);\r\n  }\r\n  executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {\r\n    const argsArray = operatorList.argsArray;\r\n    const fnArray = operatorList.fnArray;\r\n    let i = executionStartIdx || 0;\r\n    const argsArrayLen = argsArray.length;\r\n    if (argsArrayLen === i) {\r\n      return i;\r\n    }\r\n    const chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === \"function\";\r\n    const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\r\n    let steps = 0;\r\n    const commonObjs = this.commonObjs;\r\n    const objs = this.objs;\r\n    let fnId;\r\n    while (true) {\r\n      if (stepper !== undefined && i === stepper.nextBreakPoint) {\r\n        stepper.breakIt(i, continueCallback);\r\n        return i;\r\n      }\r\n      fnId = fnArray[i];\r\n      if (fnId !== util.OPS.dependency) {\r\n        this[fnId].apply(this, argsArray[i]);\r\n      } else {\r\n        for (const depObjId of argsArray[i]) {\r\n          const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\r\n          if (!objsPool.has(depObjId)) {\r\n            objsPool.get(depObjId, continueCallback);\r\n            return i;\r\n          }\r\n        }\r\n      }\r\n      i++;\r\n      if (i === argsArrayLen) {\r\n        return i;\r\n      }\r\n      if (chunkOperations && ++steps > EXECUTION_STEPS) {\r\n        if (Date.now() > endTime) {\r\n          continueCallback();\r\n          return i;\r\n        }\r\n        steps = 0;\r\n      }\r\n    }\r\n  }\r\n  #restoreInitialState() {\r\n    while (this.stateStack.length || this.inSMaskMode) {\r\n      this.restore();\r\n    }\r\n    this.ctx.restore();\r\n    if (this.transparentCanvas) {\r\n      this.ctx = this.compositeCtx;\r\n      this.ctx.save();\r\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n      this.ctx.drawImage(this.transparentCanvas, 0, 0);\r\n      this.ctx.restore();\r\n      this.transparentCanvas = null;\r\n    }\r\n  }\r\n  endDrawing() {\r\n    this.#restoreInitialState();\r\n    this.cachedCanvases.clear();\r\n    this.cachedPatterns.clear();\r\n    for (const cache of this._cachedBitmapsMap.values()) {\r\n      for (const canvas of cache.values()) {\r\n        if (typeof HTMLCanvasElement !== \"undefined\" && canvas instanceof HTMLCanvasElement) {\r\n          canvas.width = canvas.height = 0;\r\n        }\r\n      }\r\n      cache.clear();\r\n    }\r\n    this._cachedBitmapsMap.clear();\r\n    this.#drawFilter();\r\n  }\r\n  #drawFilter() {\r\n    if (this.pageColors) {\r\n      const hcmFilterId = this.filterFactory.addHCMFilter(this.pageColors.foreground, this.pageColors.background);\r\n      if (hcmFilterId !== \"none\") {\r\n        const savedFilter = this.ctx.filter;\r\n        this.ctx.filter = hcmFilterId;\r\n        this.ctx.drawImage(this.ctx.canvas, 0, 0);\r\n        this.ctx.filter = savedFilter;\r\n      }\r\n    }\r\n  }\r\n  _scaleImage(img, inverseTransform) {\r\n    const width = img.width;\r\n    const height = img.height;\r\n    let widthScale = Math.max(Math.hypot(inverseTransform[0], inverseTransform[1]), 1);\r\n    let heightScale = Math.max(Math.hypot(inverseTransform[2], inverseTransform[3]), 1);\r\n    let paintWidth = width,\r\n      paintHeight = height;\r\n    let tmpCanvasId = \"prescale1\";\r\n    let tmpCanvas, tmpCtx;\r\n    while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {\r\n      let newWidth = paintWidth,\r\n        newHeight = paintHeight;\r\n      if (widthScale > 2 && paintWidth > 1) {\r\n        newWidth = paintWidth >= 16384 ? Math.floor(paintWidth / 2) - 1 || 1 : Math.ceil(paintWidth / 2);\r\n        widthScale /= paintWidth / newWidth;\r\n      }\r\n      if (heightScale > 2 && paintHeight > 1) {\r\n        newHeight = paintHeight >= 16384 ? Math.floor(paintHeight / 2) - 1 || 1 : Math.ceil(paintHeight) / 2;\r\n        heightScale /= paintHeight / newHeight;\r\n      }\r\n      tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);\r\n      tmpCtx = tmpCanvas.context;\r\n      tmpCtx.clearRect(0, 0, newWidth, newHeight);\r\n      tmpCtx.drawImage(img, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);\r\n      img = tmpCanvas.canvas;\r\n      paintWidth = newWidth;\r\n      paintHeight = newHeight;\r\n      tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\r\n    }\r\n    return {\r\n      img,\r\n      paintWidth,\r\n      paintHeight\r\n    };\r\n  }\r\n  _createMaskCanvas(img) {\r\n    const ctx = this.ctx;\r\n    const {\r\n      width,\r\n      height\r\n    } = img;\r\n    const fillColor = this.current.fillColor;\r\n    const isPatternFill = this.current.patternFill;\r\n    const currentTransform = (0,display_utils.getCurrentTransform)(ctx);\r\n    let cache, cacheKey, scaled, maskCanvas;\r\n    if ((img.bitmap || img.data) && img.count > 1) {\r\n      const mainKey = img.bitmap || img.data.buffer;\r\n      cacheKey = JSON.stringify(isPatternFill ? currentTransform : [currentTransform.slice(0, 4), fillColor]);\r\n      cache = this._cachedBitmapsMap.get(mainKey);\r\n      if (!cache) {\r\n        cache = new Map();\r\n        this._cachedBitmapsMap.set(mainKey, cache);\r\n      }\r\n      const cachedImage = cache.get(cacheKey);\r\n      if (cachedImage && !isPatternFill) {\r\n        const offsetX = Math.round(Math.min(currentTransform[0], currentTransform[2]) + currentTransform[4]);\r\n        const offsetY = Math.round(Math.min(currentTransform[1], currentTransform[3]) + currentTransform[5]);\r\n        return {\r\n          canvas: cachedImage,\r\n          offsetX,\r\n          offsetY\r\n        };\r\n      }\r\n      scaled = cachedImage;\r\n    }\r\n    if (!scaled) {\r\n      maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\r\n      putBinaryImageMask(maskCanvas.context, img);\r\n    }\r\n    let maskToCanvas = util.Util.transform(currentTransform, [1 / width, 0, 0, -1 / height, 0, 0]);\r\n    maskToCanvas = util.Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);\r\n    const [minX, minY, maxX, maxY] = util.Util.getAxialAlignedBoundingBox([0, 0, width, height], maskToCanvas);\r\n    const drawnWidth = Math.round(maxX - minX) || 1;\r\n    const drawnHeight = Math.round(maxY - minY) || 1;\r\n    const fillCanvas = this.cachedCanvases.getCanvas(\"fillCanvas\", drawnWidth, drawnHeight);\r\n    const fillCtx = fillCanvas.context;\r\n    const offsetX = minX;\r\n    const offsetY = minY;\r\n    fillCtx.translate(-offsetX, -offsetY);\r\n    fillCtx.transform(...maskToCanvas);\r\n    if (!scaled) {\r\n      scaled = this._scaleImage(maskCanvas.canvas, (0,display_utils.getCurrentTransformInverse)(fillCtx));\r\n      scaled = scaled.img;\r\n      if (cache && isPatternFill) {\r\n        cache.set(cacheKey, scaled);\r\n      }\r\n    }\r\n    fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled((0,display_utils.getCurrentTransform)(fillCtx), img.interpolate);\r\n    drawImageAtIntegerCoords(fillCtx, scaled, 0, 0, scaled.width, scaled.height, 0, 0, width, height);\r\n    fillCtx.globalCompositeOperation = \"source-in\";\r\n    const inverse = util.Util.transform((0,display_utils.getCurrentTransformInverse)(fillCtx), [1, 0, 0, 1, -offsetX, -offsetY]);\r\n    fillCtx.fillStyle = isPatternFill ? fillColor.getPattern(ctx, this, inverse, PathType.FILL) : fillColor;\r\n    fillCtx.fillRect(0, 0, width, height);\r\n    if (cache && !isPatternFill) {\r\n      this.cachedCanvases.delete(\"fillCanvas\");\r\n      cache.set(cacheKey, fillCanvas.canvas);\r\n    }\r\n    return {\r\n      canvas: fillCanvas.canvas,\r\n      offsetX: Math.round(offsetX),\r\n      offsetY: Math.round(offsetY)\r\n    };\r\n  }\r\n  setLineWidth(width) {\r\n    if (width !== this.current.lineWidth) {\r\n      this._cachedScaleForStroking[0] = -1;\r\n    }\r\n    this.current.lineWidth = width;\r\n    this.ctx.lineWidth = width;\r\n  }\r\n  setLineCap(style) {\r\n    this.ctx.lineCap = LINE_CAP_STYLES[style];\r\n  }\r\n  setLineJoin(style) {\r\n    this.ctx.lineJoin = LINE_JOIN_STYLES[style];\r\n  }\r\n  setMiterLimit(limit) {\r\n    this.ctx.miterLimit = limit;\r\n  }\r\n  setDash(dashArray, dashPhase) {\r\n    const ctx = this.ctx;\r\n    if (ctx.setLineDash !== undefined) {\r\n      ctx.setLineDash(dashArray);\r\n      ctx.lineDashOffset = dashPhase;\r\n    }\r\n  }\r\n  setRenderingIntent(intent) {}\r\n  setFlatness(flatness) {}\r\n  setGState(states) {\r\n    for (const [key, value] of states) {\r\n      switch (key) {\r\n        case \"LW\":\r\n          this.setLineWidth(value);\r\n          break;\r\n        case \"LC\":\r\n          this.setLineCap(value);\r\n          break;\r\n        case \"LJ\":\r\n          this.setLineJoin(value);\r\n          break;\r\n        case \"ML\":\r\n          this.setMiterLimit(value);\r\n          break;\r\n        case \"D\":\r\n          this.setDash(value[0], value[1]);\r\n          break;\r\n        case \"RI\":\r\n          this.setRenderingIntent(value);\r\n          break;\r\n        case \"FL\":\r\n          this.setFlatness(value);\r\n          break;\r\n        case \"Font\":\r\n          this.setFont(value[0], value[1]);\r\n          break;\r\n        case \"CA\":\r\n          this.current.strokeAlpha = value;\r\n          break;\r\n        case \"ca\":\r\n          this.current.fillAlpha = value;\r\n          this.ctx.globalAlpha = value;\r\n          break;\r\n        case \"BM\":\r\n          this.ctx.globalCompositeOperation = value;\r\n          break;\r\n        case \"SMask\":\r\n          this.current.activeSMask = value ? this.tempSMask : null;\r\n          this.tempSMask = null;\r\n          this.checkSMaskState();\r\n          break;\r\n        case \"TR\":\r\n          this.ctx.filter = this.current.transferMaps = this.filterFactory.addFilter(value);\r\n          break;\r\n      }\r\n    }\r\n  }\r\n  get inSMaskMode() {\r\n    return !!this.suspendedCtx;\r\n  }\r\n  checkSMaskState() {\r\n    const inSMaskMode = this.inSMaskMode;\r\n    if (this.current.activeSMask && !inSMaskMode) {\r\n      this.beginSMaskMode();\r\n    } else if (!this.current.activeSMask && inSMaskMode) {\r\n      this.endSMaskMode();\r\n    }\r\n  }\r\n  beginSMaskMode() {\r\n    if (this.inSMaskMode) {\r\n      throw new Error(\"beginSMaskMode called while already in smask mode\");\r\n    }\r\n    const drawnWidth = this.ctx.canvas.width;\r\n    const drawnHeight = this.ctx.canvas.height;\r\n    const cacheId = \"smaskGroupAt\" + this.groupLevel;\r\n    const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight);\r\n    this.suspendedCtx = this.ctx;\r\n    this.ctx = scratchCanvas.context;\r\n    const ctx = this.ctx;\r\n    ctx.setTransform(...(0,display_utils.getCurrentTransform)(this.suspendedCtx));\r\n    copyCtxState(this.suspendedCtx, ctx);\r\n    mirrorContextOperations(ctx, this.suspendedCtx);\r\n    this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\r\n  }\r\n  endSMaskMode() {\r\n    if (!this.inSMaskMode) {\r\n      throw new Error(\"endSMaskMode called while not in smask mode\");\r\n    }\r\n    this.ctx._removeMirroring();\r\n    copyCtxState(this.ctx, this.suspendedCtx);\r\n    this.ctx = this.suspendedCtx;\r\n    this.suspendedCtx = null;\r\n  }\r\n  compose(dirtyBox) {\r\n    if (!this.current.activeSMask) {\r\n      return;\r\n    }\r\n    if (!dirtyBox) {\r\n      dirtyBox = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];\r\n    } else {\r\n      dirtyBox[0] = Math.floor(dirtyBox[0]);\r\n      dirtyBox[1] = Math.floor(dirtyBox[1]);\r\n      dirtyBox[2] = Math.ceil(dirtyBox[2]);\r\n      dirtyBox[3] = Math.ceil(dirtyBox[3]);\r\n    }\r\n    const smask = this.current.activeSMask;\r\n    const suspendedCtx = this.suspendedCtx;\r\n    composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);\r\n    this.ctx.save();\r\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n    this.ctx.restore();\r\n  }\r\n  save() {\r\n    if (this.inSMaskMode) {\r\n      copyCtxState(this.ctx, this.suspendedCtx);\r\n      this.suspendedCtx.save();\r\n    } else {\r\n      this.ctx.save();\r\n    }\r\n    const old = this.current;\r\n    this.stateStack.push(old);\r\n    this.current = old.clone();\r\n  }\r\n  restore() {\r\n    if (this.stateStack.length === 0 && this.inSMaskMode) {\r\n      this.endSMaskMode();\r\n    }\r\n    if (this.stateStack.length !== 0) {\r\n      this.current = this.stateStack.pop();\r\n      if (this.inSMaskMode) {\r\n        this.suspendedCtx.restore();\r\n        copyCtxState(this.suspendedCtx, this.ctx);\r\n      } else {\r\n        this.ctx.restore();\r\n      }\r\n      this.checkSMaskState();\r\n      this.pendingClip = null;\r\n      this._cachedScaleForStroking[0] = -1;\r\n      this._cachedGetSinglePixelWidth = null;\r\n    }\r\n  }\r\n  transform(a, b, c, d, e, f) {\r\n    this.ctx.transform(a, b, c, d, e, f);\r\n    this._cachedScaleForStroking[0] = -1;\r\n    this._cachedGetSinglePixelWidth = null;\r\n  }\r\n  constructPath(ops, args, minMax) {\r\n    const ctx = this.ctx;\r\n    const current = this.current;\r\n    let x = current.x,\r\n      y = current.y;\r\n    let startX, startY;\r\n    const currentTransform = (0,display_utils.getCurrentTransform)(ctx);\r\n    const isScalingMatrix = currentTransform[0] === 0 && currentTransform[3] === 0 || currentTransform[1] === 0 && currentTransform[2] === 0;\r\n    const minMaxForBezier = isScalingMatrix ? minMax.slice(0) : null;\r\n    for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\r\n      switch (ops[i] | 0) {\r\n        case util.OPS.rectangle:\r\n          x = args[j++];\r\n          y = args[j++];\r\n          const width = args[j++];\r\n          const height = args[j++];\r\n          const xw = x + width;\r\n          const yh = y + height;\r\n          ctx.moveTo(x, y);\r\n          if (width === 0 || height === 0) {\r\n            ctx.lineTo(xw, yh);\r\n          } else {\r\n            ctx.lineTo(xw, y);\r\n            ctx.lineTo(xw, yh);\r\n            ctx.lineTo(x, yh);\r\n          }\r\n          if (!isScalingMatrix) {\r\n            current.updateRectMinMax(currentTransform, [x, y, xw, yh]);\r\n          }\r\n          ctx.closePath();\r\n          break;\r\n        case util.OPS.moveTo:\r\n          x = args[j++];\r\n          y = args[j++];\r\n          ctx.moveTo(x, y);\r\n          if (!isScalingMatrix) {\r\n            current.updatePathMinMax(currentTransform, x, y);\r\n          }\r\n          break;\r\n        case util.OPS.lineTo:\r\n          x = args[j++];\r\n          y = args[j++];\r\n          ctx.lineTo(x, y);\r\n          if (!isScalingMatrix) {\r\n            current.updatePathMinMax(currentTransform, x, y);\r\n          }\r\n          break;\r\n        case util.OPS.curveTo:\r\n          startX = x;\r\n          startY = y;\r\n          x = args[j + 4];\r\n          y = args[j + 5];\r\n          ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);\r\n          current.updateCurvePathMinMax(currentTransform, startX, startY, args[j], args[j + 1], args[j + 2], args[j + 3], x, y, minMaxForBezier);\r\n          j += 6;\r\n          break;\r\n        case util.OPS.curveTo2:\r\n          startX = x;\r\n          startY = y;\r\n          ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);\r\n          current.updateCurvePathMinMax(currentTransform, startX, startY, x, y, args[j], args[j + 1], args[j + 2], args[j + 3], minMaxForBezier);\r\n          x = args[j + 2];\r\n          y = args[j + 3];\r\n          j += 4;\r\n          break;\r\n        case util.OPS.curveTo3:\r\n          startX = x;\r\n          startY = y;\r\n          x = args[j + 2];\r\n          y = args[j + 3];\r\n          ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\r\n          current.updateCurvePathMinMax(currentTransform, startX, startY, args[j], args[j + 1], x, y, x, y, minMaxForBezier);\r\n          j += 4;\r\n          break;\r\n        case util.OPS.closePath:\r\n          ctx.closePath();\r\n          break;\r\n      }\r\n    }\r\n    if (isScalingMatrix) {\r\n      current.updateScalingPathMinMax(currentTransform, minMaxForBezier);\r\n    }\r\n    current.setCurrentPoint(x, y);\r\n  }\r\n  closePath() {\r\n    this.ctx.closePath();\r\n  }\r\n  stroke(consumePath = true) {\r\n    const ctx = this.ctx;\r\n    const strokeColor = this.current.strokeColor;\r\n    ctx.globalAlpha = this.current.strokeAlpha;\r\n    if (this.contentVisible) {\r\n      if (typeof strokeColor === \"object\" && strokeColor?.getPattern) {\r\n        ctx.save();\r\n        ctx.strokeStyle = strokeColor.getPattern(ctx, this, (0,display_utils.getCurrentTransformInverse)(ctx), PathType.STROKE);\r\n        this.rescaleAndStroke(false);\r\n        ctx.restore();\r\n      } else {\r\n        this.rescaleAndStroke(true);\r\n      }\r\n    }\r\n    if (consumePath) {\r\n      this.consumePath(this.current.getClippedPathBoundingBox());\r\n    }\r\n    ctx.globalAlpha = this.current.fillAlpha;\r\n  }\r\n  closeStroke() {\r\n    this.closePath();\r\n    this.stroke();\r\n  }\r\n  fill(consumePath = true) {\r\n    const ctx = this.ctx;\r\n    const fillColor = this.current.fillColor;\r\n    const isPatternFill = this.current.patternFill;\r\n    let needRestore = false;\r\n    if (isPatternFill) {\r\n      ctx.save();\r\n      ctx.fillStyle = fillColor.getPattern(ctx, this, (0,display_utils.getCurrentTransformInverse)(ctx), PathType.FILL);\r\n      needRestore = true;\r\n    }\r\n    const intersect = this.current.getClippedPathBoundingBox();\r\n    if (this.contentVisible && intersect !== null) {\r\n      if (this.pendingEOFill) {\r\n        ctx.fill(\"evenodd\");\r\n        this.pendingEOFill = false;\r\n      } else {\r\n        ctx.fill();\r\n      }\r\n    }\r\n    if (needRestore) {\r\n      ctx.restore();\r\n    }\r\n    if (consumePath) {\r\n      this.consumePath(intersect);\r\n    }\r\n  }\r\n  eoFill() {\r\n    this.pendingEOFill = true;\r\n    this.fill();\r\n  }\r\n  fillStroke() {\r\n    this.fill(false);\r\n    this.stroke(false);\r\n    this.consumePath();\r\n  }\r\n  eoFillStroke() {\r\n    this.pendingEOFill = true;\r\n    this.fillStroke();\r\n  }\r\n  closeFillStroke() {\r\n    this.closePath();\r\n    this.fillStroke();\r\n  }\r\n  closeEOFillStroke() {\r\n    this.pendingEOFill = true;\r\n    this.closePath();\r\n    this.fillStroke();\r\n  }\r\n  endPath() {\r\n    this.consumePath();\r\n  }\r\n  clip() {\r\n    this.pendingClip = NORMAL_CLIP;\r\n  }\r\n  eoClip() {\r\n    this.pendingClip = EO_CLIP;\r\n  }\r\n  beginText() {\r\n    this.current.textMatrix = util.IDENTITY_MATRIX;\r\n    this.current.textMatrixScale = 1;\r\n    this.current.x = this.current.lineX = 0;\r\n    this.current.y = this.current.lineY = 0;\r\n  }\r\n  endText() {\r\n    const paths = this.pendingTextPaths;\r\n    const ctx = this.ctx;\r\n    if (paths === undefined) {\r\n      ctx.beginPath();\r\n      return;\r\n    }\r\n    ctx.save();\r\n    ctx.beginPath();\r\n    for (const path of paths) {\r\n      ctx.setTransform(...path.transform);\r\n      ctx.translate(path.x, path.y);\r\n      path.addToPath(ctx, path.fontSize);\r\n    }\r\n    ctx.restore();\r\n    ctx.clip();\r\n    ctx.beginPath();\r\n    delete this.pendingTextPaths;\r\n  }\r\n  setCharSpacing(spacing) {\r\n    this.current.charSpacing = spacing;\r\n  }\r\n  setWordSpacing(spacing) {\r\n    this.current.wordSpacing = spacing;\r\n  }\r\n  setHScale(scale) {\r\n    this.current.textHScale = scale / 100;\r\n  }\r\n  setLeading(leading) {\r\n    this.current.leading = -leading;\r\n  }\r\n  setFont(fontRefName, size) {\r\n    const fontObj = this.commonObjs.get(fontRefName);\r\n    const current = this.current;\r\n    if (!fontObj) {\r\n      throw new Error(`Can't find font for ${fontRefName}`);\r\n    }\r\n    current.fontMatrix = fontObj.fontMatrix || util.FONT_IDENTITY_MATRIX;\r\n    if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\r\n      (0,util.warn)(\"Invalid font matrix for font \" + fontRefName);\r\n    }\r\n    if (size < 0) {\r\n      size = -size;\r\n      current.fontDirection = -1;\r\n    } else {\r\n      current.fontDirection = 1;\r\n    }\r\n    this.current.font = fontObj;\r\n    this.current.fontSize = size;\r\n    if (fontObj.isType3Font) {\r\n      return;\r\n    }\r\n    const name = fontObj.loadedName || \"sans-serif\";\r\n    const typeface = fontObj.systemFontInfo?.css || `\"${name}\", ${fontObj.fallbackName}`;\r\n    let bold = \"normal\";\r\n    if (fontObj.black) {\r\n      bold = \"900\";\r\n    } else if (fontObj.bold) {\r\n      bold = \"bold\";\r\n    }\r\n    const italic = fontObj.italic ? \"italic\" : \"normal\";\r\n    let browserFontSize = size;\r\n    if (size < MIN_FONT_SIZE) {\r\n      browserFontSize = MIN_FONT_SIZE;\r\n    } else if (size > MAX_FONT_SIZE) {\r\n      browserFontSize = MAX_FONT_SIZE;\r\n    }\r\n    this.current.fontSizeScale = size / browserFontSize;\r\n    this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\r\n  }\r\n  setTextRenderingMode(mode) {\r\n    this.current.textRenderingMode = mode;\r\n  }\r\n  setTextRise(rise) {\r\n    this.current.textRise = rise;\r\n  }\r\n  moveText(x, y) {\r\n    this.current.x = this.current.lineX += x;\r\n    this.current.y = this.current.lineY += y;\r\n  }\r\n  setLeadingMoveText(x, y) {\r\n    this.setLeading(-y);\r\n    this.moveText(x, y);\r\n  }\r\n  setTextMatrix(a, b, c, d, e, f) {\r\n    this.current.textMatrix = [a, b, c, d, e, f];\r\n    this.current.textMatrixScale = Math.hypot(a, b);\r\n    this.current.x = this.current.lineX = 0;\r\n    this.current.y = this.current.lineY = 0;\r\n  }\r\n  nextLine() {\r\n    this.moveText(0, this.current.leading);\r\n  }\r\n  paintChar(character, x, y, patternTransform) {\r\n    const ctx = this.ctx;\r\n    const current = this.current;\r\n    const font = current.font;\r\n    const textRenderingMode = current.textRenderingMode;\r\n    const fontSize = current.fontSize / current.fontSizeScale;\r\n    const fillStrokeMode = textRenderingMode & util.TextRenderingMode.FILL_STROKE_MASK;\r\n    const isAddToPathSet = !!(textRenderingMode & util.TextRenderingMode.ADD_TO_PATH_FLAG);\r\n    const patternFill = current.patternFill && !font.missingFile;\r\n    let addToPath;\r\n    if (font.disableFontFace || isAddToPathSet || patternFill) {\r\n      addToPath = font.getPathGenerator(this.commonObjs, character);\r\n    }\r\n    if (font.disableFontFace || patternFill) {\r\n      ctx.save();\r\n      ctx.translate(x, y);\r\n      ctx.beginPath();\r\n      addToPath(ctx, fontSize);\r\n      if (patternTransform) {\r\n        ctx.setTransform(...patternTransform);\r\n      }\r\n      if (fillStrokeMode === util.TextRenderingMode.FILL || fillStrokeMode === util.TextRenderingMode.FILL_STROKE) {\r\n        ctx.fill();\r\n      }\r\n      if (fillStrokeMode === util.TextRenderingMode.STROKE || fillStrokeMode === util.TextRenderingMode.FILL_STROKE) {\r\n        ctx.stroke();\r\n      }\r\n      ctx.restore();\r\n    } else {\r\n      if (fillStrokeMode === util.TextRenderingMode.FILL || fillStrokeMode === util.TextRenderingMode.FILL_STROKE) {\r\n        ctx.fillText(character, x, y);\r\n      }\r\n      if (fillStrokeMode === util.TextRenderingMode.STROKE || fillStrokeMode === util.TextRenderingMode.FILL_STROKE) {\r\n        ctx.strokeText(character, x, y);\r\n      }\r\n    }\r\n    if (isAddToPathSet) {\r\n      const paths = this.pendingTextPaths ||= [];\r\n      paths.push({\r\n        transform: (0,display_utils.getCurrentTransform)(ctx),\r\n        x,\r\n        y,\r\n        fontSize,\r\n        addToPath\r\n      });\r\n    }\r\n  }\r\n  get isFontSubpixelAAEnabled() {\r\n    const {\r\n      context: ctx\r\n    } = this.cachedCanvases.getCanvas(\"isFontSubpixelAAEnabled\", 10, 10);\r\n    ctx.scale(1.5, 1);\r\n    ctx.fillText(\"I\", 0, 10);\r\n    const data = ctx.getImageData(0, 0, 10, 10).data;\r\n    let enabled = false;\r\n    for (let i = 3; i < data.length; i += 4) {\r\n      if (data[i] > 0 && data[i] < 255) {\r\n        enabled = true;\r\n        break;\r\n      }\r\n    }\r\n    return (0,util.shadow)(this, \"isFontSubpixelAAEnabled\", enabled);\r\n  }\r\n  showText(glyphs) {\r\n    const current = this.current;\r\n    const font = current.font;\r\n    if (font.isType3Font) {\r\n      return this.showType3Text(glyphs);\r\n    }\r\n    const fontSize = current.fontSize;\r\n    if (fontSize === 0) {\r\n      return undefined;\r\n    }\r\n    const ctx = this.ctx;\r\n    const fontSizeScale = current.fontSizeScale;\r\n    const charSpacing = current.charSpacing;\r\n    const wordSpacing = current.wordSpacing;\r\n    const fontDirection = current.fontDirection;\r\n    const textHScale = current.textHScale * fontDirection;\r\n    const glyphsLength = glyphs.length;\r\n    const vertical = font.vertical;\r\n    const spacingDir = vertical ? 1 : -1;\r\n    const defaultVMetrics = font.defaultVMetrics;\r\n    const widthAdvanceScale = fontSize * current.fontMatrix[0];\r\n    const simpleFillText = current.textRenderingMode === util.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;\r\n    ctx.save();\r\n    ctx.transform(...current.textMatrix);\r\n    ctx.translate(current.x, current.y + current.textRise);\r\n    if (fontDirection > 0) {\r\n      ctx.scale(textHScale, -1);\r\n    } else {\r\n      ctx.scale(textHScale, 1);\r\n    }\r\n    let patternTransform;\r\n    if (current.patternFill) {\r\n      ctx.save();\r\n      const pattern = current.fillColor.getPattern(ctx, this, (0,display_utils.getCurrentTransformInverse)(ctx), PathType.FILL);\r\n      patternTransform = (0,display_utils.getCurrentTransform)(ctx);\r\n      ctx.restore();\r\n      ctx.fillStyle = pattern;\r\n    }\r\n    let lineWidth = current.lineWidth;\r\n    const scale = current.textMatrixScale;\r\n    if (scale === 0 || lineWidth === 0) {\r\n      const fillStrokeMode = current.textRenderingMode & util.TextRenderingMode.FILL_STROKE_MASK;\r\n      if (fillStrokeMode === util.TextRenderingMode.STROKE || fillStrokeMode === util.TextRenderingMode.FILL_STROKE) {\r\n        lineWidth = this.getSinglePixelWidth();\r\n      }\r\n    } else {\r\n      lineWidth /= scale;\r\n    }\r\n    if (fontSizeScale !== 1.0) {\r\n      ctx.scale(fontSizeScale, fontSizeScale);\r\n      lineWidth /= fontSizeScale;\r\n    }\r\n    ctx.lineWidth = lineWidth;\r\n    if (font.isInvalidPDFjsFont) {\r\n      const chars = [];\r\n      let width = 0;\r\n      for (const glyph of glyphs) {\r\n        chars.push(glyph.unicode);\r\n        width += glyph.width;\r\n      }\r\n      ctx.fillText(chars.join(\"\"), 0, 0);\r\n      current.x += width * widthAdvanceScale * textHScale;\r\n      ctx.restore();\r\n      this.compose();\r\n      return undefined;\r\n    }\r\n    let x = 0,\r\n      i;\r\n    for (i = 0; i < glyphsLength; ++i) {\r\n      const glyph = glyphs[i];\r\n      if (typeof glyph === \"number\") {\r\n        x += spacingDir * glyph * fontSize / 1000;\r\n        continue;\r\n      }\r\n      let restoreNeeded = false;\r\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\r\n      const character = glyph.fontChar;\r\n      const accent = glyph.accent;\r\n      let scaledX, scaledY;\r\n      let width = glyph.width;\r\n      if (vertical) {\r\n        const vmetric = glyph.vmetric || defaultVMetrics;\r\n        const vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\r\n        const vy = vmetric[2] * widthAdvanceScale;\r\n        width = vmetric ? -vmetric[0] : width;\r\n        scaledX = vx / fontSizeScale;\r\n        scaledY = (x + vy) / fontSizeScale;\r\n      } else {\r\n        scaledX = x / fontSizeScale;\r\n        scaledY = 0;\r\n      }\r\n      if (font.remeasure && width > 0) {\r\n        const measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;\r\n        if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\r\n          const characterScaleX = width / measuredWidth;\r\n          restoreNeeded = true;\r\n          ctx.save();\r\n          ctx.scale(characterScaleX, 1);\r\n          scaledX /= characterScaleX;\r\n        } else if (width !== measuredWidth) {\r\n          scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;\r\n        }\r\n      }\r\n      if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\r\n        if (simpleFillText && !accent) {\r\n          ctx.fillText(character, scaledX, scaledY);\r\n        } else {\r\n          this.paintChar(character, scaledX, scaledY, patternTransform);\r\n          if (accent) {\r\n            const scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;\r\n            const scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;\r\n            this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform);\r\n          }\r\n        }\r\n      }\r\n      const charWidth = vertical ? width * widthAdvanceScale - spacing * fontDirection : width * widthAdvanceScale + spacing * fontDirection;\r\n      x += charWidth;\r\n      if (restoreNeeded) {\r\n        ctx.restore();\r\n      }\r\n    }\r\n    if (vertical) {\r\n      current.y -= x;\r\n    } else {\r\n      current.x += x * textHScale;\r\n    }\r\n    ctx.restore();\r\n    this.compose();\r\n    return undefined;\r\n  }\r\n  showType3Text(glyphs) {\r\n    const ctx = this.ctx;\r\n    const current = this.current;\r\n    const font = current.font;\r\n    const fontSize = current.fontSize;\r\n    const fontDirection = current.fontDirection;\r\n    const spacingDir = font.vertical ? 1 : -1;\r\n    const charSpacing = current.charSpacing;\r\n    const wordSpacing = current.wordSpacing;\r\n    const textHScale = current.textHScale * fontDirection;\r\n    const fontMatrix = current.fontMatrix || util.FONT_IDENTITY_MATRIX;\r\n    const glyphsLength = glyphs.length;\r\n    const isTextInvisible = current.textRenderingMode === util.TextRenderingMode.INVISIBLE;\r\n    let i, glyph, width, spacingLength;\r\n    if (isTextInvisible || fontSize === 0) {\r\n      return;\r\n    }\r\n    this._cachedScaleForStroking[0] = -1;\r\n    this._cachedGetSinglePixelWidth = null;\r\n    ctx.save();\r\n    ctx.transform(...current.textMatrix);\r\n    ctx.translate(current.x, current.y);\r\n    ctx.scale(textHScale, fontDirection);\r\n    for (i = 0; i < glyphsLength; ++i) {\r\n      glyph = glyphs[i];\r\n      if (typeof glyph === \"number\") {\r\n        spacingLength = spacingDir * glyph * fontSize / 1000;\r\n        this.ctx.translate(spacingLength, 0);\r\n        current.x += spacingLength * textHScale;\r\n        continue;\r\n      }\r\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\r\n      const operatorList = font.charProcOperatorList[glyph.operatorListId];\r\n      if (!operatorList) {\r\n        (0,util.warn)(`Type3 character \"${glyph.operatorListId}\" is not available.`);\r\n        continue;\r\n      }\r\n      if (this.contentVisible) {\r\n        this.processingType3 = glyph;\r\n        this.save();\r\n        ctx.scale(fontSize, fontSize);\r\n        ctx.transform(...fontMatrix);\r\n        this.executeOperatorList(operatorList);\r\n        this.restore();\r\n      }\r\n      const transformed = util.Util.applyTransform([glyph.width, 0], fontMatrix);\r\n      width = transformed[0] * fontSize + spacing;\r\n      ctx.translate(width, 0);\r\n      current.x += width * textHScale;\r\n    }\r\n    ctx.restore();\r\n    this.processingType3 = null;\r\n  }\r\n  setCharWidth(xWidth, yWidth) {}\r\n  setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\r\n    this.ctx.rect(llx, lly, urx - llx, ury - lly);\r\n    this.ctx.clip();\r\n    this.endPath();\r\n  }\r\n  getColorN_Pattern(IR) {\r\n    let pattern;\r\n    if (IR[0] === \"TilingPattern\") {\r\n      const color = IR[1];\r\n      const baseTransform = this.baseTransform || (0,display_utils.getCurrentTransform)(this.ctx);\r\n      const canvasGraphicsFactory = {\r\n        createCanvasGraphics: ctx => {\r\n          return new CanvasGraphics(ctx, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {\r\n            optionalContentConfig: this.optionalContentConfig,\r\n            markedContentStack: this.markedContentStack\r\n          });\r\n        }\r\n      };\r\n      pattern = new TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);\r\n    } else {\r\n      pattern = this._getPattern(IR[1], IR[2]);\r\n    }\r\n    return pattern;\r\n  }\r\n  setStrokeColorN() {\r\n    this.current.strokeColor = this.getColorN_Pattern(arguments);\r\n  }\r\n  setFillColorN() {\r\n    this.current.fillColor = this.getColorN_Pattern(arguments);\r\n    this.current.patternFill = true;\r\n  }\r\n  setStrokeRGBColor(r, g, b) {\r\n    const color = util.Util.makeHexColor(r, g, b);\r\n    this.ctx.strokeStyle = color;\r\n    this.current.strokeColor = color;\r\n  }\r\n  setFillRGBColor(r, g, b) {\r\n    const color = util.Util.makeHexColor(r, g, b);\r\n    this.ctx.fillStyle = color;\r\n    this.current.fillColor = color;\r\n    this.current.patternFill = false;\r\n  }\r\n  _getPattern(objId, matrix = null) {\r\n    let pattern;\r\n    if (this.cachedPatterns.has(objId)) {\r\n      pattern = this.cachedPatterns.get(objId);\r\n    } else {\r\n      pattern = getShadingPattern(this.getObject(objId));\r\n      this.cachedPatterns.set(objId, pattern);\r\n    }\r\n    if (matrix) {\r\n      pattern.matrix = matrix;\r\n    }\r\n    return pattern;\r\n  }\r\n  shadingFill(objId) {\r\n    if (!this.contentVisible) {\r\n      return;\r\n    }\r\n    const ctx = this.ctx;\r\n    this.save();\r\n    const pattern = this._getPattern(objId);\r\n    ctx.fillStyle = pattern.getPattern(ctx, this, (0,display_utils.getCurrentTransformInverse)(ctx), PathType.SHADING);\r\n    const inv = (0,display_utils.getCurrentTransformInverse)(ctx);\r\n    if (inv) {\r\n      const {\r\n        width,\r\n        height\r\n      } = ctx.canvas;\r\n      const [x0, y0, x1, y1] = util.Util.getAxialAlignedBoundingBox([0, 0, width, height], inv);\r\n      this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\r\n    } else {\r\n      this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\r\n    }\r\n    this.compose(this.current.getClippedPathBoundingBox());\r\n    this.restore();\r\n  }\r\n  beginInlineImage() {\r\n    (0,util.unreachable)(\"Should not call beginInlineImage\");\r\n  }\r\n  beginImageData() {\r\n    (0,util.unreachable)(\"Should not call beginImageData\");\r\n  }\r\n  paintFormXObjectBegin(matrix, bbox) {\r\n    if (!this.contentVisible) {\r\n      return;\r\n    }\r\n    this.save();\r\n    this.baseTransformStack.push(this.baseTransform);\r\n    if (Array.isArray(matrix) && matrix.length === 6) {\r\n      this.transform(...matrix);\r\n    }\r\n    this.baseTransform = (0,display_utils.getCurrentTransform)(this.ctx);\r\n    if (bbox) {\r\n      const width = bbox[2] - bbox[0];\r\n      const height = bbox[3] - bbox[1];\r\n      this.ctx.rect(bbox[0], bbox[1], width, height);\r\n      this.current.updateRectMinMax((0,display_utils.getCurrentTransform)(this.ctx), bbox);\r\n      this.clip();\r\n      this.endPath();\r\n    }\r\n  }\r\n  paintFormXObjectEnd() {\r\n    if (!this.contentVisible) {\r\n      return;\r\n    }\r\n    this.restore();\r\n    this.baseTransform = this.baseTransformStack.pop();\r\n  }\r\n  beginGroup(group) {\r\n    if (!this.contentVisible) {\r\n      return;\r\n    }\r\n    this.save();\r\n    if (this.inSMaskMode) {\r\n      this.endSMaskMode();\r\n      this.current.activeSMask = null;\r\n    }\r\n    const currentCtx = this.ctx;\r\n    if (!group.isolated) {\r\n      (0,util.info)(\"TODO: Support non-isolated groups.\");\r\n    }\r\n    if (group.knockout) {\r\n      (0,util.warn)(\"Knockout groups not supported.\");\r\n    }\r\n    const currentTransform = (0,display_utils.getCurrentTransform)(currentCtx);\r\n    if (group.matrix) {\r\n      currentCtx.transform(...group.matrix);\r\n    }\r\n    if (!group.bbox) {\r\n      throw new Error(\"Bounding box is required.\");\r\n    }\r\n    let bounds = util.Util.getAxialAlignedBoundingBox(group.bbox, (0,display_utils.getCurrentTransform)(currentCtx));\r\n    const canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];\r\n    bounds = util.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\r\n    const offsetX = Math.floor(bounds[0]);\r\n    const offsetY = Math.floor(bounds[1]);\r\n    let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\r\n    let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\r\n    let scaleX = 1,\r\n      scaleY = 1;\r\n    if (drawnWidth > MAX_GROUP_SIZE) {\r\n      scaleX = drawnWidth / MAX_GROUP_SIZE;\r\n      drawnWidth = MAX_GROUP_SIZE;\r\n    }\r\n    if (drawnHeight > MAX_GROUP_SIZE) {\r\n      scaleY = drawnHeight / MAX_GROUP_SIZE;\r\n      drawnHeight = MAX_GROUP_SIZE;\r\n    }\r\n    this.current.startNewPathAndClipBox([0, 0, drawnWidth, drawnHeight]);\r\n    let cacheId = \"groupAt\" + this.groupLevel;\r\n    if (group.smask) {\r\n      cacheId += \"_smask_\" + this.smaskCounter++ % 2;\r\n    }\r\n    const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight);\r\n    const groupCtx = scratchCanvas.context;\r\n    groupCtx.scale(1 / scaleX, 1 / scaleY);\r\n    groupCtx.translate(-offsetX, -offsetY);\r\n    groupCtx.transform(...currentTransform);\r\n    if (group.smask) {\r\n      this.smaskStack.push({\r\n        canvas: scratchCanvas.canvas,\r\n        context: groupCtx,\r\n        offsetX,\r\n        offsetY,\r\n        scaleX,\r\n        scaleY,\r\n        subtype: group.smask.subtype,\r\n        backdrop: group.smask.backdrop,\r\n        transferMap: group.smask.transferMap || null,\r\n        startTransformInverse: null\r\n      });\r\n    } else {\r\n      currentCtx.setTransform(1, 0, 0, 1, 0, 0);\r\n      currentCtx.translate(offsetX, offsetY);\r\n      currentCtx.scale(scaleX, scaleY);\r\n      currentCtx.save();\r\n    }\r\n    copyCtxState(currentCtx, groupCtx);\r\n    this.ctx = groupCtx;\r\n    this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\r\n    this.groupStack.push(currentCtx);\r\n    this.groupLevel++;\r\n  }\r\n  endGroup(group) {\r\n    if (!this.contentVisible) {\r\n      return;\r\n    }\r\n    this.groupLevel--;\r\n    const groupCtx = this.ctx;\r\n    const ctx = this.groupStack.pop();\r\n    this.ctx = ctx;\r\n    this.ctx.imageSmoothingEnabled = false;\r\n    if (group.smask) {\r\n      this.tempSMask = this.smaskStack.pop();\r\n      this.restore();\r\n    } else {\r\n      this.ctx.restore();\r\n      const currentMtx = (0,display_utils.getCurrentTransform)(this.ctx);\r\n      this.restore();\r\n      this.ctx.save();\r\n      this.ctx.setTransform(...currentMtx);\r\n      const dirtyBox = util.Util.getAxialAlignedBoundingBox([0, 0, groupCtx.canvas.width, groupCtx.canvas.height], currentMtx);\r\n      this.ctx.drawImage(groupCtx.canvas, 0, 0);\r\n      this.ctx.restore();\r\n      this.compose(dirtyBox);\r\n    }\r\n  }\r\n  beginAnnotation(id, rect, transform, matrix, hasOwnCanvas) {\r\n    this.#restoreInitialState();\r\n    resetCtxToDefault(this.ctx);\r\n    this.ctx.save();\r\n    this.save();\r\n    if (this.baseTransform) {\r\n      this.ctx.setTransform(...this.baseTransform);\r\n    }\r\n    if (Array.isArray(rect) && rect.length === 4) {\r\n      const width = rect[2] - rect[0];\r\n      const height = rect[3] - rect[1];\r\n      if (hasOwnCanvas && this.annotationCanvasMap) {\r\n        transform = transform.slice();\r\n        transform[4] -= rect[0];\r\n        transform[5] -= rect[1];\r\n        rect = rect.slice();\r\n        rect[0] = rect[1] = 0;\r\n        rect[2] = width;\r\n        rect[3] = height;\r\n        const [scaleX, scaleY] = util.Util.singularValueDecompose2dScale((0,display_utils.getCurrentTransform)(this.ctx));\r\n        const {\r\n          viewportScale\r\n        } = this;\r\n        const canvasWidth = Math.ceil(width * this.outputScaleX * viewportScale);\r\n        const canvasHeight = Math.ceil(height * this.outputScaleY * viewportScale);\r\n        this.annotationCanvas = this.canvasFactory.create(canvasWidth, canvasHeight);\r\n        const {\r\n          canvas,\r\n          context\r\n        } = this.annotationCanvas;\r\n        this.annotationCanvasMap.set(id, canvas);\r\n        this.annotationCanvas.savedCtx = this.ctx;\r\n        this.ctx = context;\r\n        this.ctx.save();\r\n        this.ctx.setTransform(scaleX, 0, 0, -scaleY, 0, height * scaleY);\r\n        resetCtxToDefault(this.ctx);\r\n      } else {\r\n        resetCtxToDefault(this.ctx);\r\n        this.ctx.rect(rect[0], rect[1], width, height);\r\n        this.ctx.clip();\r\n        this.endPath();\r\n      }\r\n    }\r\n    this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);\r\n    this.transform(...transform);\r\n    this.transform(...matrix);\r\n  }\r\n  endAnnotation() {\r\n    if (this.annotationCanvas) {\r\n      this.ctx.restore();\r\n      this.#drawFilter();\r\n      this.ctx = this.annotationCanvas.savedCtx;\r\n      delete this.annotationCanvas.savedCtx;\r\n      delete this.annotationCanvas;\r\n    }\r\n  }\r\n  paintImageMaskXObject(img) {\r\n    if (!this.contentVisible) {\r\n      return;\r\n    }\r\n    const count = img.count;\r\n    img = this.getObject(img.data, img);\r\n    img.count = count;\r\n    const ctx = this.ctx;\r\n    const glyph = this.processingType3;\r\n    if (glyph) {\r\n      if (glyph.compiled === undefined) {\r\n        glyph.compiled = compileType3Glyph(img);\r\n      }\r\n      if (glyph.compiled) {\r\n        glyph.compiled(ctx);\r\n        return;\r\n      }\r\n    }\r\n    const mask = this._createMaskCanvas(img);\r\n    const maskCanvas = mask.canvas;\r\n    ctx.save();\r\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n    ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);\r\n    ctx.restore();\r\n    this.compose();\r\n  }\r\n  paintImageMaskXObjectRepeat(img, scaleX, skewX = 0, skewY = 0, scaleY, positions) {\r\n    if (!this.contentVisible) {\r\n      return;\r\n    }\r\n    img = this.getObject(img.data, img);\r\n    const ctx = this.ctx;\r\n    ctx.save();\r\n    const currentTransform = (0,display_utils.getCurrentTransform)(ctx);\r\n    ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);\r\n    const mask = this._createMaskCanvas(img);\r\n    ctx.setTransform(1, 0, 0, 1, mask.offsetX - currentTransform[4], mask.offsetY - currentTransform[5]);\r\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\r\n      const trans = util.Util.transform(currentTransform, [scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]]);\r\n      const [x, y] = util.Util.applyTransform([0, 0], trans);\r\n      ctx.drawImage(mask.canvas, x, y);\r\n    }\r\n    ctx.restore();\r\n    this.compose();\r\n  }\r\n  paintImageMaskXObjectGroup(images) {\r\n    if (!this.contentVisible) {\r\n      return;\r\n    }\r\n    const ctx = this.ctx;\r\n    const fillColor = this.current.fillColor;\r\n    const isPatternFill = this.current.patternFill;\r\n    for (const image of images) {\r\n      const {\r\n        data,\r\n        width,\r\n        height,\r\n        transform\r\n      } = image;\r\n      const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\r\n      const maskCtx = maskCanvas.context;\r\n      maskCtx.save();\r\n      const img = this.getObject(data, image);\r\n      putBinaryImageMask(maskCtx, img);\r\n      maskCtx.globalCompositeOperation = \"source-in\";\r\n      maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this, (0,display_utils.getCurrentTransformInverse)(ctx), PathType.FILL) : fillColor;\r\n      maskCtx.fillRect(0, 0, width, height);\r\n      maskCtx.restore();\r\n      ctx.save();\r\n      ctx.transform(...transform);\r\n      ctx.scale(1, -1);\r\n      drawImageAtIntegerCoords(ctx, maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\r\n      ctx.restore();\r\n    }\r\n    this.compose();\r\n  }\r\n  paintImageXObject(objId) {\r\n    if (!this.contentVisible) {\r\n      return;\r\n    }\r\n    const imgData = this.getObject(objId);\r\n    if (!imgData) {\r\n      (0,util.warn)(\"Dependent image isn't ready yet\");\r\n      return;\r\n    }\r\n    this.paintInlineImageXObject(imgData);\r\n  }\r\n  paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\r\n    if (!this.contentVisible) {\r\n      return;\r\n    }\r\n    const imgData = this.getObject(objId);\r\n    if (!imgData) {\r\n      (0,util.warn)(\"Dependent image isn't ready yet\");\r\n      return;\r\n    }\r\n    const width = imgData.width;\r\n    const height = imgData.height;\r\n    const map = [];\r\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\r\n      map.push({\r\n        transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\r\n        x: 0,\r\n        y: 0,\r\n        w: width,\r\n        h: height\r\n      });\r\n    }\r\n    this.paintInlineImageXObjectGroup(imgData, map);\r\n  }\r\n  applyTransferMapsToCanvas(ctx) {\r\n    if (this.current.transferMaps !== \"none\") {\r\n      ctx.filter = this.current.transferMaps;\r\n      ctx.drawImage(ctx.canvas, 0, 0);\r\n      ctx.filter = \"none\";\r\n    }\r\n    return ctx.canvas;\r\n  }\r\n  applyTransferMapsToBitmap(imgData) {\r\n    if (this.current.transferMaps === \"none\") {\r\n      return imgData.bitmap;\r\n    }\r\n    const {\r\n      bitmap,\r\n      width,\r\n      height\r\n    } = imgData;\r\n    const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\r\n    const tmpCtx = tmpCanvas.context;\r\n    tmpCtx.filter = this.current.transferMaps;\r\n    tmpCtx.drawImage(bitmap, 0, 0);\r\n    tmpCtx.filter = \"none\";\r\n    return tmpCanvas.canvas;\r\n  }\r\n  paintInlineImageXObject(imgData) {\r\n    if (!this.contentVisible) {\r\n      return;\r\n    }\r\n    const width = imgData.width;\r\n    const height = imgData.height;\r\n    const ctx = this.ctx;\r\n    this.save();\r\n    if (!util.isNodeJS) {\r\n      const {\r\n        filter\r\n      } = ctx;\r\n      if (filter !== \"none\" && filter !== \"\") {\r\n        ctx.filter = \"none\";\r\n      }\r\n    }\r\n    ctx.scale(1 / width, -1 / height);\r\n    let imgToPaint;\r\n    if (imgData.bitmap) {\r\n      imgToPaint = this.applyTransferMapsToBitmap(imgData);\r\n    } else if (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement || !imgData.data) {\r\n      imgToPaint = imgData;\r\n    } else {\r\n      const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\r\n      const tmpCtx = tmpCanvas.context;\r\n      putBinaryImageData(tmpCtx, imgData);\r\n      imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);\r\n    }\r\n    const scaled = this._scaleImage(imgToPaint, (0,display_utils.getCurrentTransformInverse)(ctx));\r\n    ctx.imageSmoothingEnabled = getImageSmoothingEnabled((0,display_utils.getCurrentTransform)(ctx), imgData.interpolate);\r\n    drawImageAtIntegerCoords(ctx, scaled.img, 0, 0, scaled.paintWidth, scaled.paintHeight, 0, -height, width, height);\r\n    this.compose();\r\n    this.restore();\r\n  }\r\n  paintInlineImageXObjectGroup(imgData, map) {\r\n    if (!this.contentVisible) {\r\n      return;\r\n    }\r\n    const ctx = this.ctx;\r\n    let imgToPaint;\r\n    if (imgData.bitmap) {\r\n      imgToPaint = imgData.bitmap;\r\n    } else {\r\n      const w = imgData.width;\r\n      const h = imgData.height;\r\n      const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\r\n      const tmpCtx = tmpCanvas.context;\r\n      putBinaryImageData(tmpCtx, imgData);\r\n      imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);\r\n    }\r\n    for (const entry of map) {\r\n      ctx.save();\r\n      ctx.transform(...entry.transform);\r\n      ctx.scale(1, -1);\r\n      drawImageAtIntegerCoords(ctx, imgToPaint, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);\r\n      ctx.restore();\r\n    }\r\n    this.compose();\r\n  }\r\n  paintSolidColorImageMask() {\r\n    if (!this.contentVisible) {\r\n      return;\r\n    }\r\n    this.ctx.fillRect(0, 0, 1, 1);\r\n    this.compose();\r\n  }\r\n  markPoint(tag) {}\r\n  markPointProps(tag, properties) {}\r\n  beginMarkedContent(tag) {\r\n    this.markedContentStack.push({\r\n      visible: true\r\n    });\r\n  }\r\n  beginMarkedContentProps(tag, properties) {\r\n    if (tag === \"OC\") {\r\n      this.markedContentStack.push({\r\n        visible: this.optionalContentConfig.isVisible(properties)\r\n      });\r\n    } else {\r\n      this.markedContentStack.push({\r\n        visible: true\r\n      });\r\n    }\r\n    this.contentVisible = this.isContentVisible();\r\n  }\r\n  endMarkedContent() {\r\n    this.markedContentStack.pop();\r\n    this.contentVisible = this.isContentVisible();\r\n  }\r\n  beginCompat() {}\r\n  endCompat() {}\r\n  consumePath(clipBox) {\r\n    const isEmpty = this.current.isEmptyClip();\r\n    if (this.pendingClip) {\r\n      this.current.updateClipFromPath();\r\n    }\r\n    if (!this.pendingClip) {\r\n      this.compose(clipBox);\r\n    }\r\n    const ctx = this.ctx;\r\n    if (this.pendingClip) {\r\n      if (!isEmpty) {\r\n        if (this.pendingClip === EO_CLIP) {\r\n          ctx.clip(\"evenodd\");\r\n        } else {\r\n          ctx.clip();\r\n        }\r\n      }\r\n      this.pendingClip = null;\r\n    }\r\n    this.current.startNewPathAndClipBox(this.current.clipBox);\r\n    ctx.beginPath();\r\n  }\r\n  getSinglePixelWidth() {\r\n    if (!this._cachedGetSinglePixelWidth) {\r\n      const m = (0,display_utils.getCurrentTransform)(this.ctx);\r\n      if (m[1] === 0 && m[2] === 0) {\r\n        this._cachedGetSinglePixelWidth = 1 / Math.min(Math.abs(m[0]), Math.abs(m[3]));\r\n      } else {\r\n        const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\r\n        const normX = Math.hypot(m[0], m[2]);\r\n        const normY = Math.hypot(m[1], m[3]);\r\n        this._cachedGetSinglePixelWidth = Math.max(normX, normY) / absDet;\r\n      }\r\n    }\r\n    return this._cachedGetSinglePixelWidth;\r\n  }\r\n  getScaleForStroking() {\r\n    if (this._cachedScaleForStroking[0] === -1) {\r\n      const {\r\n        lineWidth\r\n      } = this.current;\r\n      const {\r\n        a,\r\n        b,\r\n        c,\r\n        d\r\n      } = this.ctx.getTransform();\r\n      let scaleX, scaleY;\r\n      if (b === 0 && c === 0) {\r\n        const normX = Math.abs(a);\r\n        const normY = Math.abs(d);\r\n        if (normX === normY) {\r\n          if (lineWidth === 0) {\r\n            scaleX = scaleY = 1 / normX;\r\n          } else {\r\n            const scaledLineWidth = normX * lineWidth;\r\n            scaleX = scaleY = scaledLineWidth < 1 ? 1 / scaledLineWidth : 1;\r\n          }\r\n        } else if (lineWidth === 0) {\r\n          scaleX = 1 / normX;\r\n          scaleY = 1 / normY;\r\n        } else {\r\n          const scaledXLineWidth = normX * lineWidth;\r\n          const scaledYLineWidth = normY * lineWidth;\r\n          scaleX = scaledXLineWidth < 1 ? 1 / scaledXLineWidth : 1;\r\n          scaleY = scaledYLineWidth < 1 ? 1 / scaledYLineWidth : 1;\r\n        }\r\n      } else {\r\n        const absDet = Math.abs(a * d - b * c);\r\n        const normX = Math.hypot(a, b);\r\n        const normY = Math.hypot(c, d);\r\n        if (lineWidth === 0) {\r\n          scaleX = normY / absDet;\r\n          scaleY = normX / absDet;\r\n        } else {\r\n          const baseArea = lineWidth * absDet;\r\n          scaleX = normY > baseArea ? normY / baseArea : 1;\r\n          scaleY = normX > baseArea ? normX / baseArea : 1;\r\n        }\r\n      }\r\n      this._cachedScaleForStroking[0] = scaleX;\r\n      this._cachedScaleForStroking[1] = scaleY;\r\n    }\r\n    return this._cachedScaleForStroking;\r\n  }\r\n  rescaleAndStroke(saveRestore) {\r\n    const {\r\n      ctx\r\n    } = this;\r\n    const {\r\n      lineWidth\r\n    } = this.current;\r\n    const [scaleX, scaleY] = this.getScaleForStroking();\r\n    ctx.lineWidth = lineWidth || 1;\r\n    if (scaleX === 1 && scaleY === 1) {\r\n      ctx.stroke();\r\n      return;\r\n    }\r\n    const dashes = ctx.getLineDash();\r\n    if (saveRestore) {\r\n      ctx.save();\r\n    }\r\n    ctx.scale(scaleX, scaleY);\r\n    if (dashes.length > 0) {\r\n      const scale = Math.max(scaleX, scaleY);\r\n      ctx.setLineDash(dashes.map(x => x / scale));\r\n      ctx.lineDashOffset /= scale;\r\n    }\r\n    ctx.stroke();\r\n    if (saveRestore) {\r\n      ctx.restore();\r\n    }\r\n  }\r\n  isContentVisible() {\r\n    for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\r\n      if (!this.markedContentStack[i].visible) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\nfor (const op in util.OPS) {\r\n  if (CanvasGraphics.prototype[op] !== undefined) {\r\n    CanvasGraphics.prototype[util.OPS[op]] = CanvasGraphics.prototype[op];\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 473:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_254796__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_254796__.d(__nested_webpack_exports__, {\r\n/* harmony export */   DOMCMapReaderFactory: () => (/* binding */ DOMCMapReaderFactory),\r\n/* harmony export */   DOMCanvasFactory: () => (/* binding */ DOMCanvasFactory),\r\n/* harmony export */   DOMFilterFactory: () => (/* binding */ DOMFilterFactory),\r\n/* harmony export */   DOMSVGFactory: () => (/* binding */ DOMSVGFactory),\r\n/* harmony export */   DOMStandardFontDataFactory: () => (/* binding */ DOMStandardFontDataFactory),\r\n/* harmony export */   PDFDateString: () => (/* binding */ PDFDateString),\r\n/* harmony export */   PageViewport: () => (/* binding */ PageViewport),\r\n/* harmony export */   PixelsPerInch: () => (/* binding */ PixelsPerInch),\r\n/* harmony export */   RenderingCancelledException: () => (/* binding */ RenderingCancelledException),\r\n/* harmony export */   StatTimer: () => (/* binding */ StatTimer),\r\n/* harmony export */   fetchData: () => (/* binding */ fetchData),\r\n/* harmony export */   getColorValues: () => (/* binding */ getColorValues),\r\n/* harmony export */   getCurrentTransform: () => (/* binding */ getCurrentTransform),\r\n/* harmony export */   getCurrentTransformInverse: () => (/* binding */ getCurrentTransformInverse),\r\n/* harmony export */   getFilenameFromUrl: () => (/* binding */ getFilenameFromUrl),\r\n/* harmony export */   getPdfFilenameFromUrl: () => (/* binding */ getPdfFilenameFromUrl),\r\n/* harmony export */   getRGB: () => (/* binding */ getRGB),\r\n/* harmony export */   getXfaPageViewport: () => (/* binding */ getXfaPageViewport),\r\n/* harmony export */   isDataScheme: () => (/* binding */ isDataScheme),\r\n/* harmony export */   isPdfFile: () => (/* binding */ isPdfFile),\r\n/* harmony export */   isValidFetchUrl: () => (/* binding */ isValidFetchUrl),\r\n/* harmony export */   noContextMenu: () => (/* binding */ noContextMenu),\r\n/* harmony export */   setLayerDimensions: () => (/* binding */ setLayerDimensions)\r\n/* harmony export */ });\r\n/* unused harmony export deprecated */\r\n/* harmony import */ var _base_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_254796__(822);\r\n/* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_254796__(266);\r\n\r\n\r\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\r\nclass PixelsPerInch {\r\n  static CSS = 96.0;\r\n  static PDF = 72.0;\r\n  static PDF_TO_CSS_UNITS = this.CSS / this.PDF;\r\n}\r\nclass DOMFilterFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseFilterFactory {\r\n  #_cache;\r\n  #_defs;\r\n  #docId;\r\n  #document;\r\n  #hcmFilter;\r\n  #hcmKey;\r\n  #hcmUrl;\r\n  #hcmHighlightFilter;\r\n  #hcmHighlightKey;\r\n  #hcmHighlightUrl;\r\n  #id = 0;\r\n  constructor({\r\n    docId,\r\n    ownerDocument = globalThis.document\r\n  } = {}) {\r\n    super();\r\n    this.#docId = docId;\r\n    this.#document = ownerDocument;\r\n  }\r\n  get #cache() {\r\n    return this.#_cache ||= new Map();\r\n  }\r\n  get #defs() {\r\n    if (!this.#_defs) {\r\n      const div = this.#document.createElement(\"div\");\r\n      const {\r\n        style\r\n      } = div;\r\n      style.visibility = \"hidden\";\r\n      style.contain = \"strict\";\r\n      style.width = style.height = 0;\r\n      style.position = \"absolute\";\r\n      style.top = style.left = 0;\r\n      style.zIndex = -1;\r\n      const svg = this.#document.createElementNS(SVG_NS, \"svg\");\r\n      svg.setAttribute(\"width\", 0);\r\n      svg.setAttribute(\"height\", 0);\r\n      this.#_defs = this.#document.createElementNS(SVG_NS, \"defs\");\r\n      div.append(svg);\r\n      svg.append(this.#_defs);\r\n      this.#document.body.append(div);\r\n    }\r\n    return this.#_defs;\r\n  }\r\n  addFilter(maps) {\r\n    if (!maps) {\r\n      return \"none\";\r\n    }\r\n    let value = this.#cache.get(maps);\r\n    if (value) {\r\n      return value;\r\n    }\r\n    let tableR, tableG, tableB, key;\r\n    if (maps.length === 1) {\r\n      const mapR = maps[0];\r\n      const buffer = new Array(256);\r\n      for (let i = 0; i < 256; i++) {\r\n        buffer[i] = mapR[i] / 255;\r\n      }\r\n      key = tableR = tableG = tableB = buffer.join(\",\");\r\n    } else {\r\n      const [mapR, mapG, mapB] = maps;\r\n      const bufferR = new Array(256);\r\n      const bufferG = new Array(256);\r\n      const bufferB = new Array(256);\r\n      for (let i = 0; i < 256; i++) {\r\n        bufferR[i] = mapR[i] / 255;\r\n        bufferG[i] = mapG[i] / 255;\r\n        bufferB[i] = mapB[i] / 255;\r\n      }\r\n      tableR = bufferR.join(\",\");\r\n      tableG = bufferG.join(\",\");\r\n      tableB = bufferB.join(\",\");\r\n      key = `${tableR}${tableG}${tableB}`;\r\n    }\r\n    value = this.#cache.get(key);\r\n    if (value) {\r\n      this.#cache.set(maps, value);\r\n      return value;\r\n    }\r\n    const id = `g_${this.#docId}_transfer_map_${this.#id++}`;\r\n    const url = `url(#${id})`;\r\n    this.#cache.set(maps, url);\r\n    this.#cache.set(key, url);\r\n    const filter = this.#createFilter(id);\r\n    this.#addTransferMapConversion(tableR, tableG, tableB, filter);\r\n    return url;\r\n  }\r\n  addHCMFilter(fgColor, bgColor) {\r\n    const key = `${fgColor}-${bgColor}`;\r\n    if (this.#hcmKey === key) {\r\n      return this.#hcmUrl;\r\n    }\r\n    this.#hcmKey = key;\r\n    this.#hcmUrl = \"none\";\r\n    this.#hcmFilter?.remove();\r\n    if (!fgColor || !bgColor) {\r\n      return this.#hcmUrl;\r\n    }\r\n    const fgRGB = this.#getRGB(fgColor);\r\n    fgColor = _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util.makeHexColor(...fgRGB);\r\n    const bgRGB = this.#getRGB(bgColor);\r\n    bgColor = _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util.makeHexColor(...bgRGB);\r\n    this.#defs.style.color = \"\";\r\n    if (fgColor === \"#000000\" && bgColor === \"#ffffff\" || fgColor === bgColor) {\r\n      return this.#hcmUrl;\r\n    }\r\n    const map = new Array(256);\r\n    for (let i = 0; i <= 255; i++) {\r\n      const x = i / 255;\r\n      map[i] = x <= 0.03928 ? x / 12.92 : ((x + 0.055) / 1.055) ** 2.4;\r\n    }\r\n    const table = map.join(\",\");\r\n    const id = `g_${this.#docId}_hcm_filter`;\r\n    const filter = this.#hcmHighlightFilter = this.#createFilter(id);\r\n    this.#addTransferMapConversion(table, table, table, filter);\r\n    this.#addGrayConversion(filter);\r\n    const getSteps = (c, n) => {\r\n      const start = fgRGB[c] / 255;\r\n      const end = bgRGB[c] / 255;\r\n      const arr = new Array(n + 1);\r\n      for (let i = 0; i <= n; i++) {\r\n        arr[i] = start + i / n * (end - start);\r\n      }\r\n      return arr.join(\",\");\r\n    };\r\n    this.#addTransferMapConversion(getSteps(0, 5), getSteps(1, 5), getSteps(2, 5), filter);\r\n    this.#hcmUrl = `url(#${id})`;\r\n    return this.#hcmUrl;\r\n  }\r\n  addHighlightHCMFilter(fgColor, bgColor, newFgColor, newBgColor) {\r\n    const key = `${fgColor}-${bgColor}-${newFgColor}-${newBgColor}`;\r\n    if (this.#hcmHighlightKey === key) {\r\n      return this.#hcmHighlightUrl;\r\n    }\r\n    this.#hcmHighlightKey = key;\r\n    this.#hcmHighlightUrl = \"none\";\r\n    this.#hcmHighlightFilter?.remove();\r\n    if (!fgColor || !bgColor) {\r\n      return this.#hcmHighlightUrl;\r\n    }\r\n    const [fgRGB, bgRGB] = [fgColor, bgColor].map(this.#getRGB.bind(this));\r\n    let fgGray = Math.round(0.2126 * fgRGB[0] + 0.7152 * fgRGB[1] + 0.0722 * fgRGB[2]);\r\n    let bgGray = Math.round(0.2126 * bgRGB[0] + 0.7152 * bgRGB[1] + 0.0722 * bgRGB[2]);\r\n    let [newFgRGB, newBgRGB] = [newFgColor, newBgColor].map(this.#getRGB.bind(this));\r\n    if (bgGray < fgGray) {\r\n      [fgGray, bgGray, newFgRGB, newBgRGB] = [bgGray, fgGray, newBgRGB, newFgRGB];\r\n    }\r\n    this.#defs.style.color = \"\";\r\n    const getSteps = (fg, bg, n) => {\r\n      const arr = new Array(256);\r\n      const step = (bgGray - fgGray) / n;\r\n      const newStart = fg / 255;\r\n      const newStep = (bg - fg) / (255 * n);\r\n      let prev = 0;\r\n      for (let i = 0; i <= n; i++) {\r\n        const k = Math.round(fgGray + i * step);\r\n        const value = newStart + i * newStep;\r\n        for (let j = prev; j <= k; j++) {\r\n          arr[j] = value;\r\n        }\r\n        prev = k + 1;\r\n      }\r\n      for (let i = prev; i < 256; i++) {\r\n        arr[i] = arr[prev - 1];\r\n      }\r\n      return arr.join(\",\");\r\n    };\r\n    const id = `g_${this.#docId}_hcm_highlight_filter`;\r\n    const filter = this.#hcmHighlightFilter = this.#createFilter(id);\r\n    this.#addGrayConversion(filter);\r\n    this.#addTransferMapConversion(getSteps(newFgRGB[0], newBgRGB[0], 5), getSteps(newFgRGB[1], newBgRGB[1], 5), getSteps(newFgRGB[2], newBgRGB[2], 5), filter);\r\n    this.#hcmHighlightUrl = `url(#${id})`;\r\n    return this.#hcmHighlightUrl;\r\n  }\r\n  destroy(keepHCM = false) {\r\n    if (keepHCM && (this.#hcmUrl || this.#hcmHighlightUrl)) {\r\n      return;\r\n    }\r\n    if (this.#_defs) {\r\n      this.#_defs.parentNode.parentNode.remove();\r\n      this.#_defs = null;\r\n    }\r\n    if (this.#_cache) {\r\n      this.#_cache.clear();\r\n      this.#_cache = null;\r\n    }\r\n    this.#id = 0;\r\n  }\r\n  #addGrayConversion(filter) {\r\n    const feColorMatrix = this.#document.createElementNS(SVG_NS, \"feColorMatrix\");\r\n    feColorMatrix.setAttribute(\"type\", \"matrix\");\r\n    feColorMatrix.setAttribute(\"values\", \"0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0\");\r\n    filter.append(feColorMatrix);\r\n  }\r\n  #createFilter(id) {\r\n    const filter = this.#document.createElementNS(SVG_NS, \"filter\");\r\n    filter.setAttribute(\"color-interpolation-filters\", \"sRGB\");\r\n    filter.setAttribute(\"id\", id);\r\n    this.#defs.append(filter);\r\n    return filter;\r\n  }\r\n  #appendFeFunc(feComponentTransfer, func, table) {\r\n    const feFunc = this.#document.createElementNS(SVG_NS, func);\r\n    feFunc.setAttribute(\"type\", \"discrete\");\r\n    feFunc.setAttribute(\"tableValues\", table);\r\n    feComponentTransfer.append(feFunc);\r\n  }\r\n  #addTransferMapConversion(rTable, gTable, bTable, filter) {\r\n    const feComponentTransfer = this.#document.createElementNS(SVG_NS, \"feComponentTransfer\");\r\n    filter.append(feComponentTransfer);\r\n    this.#appendFeFunc(feComponentTransfer, \"feFuncR\", rTable);\r\n    this.#appendFeFunc(feComponentTransfer, \"feFuncG\", gTable);\r\n    this.#appendFeFunc(feComponentTransfer, \"feFuncB\", bTable);\r\n  }\r\n  #getRGB(color) {\r\n    this.#defs.style.color = color;\r\n    return getRGB(getComputedStyle(this.#defs).getPropertyValue(\"color\"));\r\n  }\r\n}\r\nclass DOMCanvasFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseCanvasFactory {\r\n  constructor({\r\n    ownerDocument = globalThis.document\r\n  } = {}) {\r\n    super();\r\n    this._document = ownerDocument;\r\n  }\r\n  _createCanvas(width, height) {\r\n    const canvas = this._document.createElement(\"canvas\");\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    return canvas;\r\n  }\r\n}\r\nasync function fetchData(url, type = \"text\") {\r\n  if (isValidFetchUrl(url, document.baseURI)) {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(response.statusText);\r\n    }\r\n    switch (type) {\r\n      case \"arraybuffer\":\r\n        return response.arrayBuffer();\r\n      case \"blob\":\r\n        return response.blob();\r\n      case \"json\":\r\n        return response.json();\r\n    }\r\n    return response.text();\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    const request = new XMLHttpRequest();\r\n    request.open(\"GET\", url, true);\r\n    request.responseType = type;\r\n    request.onreadystatechange = () => {\r\n      if (request.readyState !== XMLHttpRequest.DONE) {\r\n        return;\r\n      }\r\n      if (request.status === 200 || request.status === 0) {\r\n        let data;\r\n        switch (type) {\r\n          case \"arraybuffer\":\r\n          case \"blob\":\r\n          case \"json\":\r\n            data = request.response;\r\n            break;\r\n          default:\r\n            data = request.responseText;\r\n            break;\r\n        }\r\n        if (data) {\r\n          resolve(data);\r\n          return;\r\n        }\r\n      }\r\n      reject(new Error(request.statusText));\r\n    };\r\n    request.send(null);\r\n  });\r\n}\r\nclass DOMCMapReaderFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseCMapReaderFactory {\r\n  _fetchData(url, compressionType) {\r\n    return fetchData(url, this.isCompressed ? \"arraybuffer\" : \"text\").then(data => {\r\n      return {\r\n        cMapData: data instanceof ArrayBuffer ? new Uint8Array(data) : (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_1__.stringToBytes)(data),\r\n        compressionType\r\n      };\r\n    });\r\n  }\r\n}\r\nclass DOMStandardFontDataFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseStandardFontDataFactory {\r\n  _fetchData(url) {\r\n    return fetchData(url, \"arraybuffer\").then(data => {\r\n      return new Uint8Array(data);\r\n    });\r\n  }\r\n}\r\nclass DOMSVGFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseSVGFactory {\r\n  _createSVG(type) {\r\n    return document.createElementNS(SVG_NS, type);\r\n  }\r\n}\r\nclass PageViewport {\r\n  constructor({\r\n    viewBox,\r\n    scale,\r\n    rotation,\r\n    offsetX = 0,\r\n    offsetY = 0,\r\n    dontFlip = false\r\n  }) {\r\n    this.viewBox = viewBox;\r\n    this.scale = scale;\r\n    this.rotation = rotation;\r\n    this.offsetX = offsetX;\r\n    this.offsetY = offsetY;\r\n    const centerX = (viewBox[2] + viewBox[0]) / 2;\r\n    const centerY = (viewBox[3] + viewBox[1]) / 2;\r\n    let rotateA, rotateB, rotateC, rotateD;\r\n    rotation %= 360;\r\n    if (rotation < 0) {\r\n      rotation += 360;\r\n    }\r\n    switch (rotation) {\r\n      case 180:\r\n        rotateA = -1;\r\n        rotateB = 0;\r\n        rotateC = 0;\r\n        rotateD = 1;\r\n        break;\r\n      case 90:\r\n        rotateA = 0;\r\n        rotateB = 1;\r\n        rotateC = 1;\r\n        rotateD = 0;\r\n        break;\r\n      case 270:\r\n        rotateA = 0;\r\n        rotateB = -1;\r\n        rotateC = -1;\r\n        rotateD = 0;\r\n        break;\r\n      case 0:\r\n        rotateA = 1;\r\n        rotateB = 0;\r\n        rotateC = 0;\r\n        rotateD = -1;\r\n        break;\r\n      default:\r\n        throw new Error(\"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\");\r\n    }\r\n    if (dontFlip) {\r\n      rotateC = -rotateC;\r\n      rotateD = -rotateD;\r\n    }\r\n    let offsetCanvasX, offsetCanvasY;\r\n    let width, height;\r\n    if (rotateA === 0) {\r\n      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\r\n      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\r\n      width = (viewBox[3] - viewBox[1]) * scale;\r\n      height = (viewBox[2] - viewBox[0]) * scale;\r\n    } else {\r\n      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\r\n      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\r\n      width = (viewBox[2] - viewBox[0]) * scale;\r\n      height = (viewBox[3] - viewBox[1]) * scale;\r\n    }\r\n    this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];\r\n    this.width = width;\r\n    this.height = height;\r\n  }\r\n  get rawDims() {\r\n    const {\r\n      viewBox\r\n    } = this;\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_1__.shadow)(this, \"rawDims\", {\r\n      pageWidth: viewBox[2] - viewBox[0],\r\n      pageHeight: viewBox[3] - viewBox[1],\r\n      pageX: viewBox[0],\r\n      pageY: viewBox[1]\r\n    });\r\n  }\r\n  clone({\r\n    scale = this.scale,\r\n    rotation = this.rotation,\r\n    offsetX = this.offsetX,\r\n    offsetY = this.offsetY,\r\n    dontFlip = false\r\n  } = {}) {\r\n    return new PageViewport({\r\n      viewBox: this.viewBox.slice(),\r\n      scale,\r\n      rotation,\r\n      offsetX,\r\n      offsetY,\r\n      dontFlip\r\n    });\r\n  }\r\n  convertToViewportPoint(x, y) {\r\n    return _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util.applyTransform([x, y], this.transform);\r\n  }\r\n  convertToViewportRectangle(rect) {\r\n    const topLeft = _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util.applyTransform([rect[0], rect[1]], this.transform);\r\n    const bottomRight = _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util.applyTransform([rect[2], rect[3]], this.transform);\r\n    return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\r\n  }\r\n  convertToPdfPoint(x, y) {\r\n    return _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util.applyInverseTransform([x, y], this.transform);\r\n  }\r\n}\r\nclass RenderingCancelledException extends _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.BaseException {\r\n  constructor(msg, extraDelay = 0) {\r\n    super(msg, \"RenderingCancelledException\");\r\n    this.extraDelay = extraDelay;\r\n  }\r\n}\r\nfunction isDataScheme(url) {\r\n  const ii = url.length;\r\n  let i = 0;\r\n  while (i < ii && url[i].trim() === \"\") {\r\n    i++;\r\n  }\r\n  return url.substring(i, i + 5).toLowerCase() === \"data:\";\r\n}\r\nfunction isPdfFile(filename) {\r\n  return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\r\n}\r\nfunction getFilenameFromUrl(url, onlyStripPath = false) {\r\n  if (!onlyStripPath) {\r\n    [url] = url.split(/[#?]/, 1);\r\n  }\r\n  return url.substring(url.lastIndexOf(\"/\") + 1);\r\n}\r\nfunction getPdfFilenameFromUrl(url, defaultFilename = \"document.pdf\") {\r\n  if (typeof url !== \"string\") {\r\n    return defaultFilename;\r\n  }\r\n  if (isDataScheme(url)) {\r\n    (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_1__.warn)('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\r\n    return defaultFilename;\r\n  }\r\n  const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\r\n  const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\r\n  const splitURI = reURI.exec(url);\r\n  let suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);\r\n  if (suggestedFilename) {\r\n    suggestedFilename = suggestedFilename[0];\r\n    if (suggestedFilename.includes(\"%\")) {\r\n      try {\r\n        suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];\r\n      } catch {}\r\n    }\r\n  }\r\n  return suggestedFilename || defaultFilename;\r\n}\r\nclass StatTimer {\r\n  started = Object.create(null);\r\n  times = [];\r\n  time(name) {\r\n    if (name in this.started) {\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_1__.warn)(`Timer is already running for ${name}`);\r\n    }\r\n    this.started[name] = Date.now();\r\n  }\r\n  timeEnd(name) {\r\n    if (!(name in this.started)) {\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_1__.warn)(`Timer has not been started for ${name}`);\r\n    }\r\n    this.times.push({\r\n      name,\r\n      start: this.started[name],\r\n      end: Date.now()\r\n    });\r\n    delete this.started[name];\r\n  }\r\n  toString() {\r\n    const outBuf = [];\r\n    let longest = 0;\r\n    for (const {\r\n      name\r\n    } of this.times) {\r\n      longest = Math.max(name.length, longest);\r\n    }\r\n    for (const {\r\n      name,\r\n      start,\r\n      end\r\n    } of this.times) {\r\n      outBuf.push(`${name.padEnd(longest)} ${end - start}ms\\n`);\r\n    }\r\n    return outBuf.join(\"\");\r\n  }\r\n}\r\nfunction isValidFetchUrl(url, baseUrl) {\r\n  try {\r\n    const {\r\n      protocol\r\n    } = baseUrl ? new URL(url, baseUrl) : new URL(url);\r\n    return protocol === \"http:\" || protocol === \"https:\";\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\nfunction noContextMenu(e) {\r\n  e.preventDefault();\r\n}\r\nfunction deprecated(details) {\r\n  console.log(\"Deprecated API usage: \" + details);\r\n}\r\nlet pdfDateStringRegex;\r\nclass PDFDateString {\r\n  static toDateObject(input) {\r\n    if (!input || typeof input !== \"string\") {\r\n      return null;\r\n    }\r\n    pdfDateStringRegex ||= new RegExp(\"^D:\" + \"(\\\\d{4})\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"([Z|+|-])?\" + \"(\\\\d{2})?\" + \"'?\" + \"(\\\\d{2})?\" + \"'?\");\r\n    const matches = pdfDateStringRegex.exec(input);\r\n    if (!matches) {\r\n      return null;\r\n    }\r\n    const year = parseInt(matches[1], 10);\r\n    let month = parseInt(matches[2], 10);\r\n    month = month >= 1 && month <= 12 ? month - 1 : 0;\r\n    let day = parseInt(matches[3], 10);\r\n    day = day >= 1 && day <= 31 ? day : 1;\r\n    let hour = parseInt(matches[4], 10);\r\n    hour = hour >= 0 && hour <= 23 ? hour : 0;\r\n    let minute = parseInt(matches[5], 10);\r\n    minute = minute >= 0 && minute <= 59 ? minute : 0;\r\n    let second = parseInt(matches[6], 10);\r\n    second = second >= 0 && second <= 59 ? second : 0;\r\n    const universalTimeRelation = matches[7] || \"Z\";\r\n    let offsetHour = parseInt(matches[8], 10);\r\n    offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\r\n    let offsetMinute = parseInt(matches[9], 10) || 0;\r\n    offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\r\n    if (universalTimeRelation === \"-\") {\r\n      hour += offsetHour;\r\n      minute += offsetMinute;\r\n    } else if (universalTimeRelation === \"+\") {\r\n      hour -= offsetHour;\r\n      minute -= offsetMinute;\r\n    }\r\n    return new Date(Date.UTC(year, month, day, hour, minute, second));\r\n  }\r\n}\r\nfunction getXfaPageViewport(xfaPage, {\r\n  scale = 1,\r\n  rotation = 0\r\n}) {\r\n  const {\r\n    width,\r\n    height\r\n  } = xfaPage.attributes.style;\r\n  const viewBox = [0, 0, parseInt(width), parseInt(height)];\r\n  return new PageViewport({\r\n    viewBox,\r\n    scale,\r\n    rotation\r\n  });\r\n}\r\nfunction getRGB(color) {\r\n  if (color.startsWith(\"#\")) {\r\n    const colorRGB = parseInt(color.slice(1), 16);\r\n    return [(colorRGB & 0xff0000) >> 16, (colorRGB & 0x00ff00) >> 8, colorRGB & 0x0000ff];\r\n  }\r\n  if (color.startsWith(\"rgb(\")) {\r\n    return color.slice(4, -1).split(\",\").map(x => parseInt(x));\r\n  }\r\n  if (color.startsWith(\"rgba(\")) {\r\n    return color.slice(5, -1).split(\",\").map(x => parseInt(x)).slice(0, 3);\r\n  }\r\n  (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_1__.warn)(`Not a valid color format: \"${color}\"`);\r\n  return [0, 0, 0];\r\n}\r\nfunction getColorValues(colors) {\r\n  const span = document.createElement(\"span\");\r\n  span.style.visibility = \"hidden\";\r\n  document.body.append(span);\r\n  for (const name of colors.keys()) {\r\n    span.style.color = name;\r\n    const computedColor = window.getComputedStyle(span).color;\r\n    colors.set(name, getRGB(computedColor));\r\n  }\r\n  span.remove();\r\n}\r\nfunction getCurrentTransform(ctx) {\r\n  const {\r\n    a,\r\n    b,\r\n    c,\r\n    d,\r\n    e,\r\n    f\r\n  } = ctx.getTransform();\r\n  return [a, b, c, d, e, f];\r\n}\r\nfunction getCurrentTransformInverse(ctx) {\r\n  const {\r\n    a,\r\n    b,\r\n    c,\r\n    d,\r\n    e,\r\n    f\r\n  } = ctx.getTransform().invertSelf();\r\n  return [a, b, c, d, e, f];\r\n}\r\nfunction setLayerDimensions(div, viewport, mustFlip = false, mustRotate = true) {\r\n  if (viewport instanceof PageViewport) {\r\n    const {\r\n      pageWidth,\r\n      pageHeight\r\n    } = viewport.rawDims;\r\n    const {\r\n      style\r\n    } = div;\r\n    const useRound = _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.FeatureTest.isCSSRoundSupported;\r\n    const w = `var(--scale-factor) * ${pageWidth}px`,\r\n      h = `var(--scale-factor) * ${pageHeight}px`;\r\n    const widthStr = useRound ? `round(${w}, 1px)` : `calc(${w})`,\r\n      heightStr = useRound ? `round(${h}, 1px)` : `calc(${h})`;\r\n    if (!mustFlip || viewport.rotation % 180 === 0) {\r\n      style.width = widthStr;\r\n      style.height = heightStr;\r\n    } else {\r\n      style.width = heightStr;\r\n      style.height = widthStr;\r\n    }\r\n  }\r\n  if (mustRotate) {\r\n    div.setAttribute(\"data-main-rotation\", viewport.rotation);\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 423:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_277838__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_277838__.d(__nested_webpack_exports__, {\r\n/* harmony export */   DrawLayer: () => (/* binding */ DrawLayer)\r\n/* harmony export */ });\r\n/* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_277838__(473);\r\n/* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_277838__(266);\r\n\r\n\r\nclass DrawLayer {\r\n  #parent = null;\r\n  #id = 0;\r\n  #mapping = new Map();\r\n  constructor({\r\n    pageIndex\r\n  }) {\r\n    this.pageIndex = pageIndex;\r\n  }\r\n  setParent(parent) {\r\n    if (!this.#parent) {\r\n      this.#parent = parent;\r\n      return;\r\n    }\r\n    if (this.#parent !== parent) {\r\n      if (this.#mapping.size > 0) {\r\n        for (const root of this.#mapping.values()) {\r\n          root.remove();\r\n          parent.append(root);\r\n        }\r\n      }\r\n      this.#parent = parent;\r\n    }\r\n  }\r\n  static get _svgFactory() {\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_1__.shadow)(this, \"_svgFactory\", new _display_utils_js__WEBPACK_IMPORTED_MODULE_0__.DOMSVGFactory());\r\n  }\r\n  static #setBox(element, {\r\n    x,\r\n    y,\r\n    width,\r\n    height\r\n  }) {\r\n    const {\r\n      style\r\n    } = element;\r\n    style.top = `${100 * y}%`;\r\n    style.left = `${100 * x}%`;\r\n    style.width = `${100 * width}%`;\r\n    style.height = `${100 * height}%`;\r\n  }\r\n  #createSVG(box) {\r\n    const svg = DrawLayer._svgFactory.create(1, 1, true);\r\n    this.#parent.append(svg);\r\n    DrawLayer.#setBox(svg, box);\r\n    return svg;\r\n  }\r\n  highlight({\r\n    outlines,\r\n    box\r\n  }, color, opacity) {\r\n    const id = this.#id++;\r\n    const root = this.#createSVG(box);\r\n    root.classList.add(\"highlight\");\r\n    const defs = DrawLayer._svgFactory.createElement(\"defs\");\r\n    root.append(defs);\r\n    const path = DrawLayer._svgFactory.createElement(\"path\");\r\n    defs.append(path);\r\n    const pathId = `path_p${this.pageIndex}_${id}`;\r\n    path.setAttribute(\"id\", pathId);\r\n    path.setAttribute(\"d\", DrawLayer.#extractPathFromHighlightOutlines(outlines));\r\n    const clipPath = DrawLayer._svgFactory.createElement(\"clipPath\");\r\n    defs.append(clipPath);\r\n    const clipPathId = `clip_${pathId}`;\r\n    clipPath.setAttribute(\"id\", clipPathId);\r\n    clipPath.setAttribute(\"clipPathUnits\", \"objectBoundingBox\");\r\n    const clipPathUse = DrawLayer._svgFactory.createElement(\"use\");\r\n    clipPath.append(clipPathUse);\r\n    clipPathUse.setAttribute(\"href\", `#${pathId}`);\r\n    clipPathUse.classList.add(\"clip\");\r\n    const use = DrawLayer._svgFactory.createElement(\"use\");\r\n    root.append(use);\r\n    root.setAttribute(\"fill\", color);\r\n    root.setAttribute(\"fill-opacity\", opacity);\r\n    use.setAttribute(\"href\", `#${pathId}`);\r\n    this.#mapping.set(id, root);\r\n    return {\r\n      id,\r\n      clipPathId: `url(#${clipPathId})`\r\n    };\r\n  }\r\n  highlightOutline({\r\n    outlines,\r\n    box\r\n  }) {\r\n    const id = this.#id++;\r\n    const root = this.#createSVG(box);\r\n    root.classList.add(\"highlightOutline\");\r\n    const defs = DrawLayer._svgFactory.createElement(\"defs\");\r\n    root.append(defs);\r\n    const path = DrawLayer._svgFactory.createElement(\"path\");\r\n    defs.append(path);\r\n    const pathId = `path_p${this.pageIndex}_${id}`;\r\n    path.setAttribute(\"id\", pathId);\r\n    path.setAttribute(\"d\", DrawLayer.#extractPathFromHighlightOutlines(outlines));\r\n    path.setAttribute(\"vector-effect\", \"non-scaling-stroke\");\r\n    const use1 = DrawLayer._svgFactory.createElement(\"use\");\r\n    root.append(use1);\r\n    use1.setAttribute(\"href\", `#${pathId}`);\r\n    const use2 = use1.cloneNode();\r\n    root.append(use2);\r\n    use1.classList.add(\"mainOutline\");\r\n    use2.classList.add(\"secondaryOutline\");\r\n    this.#mapping.set(id, root);\r\n    return id;\r\n  }\r\n  static #extractPathFromHighlightOutlines(polygons) {\r\n    const buffer = [];\r\n    for (const polygon of polygons) {\r\n      let [prevX, prevY] = polygon;\r\n      buffer.push(`M${prevX} ${prevY}`);\r\n      for (let i = 2; i < polygon.length; i += 2) {\r\n        const x = polygon[i];\r\n        const y = polygon[i + 1];\r\n        if (x === prevX) {\r\n          buffer.push(`V${y}`);\r\n          prevY = y;\r\n        } else if (y === prevY) {\r\n          buffer.push(`H${x}`);\r\n          prevX = x;\r\n        }\r\n      }\r\n      buffer.push(\"Z\");\r\n    }\r\n    return buffer.join(\" \");\r\n  }\r\n  updateBox(id, box) {\r\n    DrawLayer.#setBox(this.#mapping.get(id), box);\r\n  }\r\n  rotate(id, angle) {\r\n    this.#mapping.get(id).setAttribute(\"data-main-rotation\", angle);\r\n  }\r\n  changeColor(id, color) {\r\n    this.#mapping.get(id).setAttribute(\"fill\", color);\r\n  }\r\n  changeOpacity(id, opacity) {\r\n    this.#mapping.get(id).setAttribute(\"fill-opacity\", opacity);\r\n  }\r\n  addClass(id, className) {\r\n    this.#mapping.get(id).classList.add(className);\r\n  }\r\n  removeClass(id, className) {\r\n    this.#mapping.get(id).classList.remove(className);\r\n  }\r\n  remove(id) {\r\n    if (this.#parent === null) {\r\n      return;\r\n    }\r\n    this.#mapping.get(id).remove();\r\n    this.#mapping.delete(id);\r\n  }\r\n  destroy() {\r\n    this.#parent = null;\r\n    for (const root of this.#mapping.values()) {\r\n      root.remove();\r\n    }\r\n    this.#mapping.clear();\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 629:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_283094__) => {\r\n\r\n\r\n// EXPORTS\r\n__nested_webpack_require_283094__.d(__nested_webpack_exports__, {\r\n  AnnotationEditorLayer: () => (/* binding */ AnnotationEditorLayer)\r\n});\r\n\r\n// EXTERNAL MODULE: ./src/shared/util.js\r\nvar util = __nested_webpack_require_283094__(266);\r\n// EXTERNAL MODULE: ./src/display/editor/editor.js + 2 modules\r\nvar editor_editor = __nested_webpack_require_283094__(115);\r\n// EXTERNAL MODULE: ./src/display/editor/tools.js\r\nvar tools = __nested_webpack_require_283094__(812);\r\n// EXTERNAL MODULE: ./src/display/annotation_layer.js + 1 modules\r\nvar annotation_layer = __nested_webpack_require_283094__(640);\r\n;// CONCATENATED MODULE: ./src/display/editor/freetext.js\r\n\r\n\r\n\r\n\r\nclass FreeTextEditor extends editor_editor.AnnotationEditor {\r\n  #boundEditorDivBlur = this.editorDivBlur.bind(this);\r\n  #boundEditorDivFocus = this.editorDivFocus.bind(this);\r\n  #boundEditorDivInput = this.editorDivInput.bind(this);\r\n  #boundEditorDivKeydown = this.editorDivKeydown.bind(this);\r\n  #color;\r\n  #content = \"\";\r\n  #editorDivId = `${this.id}-editor`;\r\n  #fontSize;\r\n  #initialData = null;\r\n  static _freeTextDefaultContent = \"\";\r\n  static _internalPadding = 0;\r\n  static _defaultColor = null;\r\n  static _defaultFontSize = 10;\r\n  static get _keyboardManager() {\r\n    const proto = FreeTextEditor.prototype;\r\n    const arrowChecker = self => self.isEmpty();\r\n    const small = tools.AnnotationEditorUIManager.TRANSLATE_SMALL;\r\n    const big = tools.AnnotationEditorUIManager.TRANSLATE_BIG;\r\n    return (0,util.shadow)(this, \"_keyboardManager\", new tools.KeyboardManager([[[\"ctrl+s\", \"mac+meta+s\", \"ctrl+p\", \"mac+meta+p\"], proto.commitOrRemove, {\r\n      bubbles: true\r\n    }], [[\"ctrl+Enter\", \"mac+meta+Enter\", \"Escape\", \"mac+Escape\"], proto.commitOrRemove], [[\"ArrowLeft\", \"mac+ArrowLeft\"], proto._translateEmpty, {\r\n      args: [-small, 0],\r\n      checker: arrowChecker\r\n    }], [[\"ctrl+ArrowLeft\", \"mac+shift+ArrowLeft\"], proto._translateEmpty, {\r\n      args: [-big, 0],\r\n      checker: arrowChecker\r\n    }], [[\"ArrowRight\", \"mac+ArrowRight\"], proto._translateEmpty, {\r\n      args: [small, 0],\r\n      checker: arrowChecker\r\n    }], [[\"ctrl+ArrowRight\", \"mac+shift+ArrowRight\"], proto._translateEmpty, {\r\n      args: [big, 0],\r\n      checker: arrowChecker\r\n    }], [[\"ArrowUp\", \"mac+ArrowUp\"], proto._translateEmpty, {\r\n      args: [0, -small],\r\n      checker: arrowChecker\r\n    }], [[\"ctrl+ArrowUp\", \"mac+shift+ArrowUp\"], proto._translateEmpty, {\r\n      args: [0, -big],\r\n      checker: arrowChecker\r\n    }], [[\"ArrowDown\", \"mac+ArrowDown\"], proto._translateEmpty, {\r\n      args: [0, small],\r\n      checker: arrowChecker\r\n    }], [[\"ctrl+ArrowDown\", \"mac+shift+ArrowDown\"], proto._translateEmpty, {\r\n      args: [0, big],\r\n      checker: arrowChecker\r\n    }]]));\r\n  }\r\n  static _type = \"freetext\";\r\n  static _editorType = util.AnnotationEditorType.FREETEXT;\r\n  constructor(params) {\r\n    super({\r\n      ...params,\r\n      name: \"freeTextEditor\"\r\n    });\r\n    this.#color = params.color || FreeTextEditor._defaultColor || editor_editor.AnnotationEditor._defaultLineColor;\r\n    this.#fontSize = params.fontSize || FreeTextEditor._defaultFontSize;\r\n  }\r\n  static initialize(l10n) {\r\n    editor_editor.AnnotationEditor.initialize(l10n, {\r\n      strings: [\"pdfjs-free-text-default-content\"]\r\n    });\r\n    const style = getComputedStyle(document.documentElement);\r\n    this._internalPadding = parseFloat(style.getPropertyValue(\"--freetext-padding\"));\r\n  }\r\n  static updateDefaultParams(type, value) {\r\n    switch (type) {\r\n      case util.AnnotationEditorParamsType.FREETEXT_SIZE:\r\n        FreeTextEditor._defaultFontSize = value;\r\n        break;\r\n      case util.AnnotationEditorParamsType.FREETEXT_COLOR:\r\n        FreeTextEditor._defaultColor = value;\r\n        break;\r\n    }\r\n  }\r\n  updateParams(type, value) {\r\n    switch (type) {\r\n      case util.AnnotationEditorParamsType.FREETEXT_SIZE:\r\n        this.#updateFontSize(value);\r\n        break;\r\n      case util.AnnotationEditorParamsType.FREETEXT_COLOR:\r\n        this.#updateColor(value);\r\n        break;\r\n    }\r\n  }\r\n  static get defaultPropertiesToUpdate() {\r\n    return [[util.AnnotationEditorParamsType.FREETEXT_SIZE, FreeTextEditor._defaultFontSize], [util.AnnotationEditorParamsType.FREETEXT_COLOR, FreeTextEditor._defaultColor || editor_editor.AnnotationEditor._defaultLineColor]];\r\n  }\r\n  get propertiesToUpdate() {\r\n    return [[util.AnnotationEditorParamsType.FREETEXT_SIZE, this.#fontSize], [util.AnnotationEditorParamsType.FREETEXT_COLOR, this.#color]];\r\n  }\r\n  #updateFontSize(fontSize) {\r\n    const setFontsize = size => {\r\n      this.editorDiv.style.fontSize = `calc(${size}px * var(--scale-factor))`;\r\n      this.translate(0, -(size - this.#fontSize) * this.parentScale);\r\n      this.#fontSize = size;\r\n      this.#setEditorDimensions();\r\n    };\r\n    const savedFontsize = this.#fontSize;\r\n    this.addCommands({\r\n      cmd: () => {\r\n        setFontsize(fontSize);\r\n      },\r\n      undo: () => {\r\n        setFontsize(savedFontsize);\r\n      },\r\n      mustExec: true,\r\n      type: util.AnnotationEditorParamsType.FREETEXT_SIZE,\r\n      overwriteIfSameType: true,\r\n      keepUndo: true\r\n    });\r\n  }\r\n  #updateColor(color) {\r\n    const savedColor = this.#color;\r\n    this.addCommands({\r\n      cmd: () => {\r\n        this.#color = this.editorDiv.style.color = color;\r\n      },\r\n      undo: () => {\r\n        this.#color = this.editorDiv.style.color = savedColor;\r\n      },\r\n      mustExec: true,\r\n      type: util.AnnotationEditorParamsType.FREETEXT_COLOR,\r\n      overwriteIfSameType: true,\r\n      keepUndo: true\r\n    });\r\n  }\r\n  _translateEmpty(x, y) {\r\n    this._uiManager.translateSelectedEditors(x, y, true);\r\n  }\r\n  getInitialTranslation() {\r\n    const scale = this.parentScale;\r\n    return [-FreeTextEditor._internalPadding * scale, -(FreeTextEditor._internalPadding + this.#fontSize) * scale];\r\n  }\r\n  rebuild() {\r\n    if (!this.parent) {\r\n      return;\r\n    }\r\n    super.rebuild();\r\n    if (this.div === null) {\r\n      return;\r\n    }\r\n    if (!this.isAttachedToDOM) {\r\n      this.parent.add(this);\r\n    }\r\n  }\r\n  enableEditMode() {\r\n    if (this.isInEditMode()) {\r\n      return;\r\n    }\r\n    this.parent.setEditingState(false);\r\n    this.parent.updateToolbar(util.AnnotationEditorType.FREETEXT);\r\n    super.enableEditMode();\r\n    this.overlayDiv.classList.remove(\"enabled\");\r\n    this.editorDiv.contentEditable = true;\r\n    this._isDraggable = false;\r\n    this.div.removeAttribute(\"aria-activedescendant\");\r\n    this.editorDiv.addEventListener(\"keydown\", this.#boundEditorDivKeydown);\r\n    this.editorDiv.addEventListener(\"focus\", this.#boundEditorDivFocus);\r\n    this.editorDiv.addEventListener(\"blur\", this.#boundEditorDivBlur);\r\n    this.editorDiv.addEventListener(\"input\", this.#boundEditorDivInput);\r\n  }\r\n  disableEditMode() {\r\n    if (!this.isInEditMode()) {\r\n      return;\r\n    }\r\n    this.parent.setEditingState(true);\r\n    super.disableEditMode();\r\n    this.overlayDiv.classList.add(\"enabled\");\r\n    this.editorDiv.contentEditable = false;\r\n    this.div.setAttribute(\"aria-activedescendant\", this.#editorDivId);\r\n    this._isDraggable = true;\r\n    this.editorDiv.removeEventListener(\"keydown\", this.#boundEditorDivKeydown);\r\n    this.editorDiv.removeEventListener(\"focus\", this.#boundEditorDivFocus);\r\n    this.editorDiv.removeEventListener(\"blur\", this.#boundEditorDivBlur);\r\n    this.editorDiv.removeEventListener(\"input\", this.#boundEditorDivInput);\r\n    this.div.focus({\r\n      preventScroll: true\r\n    });\r\n    this.isEditing = false;\r\n    this.parent.div.classList.add(\"freetextEditing\");\r\n  }\r\n  focusin(event) {\r\n    if (!this._focusEventsAllowed) {\r\n      return;\r\n    }\r\n    super.focusin(event);\r\n    if (event.target !== this.editorDiv) {\r\n      this.editorDiv.focus();\r\n    }\r\n  }\r\n  onceAdded() {\r\n    if (this.width) {\r\n      this.#cheatInitialRect();\r\n      return;\r\n    }\r\n    this.enableEditMode();\r\n    this.editorDiv.focus();\r\n    if (this._initialOptions?.isCentered) {\r\n      this.center();\r\n    }\r\n    this._initialOptions = null;\r\n  }\r\n  isEmpty() {\r\n    return !this.editorDiv || this.editorDiv.innerText.trim() === \"\";\r\n  }\r\n  remove() {\r\n    this.isEditing = false;\r\n    if (this.parent) {\r\n      this.parent.setEditingState(true);\r\n      this.parent.div.classList.add(\"freetextEditing\");\r\n    }\r\n    super.remove();\r\n  }\r\n  #extractText() {\r\n    const divs = this.editorDiv.getElementsByTagName(\"div\");\r\n    if (divs.length === 0) {\r\n      return this.editorDiv.innerText;\r\n    }\r\n    const buffer = [];\r\n    for (const div of divs) {\r\n      buffer.push(div.innerText.replace(/\\r\\n?|\\n/, \"\"));\r\n    }\r\n    return buffer.join(\"\\n\");\r\n  }\r\n  #setEditorDimensions() {\r\n    const [parentWidth, parentHeight] = this.parentDimensions;\r\n    let rect;\r\n    if (this.isAttachedToDOM) {\r\n      rect = this.div.getBoundingClientRect();\r\n    } else {\r\n      const {\r\n        currentLayer,\r\n        div\r\n      } = this;\r\n      const savedDisplay = div.style.display;\r\n      div.style.display = \"hidden\";\r\n      currentLayer.div.append(this.div);\r\n      rect = div.getBoundingClientRect();\r\n      div.remove();\r\n      div.style.display = savedDisplay;\r\n    }\r\n    if (this.rotation % 180 === this.parentRotation % 180) {\r\n      this.width = rect.width / parentWidth;\r\n      this.height = rect.height / parentHeight;\r\n    } else {\r\n      this.width = rect.height / parentWidth;\r\n      this.height = rect.width / parentHeight;\r\n    }\r\n    this.fixAndSetPosition();\r\n  }\r\n  commit() {\r\n    if (!this.isInEditMode()) {\r\n      return;\r\n    }\r\n    super.commit();\r\n    this.disableEditMode();\r\n    const savedText = this.#content;\r\n    const newText = this.#content = this.#extractText().trimEnd();\r\n    if (savedText === newText) {\r\n      return;\r\n    }\r\n    const setText = text => {\r\n      this.#content = text;\r\n      if (!text) {\r\n        this.remove();\r\n        return;\r\n      }\r\n      this.#setContent();\r\n      this._uiManager.rebuild(this);\r\n      this.#setEditorDimensions();\r\n    };\r\n    this.addCommands({\r\n      cmd: () => {\r\n        setText(newText);\r\n      },\r\n      undo: () => {\r\n        setText(savedText);\r\n      },\r\n      mustExec: false\r\n    });\r\n    this.#setEditorDimensions();\r\n  }\r\n  shouldGetKeyboardEvents() {\r\n    return this.isInEditMode();\r\n  }\r\n  enterInEditMode() {\r\n    this.enableEditMode();\r\n    this.editorDiv.focus();\r\n  }\r\n  dblclick(event) {\r\n    this.enterInEditMode();\r\n  }\r\n  keydown(event) {\r\n    if (event.target === this.div && event.key === \"Enter\") {\r\n      this.enterInEditMode();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n  editorDivKeydown(event) {\r\n    FreeTextEditor._keyboardManager.exec(this, event);\r\n  }\r\n  editorDivFocus(event) {\r\n    this.isEditing = true;\r\n  }\r\n  editorDivBlur(event) {\r\n    this.isEditing = false;\r\n  }\r\n  editorDivInput(event) {\r\n    this.parent.div.classList.toggle(\"freetextEditing\", this.isEmpty());\r\n  }\r\n  disableEditing() {\r\n    this.editorDiv.setAttribute(\"role\", \"comment\");\r\n    this.editorDiv.removeAttribute(\"aria-multiline\");\r\n  }\r\n  enableEditing() {\r\n    this.editorDiv.setAttribute(\"role\", \"textbox\");\r\n    this.editorDiv.setAttribute(\"aria-multiline\", true);\r\n  }\r\n  render() {\r\n    if (this.div) {\r\n      return this.div;\r\n    }\r\n    let baseX, baseY;\r\n    if (this.width) {\r\n      baseX = this.x;\r\n      baseY = this.y;\r\n    }\r\n    super.render();\r\n    this.editorDiv = document.createElement(\"div\");\r\n    this.editorDiv.className = \"internal\";\r\n    this.editorDiv.setAttribute(\"id\", this.#editorDivId);\r\n    this.editorDiv.setAttribute(\"data-l10n-id\", \"pdfjs-free-text\");\r\n    this.enableEditing();\r\n    editor_editor.AnnotationEditor._l10nPromise.get(\"pdfjs-free-text-default-content\").then(msg => this.editorDiv?.setAttribute(\"default-content\", msg));\r\n    this.editorDiv.contentEditable = true;\r\n    const {\r\n      style\r\n    } = this.editorDiv;\r\n    style.fontSize = `calc(${this.#fontSize}px * var(--scale-factor))`;\r\n    style.color = this.#color;\r\n    this.div.append(this.editorDiv);\r\n    this.overlayDiv = document.createElement(\"div\");\r\n    this.overlayDiv.classList.add(\"overlay\", \"enabled\");\r\n    this.div.append(this.overlayDiv);\r\n    (0,tools.bindEvents)(this, this.div, [\"dblclick\", \"keydown\"]);\r\n    if (this.width) {\r\n      const [parentWidth, parentHeight] = this.parentDimensions;\r\n      if (this.annotationElementId) {\r\n        const {\r\n          position\r\n        } = this.#initialData;\r\n        let [tx, ty] = this.getInitialTranslation();\r\n        [tx, ty] = this.pageTranslationToScreen(tx, ty);\r\n        const [pageWidth, pageHeight] = this.pageDimensions;\r\n        const [pageX, pageY] = this.pageTranslation;\r\n        let posX, posY;\r\n        switch (this.rotation) {\r\n          case 0:\r\n            posX = baseX + (position[0] - pageX) / pageWidth;\r\n            posY = baseY + this.height - (position[1] - pageY) / pageHeight;\r\n            break;\r\n          case 90:\r\n            posX = baseX + (position[0] - pageX) / pageWidth;\r\n            posY = baseY - (position[1] - pageY) / pageHeight;\r\n            [tx, ty] = [ty, -tx];\r\n            break;\r\n          case 180:\r\n            posX = baseX - this.width + (position[0] - pageX) / pageWidth;\r\n            posY = baseY - (position[1] - pageY) / pageHeight;\r\n            [tx, ty] = [-tx, -ty];\r\n            break;\r\n          case 270:\r\n            posX = baseX + (position[0] - pageX - this.height * pageHeight) / pageWidth;\r\n            posY = baseY + (position[1] - pageY - this.width * pageWidth) / pageHeight;\r\n            [tx, ty] = [-ty, tx];\r\n            break;\r\n        }\r\n        this.setAt(posX * parentWidth, posY * parentHeight, tx, ty);\r\n      } else {\r\n        this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);\r\n      }\r\n      this.#setContent();\r\n      this._isDraggable = true;\r\n      this.editorDiv.contentEditable = false;\r\n    } else {\r\n      this._isDraggable = false;\r\n      this.editorDiv.contentEditable = true;\r\n    }\r\n    return this.div;\r\n  }\r\n  #setContent() {\r\n    this.editorDiv.replaceChildren();\r\n    if (!this.#content) {\r\n      return;\r\n    }\r\n    for (const line of this.#content.split(\"\\n\")) {\r\n      const div = document.createElement(\"div\");\r\n      div.append(line ? document.createTextNode(line) : document.createElement(\"br\"));\r\n      this.editorDiv.append(div);\r\n    }\r\n  }\r\n  get contentDiv() {\r\n    return this.editorDiv;\r\n  }\r\n  static deserialize(data, parent, uiManager) {\r\n    let initialData = null;\r\n    if (data instanceof annotation_layer.FreeTextAnnotationElement) {\r\n      const {\r\n        data: {\r\n          defaultAppearanceData: {\r\n            fontSize,\r\n            fontColor\r\n          },\r\n          rect,\r\n          rotation,\r\n          id\r\n        },\r\n        textContent,\r\n        textPosition,\r\n        parent: {\r\n          page: {\r\n            pageNumber\r\n          }\r\n        }\r\n      } = data;\r\n      if (!textContent || textContent.length === 0) {\r\n        return null;\r\n      }\r\n      initialData = data = {\r\n        annotationType: util.AnnotationEditorType.FREETEXT,\r\n        color: Array.from(fontColor),\r\n        fontSize,\r\n        value: textContent.join(\"\\n\"),\r\n        position: textPosition,\r\n        pageIndex: pageNumber - 1,\r\n        rect,\r\n        rotation,\r\n        id,\r\n        deleted: false\r\n      };\r\n    }\r\n    const editor = super.deserialize(data, parent, uiManager);\r\n    editor.#fontSize = data.fontSize;\r\n    editor.#color = util.Util.makeHexColor(...data.color);\r\n    editor.#content = data.value;\r\n    editor.annotationElementId = data.id || null;\r\n    editor.#initialData = initialData;\r\n    return editor;\r\n  }\r\n  serialize(isForCopying = false) {\r\n    if (this.isEmpty()) {\r\n      return null;\r\n    }\r\n    if (this.deleted) {\r\n      return {\r\n        pageIndex: this.pageIndex,\r\n        id: this.annotationElementId,\r\n        deleted: true\r\n      };\r\n    }\r\n    const padding = FreeTextEditor._internalPadding * this.parentScale;\r\n    const rect = this.getRect(padding, padding);\r\n    const color = editor_editor.AnnotationEditor._colorManager.convert(this.isAttachedToDOM ? getComputedStyle(this.editorDiv).color : this.#color);\r\n    const serialized = {\r\n      annotationType: util.AnnotationEditorType.FREETEXT,\r\n      color,\r\n      fontSize: this.#fontSize,\r\n      value: this.#content,\r\n      pageIndex: this.pageIndex,\r\n      rect,\r\n      rotation: this.rotation,\r\n      structTreeParentId: this._structTreeParentId\r\n    };\r\n    if (isForCopying) {\r\n      return serialized;\r\n    }\r\n    if (this.annotationElementId && !this.#hasElementChanged(serialized)) {\r\n      return null;\r\n    }\r\n    serialized.id = this.annotationElementId;\r\n    return serialized;\r\n  }\r\n  #hasElementChanged(serialized) {\r\n    const {\r\n      value,\r\n      fontSize,\r\n      color,\r\n      rect,\r\n      pageIndex\r\n    } = this.#initialData;\r\n    return serialized.value !== value || serialized.fontSize !== fontSize || serialized.rect.some((x, i) => Math.abs(x - rect[i]) >= 1) || serialized.color.some((c, i) => c !== color[i]) || serialized.pageIndex !== pageIndex;\r\n  }\r\n  #cheatInitialRect(delayed = false) {\r\n    if (!this.annotationElementId) {\r\n      return;\r\n    }\r\n    this.#setEditorDimensions();\r\n    if (!delayed && (this.width === 0 || this.height === 0)) {\r\n      setTimeout(() => this.#cheatInitialRect(true), 0);\r\n      return;\r\n    }\r\n    const padding = FreeTextEditor._internalPadding * this.parentScale;\r\n    this.#initialData.rect = this.getRect(padding, padding);\r\n  }\r\n}\r\n\r\n// EXTERNAL MODULE: ./src/display/editor/color_picker.js\r\nvar color_picker = __nested_webpack_require_283094__(97);\r\n// EXTERNAL MODULE: ./src/display/editor/outliner.js\r\nvar editor_outliner = __nested_webpack_require_283094__(405);\r\n;// CONCATENATED MODULE: ./src/display/editor/highlight.js\r\n\r\n\r\n\r\n\r\n\r\nclass HighlightEditor extends editor_editor.AnnotationEditor {\r\n  #boxes;\r\n  #clipPathId = null;\r\n  #colorPicker = null;\r\n  #focusOutlines = null;\r\n  #highlightDiv = null;\r\n  #highlightOutlines = null;\r\n  #id = null;\r\n  #lastPoint = null;\r\n  #opacity;\r\n  #outlineId = null;\r\n  static _defaultColor = null;\r\n  static _defaultOpacity = 1;\r\n  static _l10nPromise;\r\n  static _type = \"highlight\";\r\n  static _editorType = util.AnnotationEditorType.HIGHLIGHT;\r\n  constructor(params) {\r\n    super({\r\n      ...params,\r\n      name: \"highlightEditor\"\r\n    });\r\n    HighlightEditor._defaultColor ||= this._uiManager.highlightColors?.values().next().value || \"#fff066\";\r\n    this.color = params.color || HighlightEditor._defaultColor;\r\n    this.#opacity = params.opacity || HighlightEditor._defaultOpacity;\r\n    this.#boxes = params.boxes || null;\r\n    this._isDraggable = false;\r\n    this.#createOutlines();\r\n    this.#addToDrawLayer();\r\n    this.rotate(this.rotation);\r\n  }\r\n  #createOutlines() {\r\n    const outliner = new editor_outliner.Outliner(this.#boxes, 0.001);\r\n    this.#highlightOutlines = outliner.getOutlines();\r\n    ({\r\n      x: this.x,\r\n      y: this.y,\r\n      width: this.width,\r\n      height: this.height\r\n    } = this.#highlightOutlines.box);\r\n    const outlinerForOutline = new editor_outliner.Outliner(this.#boxes, 0.0025, 0.001, this._uiManager.direction === \"ltr\");\r\n    this.#focusOutlines = outlinerForOutline.getOutlines();\r\n    const {\r\n      lastPoint\r\n    } = this.#focusOutlines.box;\r\n    this.#lastPoint = [(lastPoint[0] - this.x) / this.width, (lastPoint[1] - this.y) / this.height];\r\n  }\r\n  static initialize(l10n) {\r\n    editor_editor.AnnotationEditor.initialize(l10n);\r\n  }\r\n  static updateDefaultParams(type, value) {\r\n    switch (type) {\r\n      case util.AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR:\r\n        HighlightEditor._defaultColor = value;\r\n        break;\r\n    }\r\n  }\r\n  get toolbarPosition() {\r\n    return this.#lastPoint;\r\n  }\r\n  updateParams(type, value) {\r\n    switch (type) {\r\n      case util.AnnotationEditorParamsType.HIGHLIGHT_COLOR:\r\n        this.#updateColor(value);\r\n        break;\r\n    }\r\n  }\r\n  static get defaultPropertiesToUpdate() {\r\n    return [[util.AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR, HighlightEditor._defaultColor]];\r\n  }\r\n  get propertiesToUpdate() {\r\n    return [[util.AnnotationEditorParamsType.HIGHLIGHT_COLOR, this.color || HighlightEditor._defaultColor]];\r\n  }\r\n  #updateColor(color) {\r\n    const savedColor = this.color;\r\n    this.addCommands({\r\n      cmd: () => {\r\n        this.color = color;\r\n        this.parent.drawLayer.changeColor(this.#id, color);\r\n        this.#colorPicker?.updateColor(color);\r\n      },\r\n      undo: () => {\r\n        this.color = savedColor;\r\n        this.parent.drawLayer.changeColor(this.#id, savedColor);\r\n        this.#colorPicker?.updateColor(savedColor);\r\n      },\r\n      mustExec: true,\r\n      type: util.AnnotationEditorParamsType.HIGHLIGHT_COLOR,\r\n      overwriteIfSameType: true,\r\n      keepUndo: true\r\n    });\r\n  }\r\n  async addEditToolbar() {\r\n    const toolbar = await super.addEditToolbar();\r\n    if (!toolbar) {\r\n      return null;\r\n    }\r\n    if (this._uiManager.highlightColors) {\r\n      this.#colorPicker = new color_picker.ColorPicker({\r\n        editor: this\r\n      });\r\n      toolbar.addColorPicker(this.#colorPicker);\r\n    }\r\n    return toolbar;\r\n  }\r\n  disableEditing() {\r\n    super.disableEditing();\r\n    this.div.classList.toggle(\"disabled\", true);\r\n  }\r\n  enableEditing() {\r\n    super.enableEditing();\r\n    this.div.classList.toggle(\"disabled\", false);\r\n  }\r\n  fixAndSetPosition() {\r\n    return super.fixAndSetPosition(0);\r\n  }\r\n  getRect(tx, ty) {\r\n    return super.getRect(tx, ty, 0);\r\n  }\r\n  onceAdded() {\r\n    this.parent.addUndoableEditor(this);\r\n    this.div.focus();\r\n  }\r\n  remove() {\r\n    super.remove();\r\n    this.#cleanDrawLayer();\r\n  }\r\n  rebuild() {\r\n    if (!this.parent) {\r\n      return;\r\n    }\r\n    super.rebuild();\r\n    if (this.div === null) {\r\n      return;\r\n    }\r\n    this.#addToDrawLayer();\r\n    if (!this.isAttachedToDOM) {\r\n      this.parent.add(this);\r\n    }\r\n  }\r\n  setParent(parent) {\r\n    let mustBeSelected = false;\r\n    if (this.parent && !parent) {\r\n      this.#cleanDrawLayer();\r\n    } else if (parent) {\r\n      this.#addToDrawLayer(parent);\r\n      mustBeSelected = !this.parent && this.div?.classList.contains(\"selectedEditor\");\r\n    }\r\n    super.setParent(parent);\r\n    if (mustBeSelected) {\r\n      this.select();\r\n    }\r\n  }\r\n  #cleanDrawLayer() {\r\n    if (this.#id === null || !this.parent) {\r\n      return;\r\n    }\r\n    this.parent.drawLayer.remove(this.#id);\r\n    this.#id = null;\r\n    this.parent.drawLayer.remove(this.#outlineId);\r\n    this.#outlineId = null;\r\n  }\r\n  #addToDrawLayer(parent = this.parent) {\r\n    if (this.#id !== null) {\r\n      return;\r\n    }\r\n    ({\r\n      id: this.#id,\r\n      clipPathId: this.#clipPathId\r\n    } = parent.drawLayer.highlight(this.#highlightOutlines, this.color, this.#opacity));\r\n    if (this.#highlightDiv) {\r\n      this.#highlightDiv.style.clipPath = this.#clipPathId;\r\n    }\r\n    this.#outlineId = parent.drawLayer.highlightOutline(this.#focusOutlines);\r\n  }\r\n  static #rotateBbox({\r\n    x,\r\n    y,\r\n    width,\r\n    height\r\n  }, angle) {\r\n    switch (angle) {\r\n      case 90:\r\n        return {\r\n          x: 1 - y - height,\r\n          y: x,\r\n          width: height,\r\n          height: width\r\n        };\r\n      case 180:\r\n        return {\r\n          x: 1 - x - width,\r\n          y: 1 - y - height,\r\n          width,\r\n          height\r\n        };\r\n      case 270:\r\n        return {\r\n          x: y,\r\n          y: 1 - x - width,\r\n          width: height,\r\n          height: width\r\n        };\r\n    }\r\n    return {\r\n      x,\r\n      y,\r\n      width,\r\n      height\r\n    };\r\n  }\r\n  rotate(angle) {\r\n    const {\r\n      drawLayer\r\n    } = this.parent;\r\n    drawLayer.rotate(this.#id, angle);\r\n    drawLayer.rotate(this.#outlineId, angle);\r\n    drawLayer.updateBox(this.#id, HighlightEditor.#rotateBbox(this, angle));\r\n    drawLayer.updateBox(this.#outlineId, HighlightEditor.#rotateBbox(this.#focusOutlines.box, angle));\r\n  }\r\n  render() {\r\n    if (this.div) {\r\n      return this.div;\r\n    }\r\n    const div = super.render();\r\n    const highlightDiv = this.#highlightDiv = document.createElement(\"div\");\r\n    div.append(highlightDiv);\r\n    highlightDiv.className = \"internal\";\r\n    highlightDiv.style.clipPath = this.#clipPathId;\r\n    const [parentWidth, parentHeight] = this.parentDimensions;\r\n    this.setDims(this.width * parentWidth, this.height * parentHeight);\r\n    (0,tools.bindEvents)(this, this.#highlightDiv, [\"pointerover\", \"pointerleave\"]);\r\n    this.enableEditing();\r\n    return div;\r\n  }\r\n  pointerover() {\r\n    this.parent.drawLayer.addClass(this.#outlineId, \"hovered\");\r\n  }\r\n  pointerleave() {\r\n    this.parent.drawLayer.removeClass(this.#outlineId, \"hovered\");\r\n  }\r\n  select() {\r\n    super.select();\r\n    this.parent?.drawLayer.removeClass(this.#outlineId, \"hovered\");\r\n    this.parent?.drawLayer.addClass(this.#outlineId, \"selected\");\r\n  }\r\n  unselect() {\r\n    super.unselect();\r\n    this.parent?.drawLayer.removeClass(this.#outlineId, \"selected\");\r\n  }\r\n  #serializeBoxes() {\r\n    const [pageWidth, pageHeight] = this.pageDimensions;\r\n    const boxes = this.#boxes;\r\n    const quadPoints = new Array(boxes.length * 8);\r\n    let i = 0;\r\n    for (const {\r\n      x,\r\n      y,\r\n      width,\r\n      height\r\n    } of boxes) {\r\n      const sx = x * pageWidth;\r\n      const sy = (1 - y - height) * pageHeight;\r\n      quadPoints[i] = quadPoints[i + 4] = sx;\r\n      quadPoints[i + 1] = quadPoints[i + 3] = sy;\r\n      quadPoints[i + 2] = quadPoints[i + 6] = sx + width * pageWidth;\r\n      quadPoints[i + 5] = quadPoints[i + 7] = sy + height * pageHeight;\r\n      i += 8;\r\n    }\r\n    return quadPoints;\r\n  }\r\n  #serializeOutlines() {\r\n    const [pageWidth, pageHeight] = this.pageDimensions;\r\n    const width = this.width * pageWidth;\r\n    const height = this.height * pageHeight;\r\n    const tx = this.x * pageWidth;\r\n    const ty = (1 - this.y - this.height) * pageHeight;\r\n    const outlines = [];\r\n    for (const outline of this.#highlightOutlines.outlines) {\r\n      const points = new Array(outline.length);\r\n      for (let i = 0; i < outline.length; i += 2) {\r\n        points[i] = tx + outline[i] * width;\r\n        points[i + 1] = ty + (1 - outline[i + 1]) * height;\r\n      }\r\n      outlines.push(points);\r\n    }\r\n    return outlines;\r\n  }\r\n  static deserialize(data, parent, uiManager) {\r\n    const editor = super.deserialize(data, parent, uiManager);\r\n    const {\r\n      rect,\r\n      color,\r\n      quadPoints\r\n    } = data;\r\n    editor.color = util.Util.makeHexColor(...color);\r\n    editor.#opacity = data.opacity;\r\n    const [pageWidth, pageHeight] = editor.pageDimensions;\r\n    editor.width = (rect[2] - rect[0]) / pageWidth;\r\n    editor.height = (rect[3] - rect[1]) / pageHeight;\r\n    const boxes = editor.#boxes = [];\r\n    for (let i = 0; i < quadPoints.length; i += 8) {\r\n      boxes.push({\r\n        x: quadPoints[4] / pageWidth,\r\n        y: 1 - quadPoints[i + 5] / pageHeight,\r\n        width: (quadPoints[i + 2] - quadPoints[i]) / pageWidth,\r\n        height: (quadPoints[i + 5] - quadPoints[i + 1]) / pageHeight\r\n      });\r\n    }\r\n    editor.#createOutlines();\r\n    return editor;\r\n  }\r\n  serialize(isForCopying = false) {\r\n    if (this.isEmpty() || isForCopying) {\r\n      return null;\r\n    }\r\n    const rect = this.getRect(0, 0);\r\n    const color = editor_editor.AnnotationEditor._colorManager.convert(this.color);\r\n    return {\r\n      annotationType: util.AnnotationEditorType.HIGHLIGHT,\r\n      color,\r\n      opacity: this.#opacity,\r\n      quadPoints: this.#serializeBoxes(),\r\n      outlines: this.#serializeOutlines(),\r\n      pageIndex: this.pageIndex,\r\n      rect,\r\n      rotation: 0,\r\n      structTreeParentId: this._structTreeParentId\r\n    };\r\n  }\r\n  static canCreateNewEmptyEditor() {\r\n    return false;\r\n  }\r\n}\r\n\r\n// EXTERNAL MODULE: ./src/display/display_utils.js\r\nvar display_utils = __nested_webpack_require_283094__(473);\r\n;// CONCATENATED MODULE: ./src/display/editor/ink.js\r\n\r\n\r\n\r\n\r\n\r\nclass InkEditor extends editor_editor.AnnotationEditor {\r\n  #baseHeight = 0;\r\n  #baseWidth = 0;\r\n  #boundCanvasPointermove = this.canvasPointermove.bind(this);\r\n  #boundCanvasPointerleave = this.canvasPointerleave.bind(this);\r\n  #boundCanvasPointerup = this.canvasPointerup.bind(this);\r\n  #boundCanvasPointerdown = this.canvasPointerdown.bind(this);\r\n  #canvasContextMenuTimeoutId = null;\r\n  #currentPath2D = new Path2D();\r\n  #disableEditing = false;\r\n  #hasSomethingToDraw = false;\r\n  #isCanvasInitialized = false;\r\n  #observer = null;\r\n  #realWidth = 0;\r\n  #realHeight = 0;\r\n  #requestFrameCallback = null;\r\n  static _defaultColor = null;\r\n  static _defaultOpacity = 1;\r\n  static _defaultThickness = 1;\r\n  static _type = \"ink\";\r\n  static _editorType = util.AnnotationEditorType.INK;\r\n  constructor(params) {\r\n    super({\r\n      ...params,\r\n      name: \"inkEditor\"\r\n    });\r\n    this.color = params.color || null;\r\n    this.thickness = params.thickness || null;\r\n    this.opacity = params.opacity || null;\r\n    this.paths = [];\r\n    this.bezierPath2D = [];\r\n    this.allRawPaths = [];\r\n    this.currentPath = [];\r\n    this.scaleFactor = 1;\r\n    this.translationX = this.translationY = 0;\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this._willKeepAspectRatio = true;\r\n  }\r\n  static initialize(l10n) {\r\n    editor_editor.AnnotationEditor.initialize(l10n);\r\n  }\r\n  static updateDefaultParams(type, value) {\r\n    switch (type) {\r\n      case util.AnnotationEditorParamsType.INK_THICKNESS:\r\n        InkEditor._defaultThickness = value;\r\n        break;\r\n      case util.AnnotationEditorParamsType.INK_COLOR:\r\n        InkEditor._defaultColor = value;\r\n        break;\r\n      case util.AnnotationEditorParamsType.INK_OPACITY:\r\n        InkEditor._defaultOpacity = value / 100;\r\n        break;\r\n    }\r\n  }\r\n  updateParams(type, value) {\r\n    switch (type) {\r\n      case util.AnnotationEditorParamsType.INK_THICKNESS:\r\n        this.#updateThickness(value);\r\n        break;\r\n      case util.AnnotationEditorParamsType.INK_COLOR:\r\n        this.#updateColor(value);\r\n        break;\r\n      case util.AnnotationEditorParamsType.INK_OPACITY:\r\n        this.#updateOpacity(value);\r\n        break;\r\n    }\r\n  }\r\n  static get defaultPropertiesToUpdate() {\r\n    return [[util.AnnotationEditorParamsType.INK_THICKNESS, InkEditor._defaultThickness], [util.AnnotationEditorParamsType.INK_COLOR, InkEditor._defaultColor || editor_editor.AnnotationEditor._defaultLineColor], [util.AnnotationEditorParamsType.INK_OPACITY, Math.round(InkEditor._defaultOpacity * 100)]];\r\n  }\r\n  get propertiesToUpdate() {\r\n    return [[util.AnnotationEditorParamsType.INK_THICKNESS, this.thickness || InkEditor._defaultThickness], [util.AnnotationEditorParamsType.INK_COLOR, this.color || InkEditor._defaultColor || editor_editor.AnnotationEditor._defaultLineColor], [util.AnnotationEditorParamsType.INK_OPACITY, Math.round(100 * (this.opacity ?? InkEditor._defaultOpacity))]];\r\n  }\r\n  #updateThickness(thickness) {\r\n    const savedThickness = this.thickness;\r\n    this.addCommands({\r\n      cmd: () => {\r\n        this.thickness = thickness;\r\n        this.#fitToContent();\r\n      },\r\n      undo: () => {\r\n        this.thickness = savedThickness;\r\n        this.#fitToContent();\r\n      },\r\n      mustExec: true,\r\n      type: util.AnnotationEditorParamsType.INK_THICKNESS,\r\n      overwriteIfSameType: true,\r\n      keepUndo: true\r\n    });\r\n  }\r\n  #updateColor(color) {\r\n    const savedColor = this.color;\r\n    this.addCommands({\r\n      cmd: () => {\r\n        this.color = color;\r\n        this.#redraw();\r\n      },\r\n      undo: () => {\r\n        this.color = savedColor;\r\n        this.#redraw();\r\n      },\r\n      mustExec: true,\r\n      type: util.AnnotationEditorParamsType.INK_COLOR,\r\n      overwriteIfSameType: true,\r\n      keepUndo: true\r\n    });\r\n  }\r\n  #updateOpacity(opacity) {\r\n    opacity /= 100;\r\n    const savedOpacity = this.opacity;\r\n    this.addCommands({\r\n      cmd: () => {\r\n        this.opacity = opacity;\r\n        this.#redraw();\r\n      },\r\n      undo: () => {\r\n        this.opacity = savedOpacity;\r\n        this.#redraw();\r\n      },\r\n      mustExec: true,\r\n      type: util.AnnotationEditorParamsType.INK_OPACITY,\r\n      overwriteIfSameType: true,\r\n      keepUndo: true\r\n    });\r\n  }\r\n  rebuild() {\r\n    if (!this.parent) {\r\n      return;\r\n    }\r\n    super.rebuild();\r\n    if (this.div === null) {\r\n      return;\r\n    }\r\n    if (!this.canvas) {\r\n      this.#createCanvas();\r\n      this.#createObserver();\r\n    }\r\n    if (!this.isAttachedToDOM) {\r\n      this.parent.add(this);\r\n      this.#setCanvasDims();\r\n    }\r\n    this.#fitToContent();\r\n  }\r\n  remove() {\r\n    if (this.canvas === null) {\r\n      return;\r\n    }\r\n    if (!this.isEmpty()) {\r\n      this.commit();\r\n    }\r\n    this.canvas.width = this.canvas.height = 0;\r\n    this.canvas.remove();\r\n    this.canvas = null;\r\n    if (this.#canvasContextMenuTimeoutId) {\r\n      clearTimeout(this.#canvasContextMenuTimeoutId);\r\n      this.#canvasContextMenuTimeoutId = null;\r\n    }\r\n    this.#observer.disconnect();\r\n    this.#observer = null;\r\n    super.remove();\r\n  }\r\n  setParent(parent) {\r\n    if (!this.parent && parent) {\r\n      this._uiManager.removeShouldRescale(this);\r\n    } else if (this.parent && parent === null) {\r\n      this._uiManager.addShouldRescale(this);\r\n    }\r\n    super.setParent(parent);\r\n  }\r\n  onScaleChanging() {\r\n    const [parentWidth, parentHeight] = this.parentDimensions;\r\n    const width = this.width * parentWidth;\r\n    const height = this.height * parentHeight;\r\n    this.setDimensions(width, height);\r\n  }\r\n  enableEditMode() {\r\n    if (this.#disableEditing || this.canvas === null) {\r\n      return;\r\n    }\r\n    super.enableEditMode();\r\n    this._isDraggable = false;\r\n    this.canvas.addEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\r\n  }\r\n  disableEditMode() {\r\n    if (!this.isInEditMode() || this.canvas === null) {\r\n      return;\r\n    }\r\n    super.disableEditMode();\r\n    this._isDraggable = !this.isEmpty();\r\n    this.div.classList.remove(\"editing\");\r\n    this.canvas.removeEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\r\n  }\r\n  onceAdded() {\r\n    this._isDraggable = !this.isEmpty();\r\n  }\r\n  isEmpty() {\r\n    return this.paths.length === 0 || this.paths.length === 1 && this.paths[0].length === 0;\r\n  }\r\n  #getInitialBBox() {\r\n    const {\r\n      parentRotation,\r\n      parentDimensions: [width, height]\r\n    } = this;\r\n    switch (parentRotation) {\r\n      case 90:\r\n        return [0, height, height, width];\r\n      case 180:\r\n        return [width, height, width, height];\r\n      case 270:\r\n        return [width, 0, height, width];\r\n      default:\r\n        return [0, 0, width, height];\r\n    }\r\n  }\r\n  #setStroke() {\r\n    const {\r\n      ctx,\r\n      color,\r\n      opacity,\r\n      thickness,\r\n      parentScale,\r\n      scaleFactor\r\n    } = this;\r\n    ctx.lineWidth = thickness * parentScale / scaleFactor;\r\n    ctx.lineCap = \"round\";\r\n    ctx.lineJoin = \"round\";\r\n    ctx.miterLimit = 10;\r\n    ctx.strokeStyle = `${color}${(0,tools.opacityToHex)(opacity)}`;\r\n  }\r\n  #startDrawing(x, y) {\r\n    this.canvas.addEventListener(\"contextmenu\", display_utils.noContextMenu);\r\n    this.canvas.addEventListener(\"pointerleave\", this.#boundCanvasPointerleave);\r\n    this.canvas.addEventListener(\"pointermove\", this.#boundCanvasPointermove);\r\n    this.canvas.addEventListener(\"pointerup\", this.#boundCanvasPointerup);\r\n    this.canvas.removeEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\r\n    this.isEditing = true;\r\n    if (!this.#isCanvasInitialized) {\r\n      this.#isCanvasInitialized = true;\r\n      this.#setCanvasDims();\r\n      this.thickness ||= InkEditor._defaultThickness;\r\n      this.color ||= InkEditor._defaultColor || editor_editor.AnnotationEditor._defaultLineColor;\r\n      this.opacity ??= InkEditor._defaultOpacity;\r\n    }\r\n    this.currentPath.push([x, y]);\r\n    this.#hasSomethingToDraw = false;\r\n    this.#setStroke();\r\n    this.#requestFrameCallback = () => {\r\n      this.#drawPoints();\r\n      if (this.#requestFrameCallback) {\r\n        window.requestAnimationFrame(this.#requestFrameCallback);\r\n      }\r\n    };\r\n    window.requestAnimationFrame(this.#requestFrameCallback);\r\n  }\r\n  #draw(x, y) {\r\n    const [lastX, lastY] = this.currentPath.at(-1);\r\n    if (this.currentPath.length > 1 && x === lastX && y === lastY) {\r\n      return;\r\n    }\r\n    const currentPath = this.currentPath;\r\n    let path2D = this.#currentPath2D;\r\n    currentPath.push([x, y]);\r\n    this.#hasSomethingToDraw = true;\r\n    if (currentPath.length <= 2) {\r\n      path2D.moveTo(...currentPath[0]);\r\n      path2D.lineTo(x, y);\r\n      return;\r\n    }\r\n    if (currentPath.length === 3) {\r\n      this.#currentPath2D = path2D = new Path2D();\r\n      path2D.moveTo(...currentPath[0]);\r\n    }\r\n    this.#makeBezierCurve(path2D, ...currentPath.at(-3), ...currentPath.at(-2), x, y);\r\n  }\r\n  #endPath() {\r\n    if (this.currentPath.length === 0) {\r\n      return;\r\n    }\r\n    const lastPoint = this.currentPath.at(-1);\r\n    this.#currentPath2D.lineTo(...lastPoint);\r\n  }\r\n  #stopDrawing(x, y) {\r\n    this.#requestFrameCallback = null;\r\n    x = Math.min(Math.max(x, 0), this.canvas.width);\r\n    y = Math.min(Math.max(y, 0), this.canvas.height);\r\n    this.#draw(x, y);\r\n    this.#endPath();\r\n    let bezier;\r\n    if (this.currentPath.length !== 1) {\r\n      bezier = this.#generateBezierPoints();\r\n    } else {\r\n      const xy = [x, y];\r\n      bezier = [[xy, xy.slice(), xy.slice(), xy]];\r\n    }\r\n    const path2D = this.#currentPath2D;\r\n    const currentPath = this.currentPath;\r\n    this.currentPath = [];\r\n    this.#currentPath2D = new Path2D();\r\n    const cmd = () => {\r\n      this.allRawPaths.push(currentPath);\r\n      this.paths.push(bezier);\r\n      this.bezierPath2D.push(path2D);\r\n      this.rebuild();\r\n    };\r\n    const undo = () => {\r\n      this.allRawPaths.pop();\r\n      this.paths.pop();\r\n      this.bezierPath2D.pop();\r\n      if (this.paths.length === 0) {\r\n        this.remove();\r\n      } else {\r\n        if (!this.canvas) {\r\n          this.#createCanvas();\r\n          this.#createObserver();\r\n        }\r\n        this.#fitToContent();\r\n      }\r\n    };\r\n    this.addCommands({\r\n      cmd,\r\n      undo,\r\n      mustExec: true\r\n    });\r\n  }\r\n  #drawPoints() {\r\n    if (!this.#hasSomethingToDraw) {\r\n      return;\r\n    }\r\n    this.#hasSomethingToDraw = false;\r\n    const thickness = Math.ceil(this.thickness * this.parentScale);\r\n    const lastPoints = this.currentPath.slice(-3);\r\n    const x = lastPoints.map(xy => xy[0]);\r\n    const y = lastPoints.map(xy => xy[1]);\r\n    const xMin = Math.min(...x) - thickness;\r\n    const xMax = Math.max(...x) + thickness;\r\n    const yMin = Math.min(...y) - thickness;\r\n    const yMax = Math.max(...y) + thickness;\r\n    const {\r\n      ctx\r\n    } = this;\r\n    ctx.save();\r\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    for (const path of this.bezierPath2D) {\r\n      ctx.stroke(path);\r\n    }\r\n    ctx.stroke(this.#currentPath2D);\r\n    ctx.restore();\r\n  }\r\n  #makeBezierCurve(path2D, x0, y0, x1, y1, x2, y2) {\r\n    const prevX = (x0 + x1) / 2;\r\n    const prevY = (y0 + y1) / 2;\r\n    const x3 = (x1 + x2) / 2;\r\n    const y3 = (y1 + y2) / 2;\r\n    path2D.bezierCurveTo(prevX + 2 * (x1 - prevX) / 3, prevY + 2 * (y1 - prevY) / 3, x3 + 2 * (x1 - x3) / 3, y3 + 2 * (y1 - y3) / 3, x3, y3);\r\n  }\r\n  #generateBezierPoints() {\r\n    const path = this.currentPath;\r\n    if (path.length <= 2) {\r\n      return [[path[0], path[0], path.at(-1), path.at(-1)]];\r\n    }\r\n    const bezierPoints = [];\r\n    let i;\r\n    let [x0, y0] = path[0];\r\n    for (i = 1; i < path.length - 2; i++) {\r\n      const [x1, y1] = path[i];\r\n      const [x2, y2] = path[i + 1];\r\n      const x3 = (x1 + x2) / 2;\r\n      const y3 = (y1 + y2) / 2;\r\n      const control1 = [x0 + 2 * (x1 - x0) / 3, y0 + 2 * (y1 - y0) / 3];\r\n      const control2 = [x3 + 2 * (x1 - x3) / 3, y3 + 2 * (y1 - y3) / 3];\r\n      bezierPoints.push([[x0, y0], control1, control2, [x3, y3]]);\r\n      [x0, y0] = [x3, y3];\r\n    }\r\n    const [x1, y1] = path[i];\r\n    const [x2, y2] = path[i + 1];\r\n    const control1 = [x0 + 2 * (x1 - x0) / 3, y0 + 2 * (y1 - y0) / 3];\r\n    const control2 = [x2 + 2 * (x1 - x2) / 3, y2 + 2 * (y1 - y2) / 3];\r\n    bezierPoints.push([[x0, y0], control1, control2, [x2, y2]]);\r\n    return bezierPoints;\r\n  }\r\n  #redraw() {\r\n    if (this.isEmpty()) {\r\n      this.#updateTransform();\r\n      return;\r\n    }\r\n    this.#setStroke();\r\n    const {\r\n      canvas,\r\n      ctx\r\n    } = this;\r\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    this.#updateTransform();\r\n    for (const path of this.bezierPath2D) {\r\n      ctx.stroke(path);\r\n    }\r\n  }\r\n  commit() {\r\n    if (this.#disableEditing) {\r\n      return;\r\n    }\r\n    super.commit();\r\n    this.isEditing = false;\r\n    this.disableEditMode();\r\n    this.setInForeground();\r\n    this.#disableEditing = true;\r\n    this.div.classList.add(\"disabled\");\r\n    this.#fitToContent(true);\r\n    this.select();\r\n    this.parent.addInkEditorIfNeeded(true);\r\n    this.moveInDOM();\r\n    this.div.focus({\r\n      preventScroll: true\r\n    });\r\n  }\r\n  focusin(event) {\r\n    if (!this._focusEventsAllowed) {\r\n      return;\r\n    }\r\n    super.focusin(event);\r\n    this.enableEditMode();\r\n  }\r\n  canvasPointerdown(event) {\r\n    if (event.button !== 0 || !this.isInEditMode() || this.#disableEditing) {\r\n      return;\r\n    }\r\n    this.setInForeground();\r\n    event.preventDefault();\r\n    if (!this.div.contains(document.activeElement)) {\r\n      this.div.focus({\r\n        preventScroll: true\r\n      });\r\n    }\r\n    this.#startDrawing(event.offsetX, event.offsetY);\r\n  }\r\n  canvasPointermove(event) {\r\n    event.preventDefault();\r\n    this.#draw(event.offsetX, event.offsetY);\r\n  }\r\n  canvasPointerup(event) {\r\n    event.preventDefault();\r\n    this.#endDrawing(event);\r\n  }\r\n  canvasPointerleave(event) {\r\n    this.#endDrawing(event);\r\n  }\r\n  #endDrawing(event) {\r\n    this.canvas.removeEventListener(\"pointerleave\", this.#boundCanvasPointerleave);\r\n    this.canvas.removeEventListener(\"pointermove\", this.#boundCanvasPointermove);\r\n    this.canvas.removeEventListener(\"pointerup\", this.#boundCanvasPointerup);\r\n    this.canvas.addEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\r\n    if (this.#canvasContextMenuTimeoutId) {\r\n      clearTimeout(this.#canvasContextMenuTimeoutId);\r\n    }\r\n    this.#canvasContextMenuTimeoutId = setTimeout(() => {\r\n      this.#canvasContextMenuTimeoutId = null;\r\n      this.canvas.removeEventListener(\"contextmenu\", display_utils.noContextMenu);\r\n    }, 10);\r\n    this.#stopDrawing(event.offsetX, event.offsetY);\r\n    this.addToAnnotationStorage();\r\n    this.setInBackground();\r\n  }\r\n  #createCanvas() {\r\n    this.canvas = document.createElement(\"canvas\");\r\n    this.canvas.width = this.canvas.height = 0;\r\n    this.canvas.className = \"inkEditorCanvas\";\r\n    this.canvas.setAttribute(\"data-l10n-id\", \"pdfjs-ink-canvas\");\r\n    this.div.append(this.canvas);\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n  }\r\n  #createObserver() {\r\n    this.#observer = new ResizeObserver(entries => {\r\n      const rect = entries[0].contentRect;\r\n      if (rect.width && rect.height) {\r\n        this.setDimensions(rect.width, rect.height);\r\n      }\r\n    });\r\n    this.#observer.observe(this.div);\r\n  }\r\n  get isResizable() {\r\n    return !this.isEmpty() && this.#disableEditing;\r\n  }\r\n  render() {\r\n    if (this.div) {\r\n      return this.div;\r\n    }\r\n    let baseX, baseY;\r\n    if (this.width) {\r\n      baseX = this.x;\r\n      baseY = this.y;\r\n    }\r\n    super.render();\r\n    this.div.setAttribute(\"data-l10n-id\", \"pdfjs-ink\");\r\n    const [x, y, w, h] = this.#getInitialBBox();\r\n    this.setAt(x, y, 0, 0);\r\n    this.setDims(w, h);\r\n    this.#createCanvas();\r\n    if (this.width) {\r\n      const [parentWidth, parentHeight] = this.parentDimensions;\r\n      this.setAspectRatio(this.width * parentWidth, this.height * parentHeight);\r\n      this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);\r\n      this.#isCanvasInitialized = true;\r\n      this.#setCanvasDims();\r\n      this.setDims(this.width * parentWidth, this.height * parentHeight);\r\n      this.#redraw();\r\n      this.div.classList.add(\"disabled\");\r\n    } else {\r\n      this.div.classList.add(\"editing\");\r\n      this.enableEditMode();\r\n    }\r\n    this.#createObserver();\r\n    return this.div;\r\n  }\r\n  #setCanvasDims() {\r\n    if (!this.#isCanvasInitialized) {\r\n      return;\r\n    }\r\n    const [parentWidth, parentHeight] = this.parentDimensions;\r\n    this.canvas.width = Math.ceil(this.width * parentWidth);\r\n    this.canvas.height = Math.ceil(this.height * parentHeight);\r\n    this.#updateTransform();\r\n  }\r\n  setDimensions(width, height) {\r\n    const roundedWidth = Math.round(width);\r\n    const roundedHeight = Math.round(height);\r\n    if (this.#realWidth === roundedWidth && this.#realHeight === roundedHeight) {\r\n      return;\r\n    }\r\n    this.#realWidth = roundedWidth;\r\n    this.#realHeight = roundedHeight;\r\n    this.canvas.style.visibility = \"hidden\";\r\n    const [parentWidth, parentHeight] = this.parentDimensions;\r\n    this.width = width / parentWidth;\r\n    this.height = height / parentHeight;\r\n    this.fixAndSetPosition();\r\n    if (this.#disableEditing) {\r\n      this.#setScaleFactor(width, height);\r\n    }\r\n    this.#setCanvasDims();\r\n    this.#redraw();\r\n    this.canvas.style.visibility = \"visible\";\r\n    this.fixDims();\r\n  }\r\n  #setScaleFactor(width, height) {\r\n    const padding = this.#getPadding();\r\n    const scaleFactorW = (width - padding) / this.#baseWidth;\r\n    const scaleFactorH = (height - padding) / this.#baseHeight;\r\n    this.scaleFactor = Math.min(scaleFactorW, scaleFactorH);\r\n  }\r\n  #updateTransform() {\r\n    const padding = this.#getPadding() / 2;\r\n    this.ctx.setTransform(this.scaleFactor, 0, 0, this.scaleFactor, this.translationX * this.scaleFactor + padding, this.translationY * this.scaleFactor + padding);\r\n  }\r\n  static #buildPath2D(bezier) {\r\n    const path2D = new Path2D();\r\n    for (let i = 0, ii = bezier.length; i < ii; i++) {\r\n      const [first, control1, control2, second] = bezier[i];\r\n      if (i === 0) {\r\n        path2D.moveTo(...first);\r\n      }\r\n      path2D.bezierCurveTo(control1[0], control1[1], control2[0], control2[1], second[0], second[1]);\r\n    }\r\n    return path2D;\r\n  }\r\n  static #toPDFCoordinates(points, rect, rotation) {\r\n    const [blX, blY, trX, trY] = rect;\r\n    switch (rotation) {\r\n      case 0:\r\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\r\n          points[i] += blX;\r\n          points[i + 1] = trY - points[i + 1];\r\n        }\r\n        break;\r\n      case 90:\r\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\r\n          const x = points[i];\r\n          points[i] = points[i + 1] + blX;\r\n          points[i + 1] = x + blY;\r\n        }\r\n        break;\r\n      case 180:\r\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\r\n          points[i] = trX - points[i];\r\n          points[i + 1] += blY;\r\n        }\r\n        break;\r\n      case 270:\r\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\r\n          const x = points[i];\r\n          points[i] = trX - points[i + 1];\r\n          points[i + 1] = trY - x;\r\n        }\r\n        break;\r\n      default:\r\n        throw new Error(\"Invalid rotation\");\r\n    }\r\n    return points;\r\n  }\r\n  static #fromPDFCoordinates(points, rect, rotation) {\r\n    const [blX, blY, trX, trY] = rect;\r\n    switch (rotation) {\r\n      case 0:\r\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\r\n          points[i] -= blX;\r\n          points[i + 1] = trY - points[i + 1];\r\n        }\r\n        break;\r\n      case 90:\r\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\r\n          const x = points[i];\r\n          points[i] = points[i + 1] - blY;\r\n          points[i + 1] = x - blX;\r\n        }\r\n        break;\r\n      case 180:\r\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\r\n          points[i] = trX - points[i];\r\n          points[i + 1] -= blY;\r\n        }\r\n        break;\r\n      case 270:\r\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\r\n          const x = points[i];\r\n          points[i] = trY - points[i + 1];\r\n          points[i + 1] = trX - x;\r\n        }\r\n        break;\r\n      default:\r\n        throw new Error(\"Invalid rotation\");\r\n    }\r\n    return points;\r\n  }\r\n  #serializePaths(s, tx, ty, rect) {\r\n    const paths = [];\r\n    const padding = this.thickness / 2;\r\n    const shiftX = s * tx + padding;\r\n    const shiftY = s * ty + padding;\r\n    for (const bezier of this.paths) {\r\n      const buffer = [];\r\n      const points = [];\r\n      for (let j = 0, jj = bezier.length; j < jj; j++) {\r\n        const [first, control1, control2, second] = bezier[j];\r\n        const p10 = s * first[0] + shiftX;\r\n        const p11 = s * first[1] + shiftY;\r\n        const p20 = s * control1[0] + shiftX;\r\n        const p21 = s * control1[1] + shiftY;\r\n        const p30 = s * control2[0] + shiftX;\r\n        const p31 = s * control2[1] + shiftY;\r\n        const p40 = s * second[0] + shiftX;\r\n        const p41 = s * second[1] + shiftY;\r\n        if (j === 0) {\r\n          buffer.push(p10, p11);\r\n          points.push(p10, p11);\r\n        }\r\n        buffer.push(p20, p21, p30, p31, p40, p41);\r\n        points.push(p20, p21);\r\n        if (j === jj - 1) {\r\n          points.push(p40, p41);\r\n        }\r\n      }\r\n      paths.push({\r\n        bezier: InkEditor.#toPDFCoordinates(buffer, rect, this.rotation),\r\n        points: InkEditor.#toPDFCoordinates(points, rect, this.rotation)\r\n      });\r\n    }\r\n    return paths;\r\n  }\r\n  #getBbox() {\r\n    let xMin = Infinity;\r\n    let xMax = -Infinity;\r\n    let yMin = Infinity;\r\n    let yMax = -Infinity;\r\n    for (const path of this.paths) {\r\n      for (const [first, control1, control2, second] of path) {\r\n        const bbox = util.Util.bezierBoundingBox(...first, ...control1, ...control2, ...second);\r\n        xMin = Math.min(xMin, bbox[0]);\r\n        yMin = Math.min(yMin, bbox[1]);\r\n        xMax = Math.max(xMax, bbox[2]);\r\n        yMax = Math.max(yMax, bbox[3]);\r\n      }\r\n    }\r\n    return [xMin, yMin, xMax, yMax];\r\n  }\r\n  #getPadding() {\r\n    return this.#disableEditing ? Math.ceil(this.thickness * this.parentScale) : 0;\r\n  }\r\n  #fitToContent(firstTime = false) {\r\n    if (this.isEmpty()) {\r\n      return;\r\n    }\r\n    if (!this.#disableEditing) {\r\n      this.#redraw();\r\n      return;\r\n    }\r\n    const bbox = this.#getBbox();\r\n    const padding = this.#getPadding();\r\n    this.#baseWidth = Math.max(editor_editor.AnnotationEditor.MIN_SIZE, bbox[2] - bbox[0]);\r\n    this.#baseHeight = Math.max(editor_editor.AnnotationEditor.MIN_SIZE, bbox[3] - bbox[1]);\r\n    const width = Math.ceil(padding + this.#baseWidth * this.scaleFactor);\r\n    const height = Math.ceil(padding + this.#baseHeight * this.scaleFactor);\r\n    const [parentWidth, parentHeight] = this.parentDimensions;\r\n    this.width = width / parentWidth;\r\n    this.height = height / parentHeight;\r\n    this.setAspectRatio(width, height);\r\n    const prevTranslationX = this.translationX;\r\n    const prevTranslationY = this.translationY;\r\n    this.translationX = -bbox[0];\r\n    this.translationY = -bbox[1];\r\n    this.#setCanvasDims();\r\n    this.#redraw();\r\n    this.#realWidth = width;\r\n    this.#realHeight = height;\r\n    this.setDims(width, height);\r\n    const unscaledPadding = firstTime ? padding / this.scaleFactor / 2 : 0;\r\n    this.translate(prevTranslationX - this.translationX - unscaledPadding, prevTranslationY - this.translationY - unscaledPadding);\r\n  }\r\n  static deserialize(data, parent, uiManager) {\r\n    if (data instanceof annotation_layer.InkAnnotationElement) {\r\n      return null;\r\n    }\r\n    const editor = super.deserialize(data, parent, uiManager);\r\n    editor.thickness = data.thickness;\r\n    editor.color = util.Util.makeHexColor(...data.color);\r\n    editor.opacity = data.opacity;\r\n    const [pageWidth, pageHeight] = editor.pageDimensions;\r\n    const width = editor.width * pageWidth;\r\n    const height = editor.height * pageHeight;\r\n    const scaleFactor = editor.parentScale;\r\n    const padding = data.thickness / 2;\r\n    editor.#disableEditing = true;\r\n    editor.#realWidth = Math.round(width);\r\n    editor.#realHeight = Math.round(height);\r\n    const {\r\n      paths,\r\n      rect,\r\n      rotation\r\n    } = data;\r\n    for (let {\r\n      bezier\r\n    } of paths) {\r\n      bezier = InkEditor.#fromPDFCoordinates(bezier, rect, rotation);\r\n      const path = [];\r\n      editor.paths.push(path);\r\n      let p0 = scaleFactor * (bezier[0] - padding);\r\n      let p1 = scaleFactor * (bezier[1] - padding);\r\n      for (let i = 2, ii = bezier.length; i < ii; i += 6) {\r\n        const p10 = scaleFactor * (bezier[i] - padding);\r\n        const p11 = scaleFactor * (bezier[i + 1] - padding);\r\n        const p20 = scaleFactor * (bezier[i + 2] - padding);\r\n        const p21 = scaleFactor * (bezier[i + 3] - padding);\r\n        const p30 = scaleFactor * (bezier[i + 4] - padding);\r\n        const p31 = scaleFactor * (bezier[i + 5] - padding);\r\n        path.push([[p0, p1], [p10, p11], [p20, p21], [p30, p31]]);\r\n        p0 = p30;\r\n        p1 = p31;\r\n      }\r\n      const path2D = this.#buildPath2D(path);\r\n      editor.bezierPath2D.push(path2D);\r\n    }\r\n    const bbox = editor.#getBbox();\r\n    editor.#baseWidth = Math.max(editor_editor.AnnotationEditor.MIN_SIZE, bbox[2] - bbox[0]);\r\n    editor.#baseHeight = Math.max(editor_editor.AnnotationEditor.MIN_SIZE, bbox[3] - bbox[1]);\r\n    editor.#setScaleFactor(width, height);\r\n    return editor;\r\n  }\r\n  serialize() {\r\n    if (this.isEmpty()) {\r\n      return null;\r\n    }\r\n    const rect = this.getRect(0, 0);\r\n    const color = editor_editor.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);\r\n    return {\r\n      annotationType: util.AnnotationEditorType.INK,\r\n      color,\r\n      thickness: this.thickness,\r\n      opacity: this.opacity,\r\n      paths: this.#serializePaths(this.scaleFactor / this.parentScale, this.translationX, this.translationY, rect),\r\n      pageIndex: this.pageIndex,\r\n      rect,\r\n      rotation: this.rotation,\r\n      structTreeParentId: this._structTreeParentId\r\n    };\r\n  }\r\n}\r\n\r\n;// CONCATENATED MODULE: ./src/display/editor/stamp.js\r\n\r\n\r\n\r\n\r\nclass StampEditor extends editor_editor.AnnotationEditor {\r\n  #bitmap = null;\r\n  #bitmapId = null;\r\n  #bitmapPromise = null;\r\n  #bitmapUrl = null;\r\n  #bitmapFile = null;\r\n  #bitmapFileName = \"\";\r\n  #canvas = null;\r\n  #observer = null;\r\n  #resizeTimeoutId = null;\r\n  #isSvg = false;\r\n  #hasBeenAddedInUndoStack = false;\r\n  static _type = \"stamp\";\r\n  static _editorType = util.AnnotationEditorType.STAMP;\r\n  constructor(params) {\r\n    super({\r\n      ...params,\r\n      name: \"stampEditor\"\r\n    });\r\n    this.#bitmapUrl = params.bitmapUrl;\r\n    this.#bitmapFile = params.bitmapFile;\r\n  }\r\n  static initialize(l10n) {\r\n    editor_editor.AnnotationEditor.initialize(l10n);\r\n  }\r\n  static get supportedTypes() {\r\n    const types = [\"apng\", \"avif\", \"bmp\", \"gif\", \"jpeg\", \"png\", \"svg+xml\", \"webp\", \"x-icon\"];\r\n    return (0,util.shadow)(this, \"supportedTypes\", types.map(type => `image/${type}`));\r\n  }\r\n  static get supportedTypesStr() {\r\n    return (0,util.shadow)(this, \"supportedTypesStr\", this.supportedTypes.join(\",\"));\r\n  }\r\n  static isHandlingMimeForPasting(mime) {\r\n    return this.supportedTypes.includes(mime);\r\n  }\r\n  static paste(item, parent) {\r\n    parent.pasteEditor(util.AnnotationEditorType.STAMP, {\r\n      bitmapFile: item.getAsFile()\r\n    });\r\n  }\r\n  #getBitmapFetched(data, fromId = false) {\r\n    if (!data) {\r\n      this.remove();\r\n      return;\r\n    }\r\n    this.#bitmap = data.bitmap;\r\n    if (!fromId) {\r\n      this.#bitmapId = data.id;\r\n      this.#isSvg = data.isSvg;\r\n    }\r\n    if (data.file) {\r\n      this.#bitmapFileName = data.file.name;\r\n    }\r\n    this.#createCanvas();\r\n  }\r\n  #getBitmapDone() {\r\n    this.#bitmapPromise = null;\r\n    this._uiManager.enableWaiting(false);\r\n    if (this.#canvas) {\r\n      this.div.focus();\r\n    }\r\n  }\r\n  #getBitmap() {\r\n    if (this.#bitmapId) {\r\n      this._uiManager.enableWaiting(true);\r\n      this._uiManager.imageManager.getFromId(this.#bitmapId).then(data => this.#getBitmapFetched(data, true)).finally(() => this.#getBitmapDone());\r\n      return;\r\n    }\r\n    if (this.#bitmapUrl) {\r\n      const url = this.#bitmapUrl;\r\n      this.#bitmapUrl = null;\r\n      this._uiManager.enableWaiting(true);\r\n      this.#bitmapPromise = this._uiManager.imageManager.getFromUrl(url).then(data => this.#getBitmapFetched(data)).finally(() => this.#getBitmapDone());\r\n      return;\r\n    }\r\n    if (this.#bitmapFile) {\r\n      const file = this.#bitmapFile;\r\n      this.#bitmapFile = null;\r\n      this._uiManager.enableWaiting(true);\r\n      this.#bitmapPromise = this._uiManager.imageManager.getFromFile(file).then(data => this.#getBitmapFetched(data)).finally(() => this.#getBitmapDone());\r\n      return;\r\n    }\r\n    const input = document.createElement(\"input\");\r\n    input.type = \"file\";\r\n    input.accept = StampEditor.supportedTypesStr;\r\n    this.#bitmapPromise = new Promise(resolve => {\r\n      input.addEventListener(\"change\", async () => {\r\n        if (!input.files || input.files.length === 0) {\r\n          this.remove();\r\n        } else {\r\n          this._uiManager.enableWaiting(true);\r\n          const data = await this._uiManager.imageManager.getFromFile(input.files[0]);\r\n          this.#getBitmapFetched(data);\r\n        }\r\n        resolve();\r\n      });\r\n      input.addEventListener(\"cancel\", () => {\r\n        this.remove();\r\n        resolve();\r\n      });\r\n    }).finally(() => this.#getBitmapDone());\r\n    input.click();\r\n  }\r\n  remove() {\r\n    if (this.#bitmapId) {\r\n      this.#bitmap = null;\r\n      this._uiManager.imageManager.deleteId(this.#bitmapId);\r\n      this.#canvas?.remove();\r\n      this.#canvas = null;\r\n      this.#observer?.disconnect();\r\n      this.#observer = null;\r\n      if (this.#resizeTimeoutId) {\r\n        clearTimeout(this.#resizeTimeoutId);\r\n        this.#resizeTimeoutId = null;\r\n      }\r\n    }\r\n    super.remove();\r\n  }\r\n  rebuild() {\r\n    if (!this.parent) {\r\n      if (this.#bitmapId) {\r\n        this.#getBitmap();\r\n      }\r\n      return;\r\n    }\r\n    super.rebuild();\r\n    if (this.div === null) {\r\n      return;\r\n    }\r\n    if (this.#bitmapId) {\r\n      this.#getBitmap();\r\n    }\r\n    if (!this.isAttachedToDOM) {\r\n      this.parent.add(this);\r\n    }\r\n  }\r\n  onceAdded() {\r\n    this._isDraggable = true;\r\n    this.div.focus();\r\n  }\r\n  isEmpty() {\r\n    return !(this.#bitmapPromise || this.#bitmap || this.#bitmapUrl || this.#bitmapFile);\r\n  }\r\n  get isResizable() {\r\n    return true;\r\n  }\r\n  render() {\r\n    if (this.div) {\r\n      return this.div;\r\n    }\r\n    let baseX, baseY;\r\n    if (this.width) {\r\n      baseX = this.x;\r\n      baseY = this.y;\r\n    }\r\n    super.render();\r\n    this.div.hidden = true;\r\n    if (this.#bitmap) {\r\n      this.#createCanvas();\r\n    } else {\r\n      this.#getBitmap();\r\n    }\r\n    if (this.width) {\r\n      const [parentWidth, parentHeight] = this.parentDimensions;\r\n      this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);\r\n    }\r\n    return this.div;\r\n  }\r\n  #createCanvas() {\r\n    const {\r\n      div\r\n    } = this;\r\n    let {\r\n      width,\r\n      height\r\n    } = this.#bitmap;\r\n    const [pageWidth, pageHeight] = this.pageDimensions;\r\n    const MAX_RATIO = 0.75;\r\n    if (this.width) {\r\n      width = this.width * pageWidth;\r\n      height = this.height * pageHeight;\r\n    } else if (width > MAX_RATIO * pageWidth || height > MAX_RATIO * pageHeight) {\r\n      const factor = Math.min(MAX_RATIO * pageWidth / width, MAX_RATIO * pageHeight / height);\r\n      width *= factor;\r\n      height *= factor;\r\n    }\r\n    const [parentWidth, parentHeight] = this.parentDimensions;\r\n    this.setDims(width * parentWidth / pageWidth, height * parentHeight / pageHeight);\r\n    this._uiManager.enableWaiting(false);\r\n    const canvas = this.#canvas = document.createElement(\"canvas\");\r\n    div.append(canvas);\r\n    div.hidden = false;\r\n    this.#drawBitmap(width, height);\r\n    this.#createObserver();\r\n    if (!this.#hasBeenAddedInUndoStack) {\r\n      this.parent.addUndoableEditor(this);\r\n      this.#hasBeenAddedInUndoStack = true;\r\n    }\r\n    this._uiManager._eventBus.dispatch(\"reporttelemetry\", {\r\n      source: this,\r\n      details: {\r\n        type: \"editing\",\r\n        subtype: this.editorType,\r\n        data: {\r\n          action: \"inserted_image\"\r\n        }\r\n      }\r\n    });\r\n    this.addAltTextButton();\r\n    if (this.#bitmapFileName) {\r\n      canvas.setAttribute(\"aria-label\", this.#bitmapFileName);\r\n    }\r\n  }\r\n  #setDimensions(width, height) {\r\n    const [parentWidth, parentHeight] = this.parentDimensions;\r\n    this.width = width / parentWidth;\r\n    this.height = height / parentHeight;\r\n    this.setDims(width, height);\r\n    if (this._initialOptions?.isCentered) {\r\n      this.center();\r\n    } else {\r\n      this.fixAndSetPosition();\r\n    }\r\n    this._initialOptions = null;\r\n    if (this.#resizeTimeoutId !== null) {\r\n      clearTimeout(this.#resizeTimeoutId);\r\n    }\r\n    const TIME_TO_WAIT = 200;\r\n    this.#resizeTimeoutId = setTimeout(() => {\r\n      this.#resizeTimeoutId = null;\r\n      this.#drawBitmap(width, height);\r\n    }, TIME_TO_WAIT);\r\n  }\r\n  #scaleBitmap(width, height) {\r\n    const {\r\n      width: bitmapWidth,\r\n      height: bitmapHeight\r\n    } = this.#bitmap;\r\n    let newWidth = bitmapWidth;\r\n    let newHeight = bitmapHeight;\r\n    let bitmap = this.#bitmap;\r\n    while (newWidth > 2 * width || newHeight > 2 * height) {\r\n      const prevWidth = newWidth;\r\n      const prevHeight = newHeight;\r\n      if (newWidth > 2 * width) {\r\n        newWidth = newWidth >= 16384 ? Math.floor(newWidth / 2) - 1 : Math.ceil(newWidth / 2);\r\n      }\r\n      if (newHeight > 2 * height) {\r\n        newHeight = newHeight >= 16384 ? Math.floor(newHeight / 2) - 1 : Math.ceil(newHeight / 2);\r\n      }\r\n      const offscreen = new OffscreenCanvas(newWidth, newHeight);\r\n      const ctx = offscreen.getContext(\"2d\");\r\n      ctx.drawImage(bitmap, 0, 0, prevWidth, prevHeight, 0, 0, newWidth, newHeight);\r\n      bitmap = offscreen.transferToImageBitmap();\r\n    }\r\n    return bitmap;\r\n  }\r\n  #drawBitmap(width, height) {\r\n    width = Math.ceil(width);\r\n    height = Math.ceil(height);\r\n    const canvas = this.#canvas;\r\n    if (!canvas || canvas.width === width && canvas.height === height) {\r\n      return;\r\n    }\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    const bitmap = this.#isSvg ? this.#bitmap : this.#scaleBitmap(width, height);\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.filter = this._uiManager.hcmFilter;\r\n    ctx.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height, 0, 0, width, height);\r\n  }\r\n  getImageForAltText() {\r\n    return this.#canvas;\r\n  }\r\n  #serializeBitmap(toUrl) {\r\n    if (toUrl) {\r\n      if (this.#isSvg) {\r\n        const url = this._uiManager.imageManager.getSvgUrl(this.#bitmapId);\r\n        if (url) {\r\n          return url;\r\n        }\r\n      }\r\n      const canvas = document.createElement(\"canvas\");\r\n      ({\r\n        width: canvas.width,\r\n        height: canvas.height\r\n      } = this.#bitmap);\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.drawImage(this.#bitmap, 0, 0);\r\n      return canvas.toDataURL();\r\n    }\r\n    if (this.#isSvg) {\r\n      const [pageWidth, pageHeight] = this.pageDimensions;\r\n      const width = Math.round(this.width * pageWidth * display_utils.PixelsPerInch.PDF_TO_CSS_UNITS);\r\n      const height = Math.round(this.height * pageHeight * display_utils.PixelsPerInch.PDF_TO_CSS_UNITS);\r\n      const offscreen = new OffscreenCanvas(width, height);\r\n      const ctx = offscreen.getContext(\"2d\");\r\n      ctx.drawImage(this.#bitmap, 0, 0, this.#bitmap.width, this.#bitmap.height, 0, 0, width, height);\r\n      return offscreen.transferToImageBitmap();\r\n    }\r\n    return structuredClone(this.#bitmap);\r\n  }\r\n  #createObserver() {\r\n    this.#observer = new ResizeObserver(entries => {\r\n      const rect = entries[0].contentRect;\r\n      if (rect.width && rect.height) {\r\n        this.#setDimensions(rect.width, rect.height);\r\n      }\r\n    });\r\n    this.#observer.observe(this.div);\r\n  }\r\n  static deserialize(data, parent, uiManager) {\r\n    if (data instanceof annotation_layer.StampAnnotationElement) {\r\n      return null;\r\n    }\r\n    const editor = super.deserialize(data, parent, uiManager);\r\n    const {\r\n      rect,\r\n      bitmapUrl,\r\n      bitmapId,\r\n      isSvg,\r\n      accessibilityData\r\n    } = data;\r\n    if (bitmapId && uiManager.imageManager.isValidId(bitmapId)) {\r\n      editor.#bitmapId = bitmapId;\r\n    } else {\r\n      editor.#bitmapUrl = bitmapUrl;\r\n    }\r\n    editor.#isSvg = isSvg;\r\n    const [parentWidth, parentHeight] = editor.pageDimensions;\r\n    editor.width = (rect[2] - rect[0]) / parentWidth;\r\n    editor.height = (rect[3] - rect[1]) / parentHeight;\r\n    if (accessibilityData) {\r\n      editor.altTextData = accessibilityData;\r\n    }\r\n    return editor;\r\n  }\r\n  serialize(isForCopying = false, context = null) {\r\n    if (this.isEmpty()) {\r\n      return null;\r\n    }\r\n    const serialized = {\r\n      annotationType: util.AnnotationEditorType.STAMP,\r\n      bitmapId: this.#bitmapId,\r\n      pageIndex: this.pageIndex,\r\n      rect: this.getRect(0, 0),\r\n      rotation: this.rotation,\r\n      isSvg: this.#isSvg,\r\n      structTreeParentId: this._structTreeParentId\r\n    };\r\n    if (isForCopying) {\r\n      serialized.bitmapUrl = this.#serializeBitmap(true);\r\n      serialized.accessibilityData = this.altTextData;\r\n      return serialized;\r\n    }\r\n    const {\r\n      decorative,\r\n      altText\r\n    } = this.altTextData;\r\n    if (!decorative && altText) {\r\n      serialized.accessibilityData = {\r\n        type: \"Figure\",\r\n        alt: altText\r\n      };\r\n    }\r\n    if (context === null) {\r\n      return serialized;\r\n    }\r\n    context.stamps ||= new Map();\r\n    const area = this.#isSvg ? (serialized.rect[2] - serialized.rect[0]) * (serialized.rect[3] - serialized.rect[1]) : null;\r\n    if (!context.stamps.has(this.#bitmapId)) {\r\n      context.stamps.set(this.#bitmapId, {\r\n        area,\r\n        serialized\r\n      });\r\n      serialized.bitmap = this.#serializeBitmap(false);\r\n    } else if (this.#isSvg) {\r\n      const prevData = context.stamps.get(this.#bitmapId);\r\n      if (area > prevData.area) {\r\n        prevData.area = area;\r\n        prevData.serialized.bitmap.close();\r\n        prevData.serialized.bitmap = this.#serializeBitmap(false);\r\n      }\r\n    }\r\n    return serialized;\r\n  }\r\n}\r\n\r\n;// CONCATENATED MODULE: ./src/display/editor/annotation_editor_layer.js\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass AnnotationEditorLayer {\r\n  #accessibilityManager;\r\n  #allowClick = false;\r\n  #annotationLayer = null;\r\n  #boundPointerup = this.pointerup.bind(this);\r\n  #boundPointerUpAfterSelection = this.pointerUpAfterSelection.bind(this);\r\n  #boundPointerdown = this.pointerdown.bind(this);\r\n  #editorFocusTimeoutId = null;\r\n  #boundSelectionStart = this.selectionStart.bind(this);\r\n  #editors = new Map();\r\n  #hadPointerDown = false;\r\n  #isCleaningUp = false;\r\n  #isDisabling = false;\r\n  #textLayer = null;\r\n  #uiManager;\r\n  static _initialized = false;\r\n  static #editorTypes = new Map([FreeTextEditor, InkEditor, StampEditor, HighlightEditor].map(type => [type._editorType, type]));\r\n  constructor({\r\n    uiManager,\r\n    pageIndex,\r\n    div,\r\n    accessibilityManager,\r\n    annotationLayer,\r\n    drawLayer,\r\n    textLayer,\r\n    viewport,\r\n    l10n\r\n  }) {\r\n    const editorTypes = [...AnnotationEditorLayer.#editorTypes.values()];\r\n    if (!AnnotationEditorLayer._initialized) {\r\n      AnnotationEditorLayer._initialized = true;\r\n      for (const editorType of editorTypes) {\r\n        editorType.initialize(l10n);\r\n      }\r\n    }\r\n    uiManager.registerEditorTypes(editorTypes);\r\n    this.#uiManager = uiManager;\r\n    this.pageIndex = pageIndex;\r\n    this.div = div;\r\n    this.#accessibilityManager = accessibilityManager;\r\n    this.#annotationLayer = annotationLayer;\r\n    this.viewport = viewport;\r\n    this.#textLayer = textLayer;\r\n    this.drawLayer = drawLayer;\r\n    this.#uiManager.addLayer(this);\r\n  }\r\n  get isEmpty() {\r\n    return this.#editors.size === 0;\r\n  }\r\n  updateToolbar(mode) {\r\n    this.#uiManager.updateToolbar(mode);\r\n  }\r\n  updateMode(mode = this.#uiManager.getMode()) {\r\n    this.#cleanup();\r\n    switch (mode) {\r\n      case util.AnnotationEditorType.NONE:\r\n        this.disableTextSelection();\r\n        this.togglePointerEvents(false);\r\n        this.disableClick();\r\n        break;\r\n      case util.AnnotationEditorType.INK:\r\n        this.addInkEditorIfNeeded(false);\r\n        this.disableTextSelection();\r\n        this.togglePointerEvents(true);\r\n        this.disableClick();\r\n        break;\r\n      case util.AnnotationEditorType.HIGHLIGHT:\r\n        this.enableTextSelection();\r\n        this.togglePointerEvents(false);\r\n        this.disableClick();\r\n        break;\r\n      default:\r\n        this.disableTextSelection();\r\n        this.togglePointerEvents(true);\r\n        this.enableClick();\r\n    }\r\n    if (mode !== util.AnnotationEditorType.NONE) {\r\n      const {\r\n        classList\r\n      } = this.div;\r\n      for (const editorType of AnnotationEditorLayer.#editorTypes.values()) {\r\n        classList.toggle(`${editorType._type}Editing`, mode === editorType._editorType);\r\n      }\r\n      this.div.hidden = false;\r\n    }\r\n  }\r\n  addInkEditorIfNeeded(isCommitting) {\r\n    if (this.#uiManager.getMode() !== util.AnnotationEditorType.INK) {\r\n      return;\r\n    }\r\n    if (!isCommitting) {\r\n      for (const editor of this.#editors.values()) {\r\n        if (editor.isEmpty()) {\r\n          editor.setInBackground();\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    const editor = this.#createAndAddNewEditor({\r\n      offsetX: 0,\r\n      offsetY: 0\r\n    }, false);\r\n    editor.setInBackground();\r\n  }\r\n  setEditingState(isEditing) {\r\n    this.#uiManager.setEditingState(isEditing);\r\n  }\r\n  addCommands(params) {\r\n    this.#uiManager.addCommands(params);\r\n  }\r\n  togglePointerEvents(enabled = false) {\r\n    this.div.classList.toggle(\"disabled\", !enabled);\r\n  }\r\n  enable() {\r\n    this.togglePointerEvents(true);\r\n    const annotationElementIds = new Set();\r\n    for (const editor of this.#editors.values()) {\r\n      editor.enableEditing();\r\n      if (editor.annotationElementId) {\r\n        annotationElementIds.add(editor.annotationElementId);\r\n      }\r\n    }\r\n    if (!this.#annotationLayer) {\r\n      return;\r\n    }\r\n    const editables = this.#annotationLayer.getEditableAnnotations();\r\n    for (const editable of editables) {\r\n      editable.hide();\r\n      if (this.#uiManager.isDeletedAnnotationElement(editable.data.id)) {\r\n        continue;\r\n      }\r\n      if (annotationElementIds.has(editable.data.id)) {\r\n        continue;\r\n      }\r\n      const editor = this.deserialize(editable);\r\n      if (!editor) {\r\n        continue;\r\n      }\r\n      this.addOrRebuild(editor);\r\n      editor.enableEditing();\r\n    }\r\n  }\r\n  disable() {\r\n    this.#isDisabling = true;\r\n    this.togglePointerEvents(false);\r\n    const hiddenAnnotationIds = new Set();\r\n    for (const editor of this.#editors.values()) {\r\n      editor.disableEditing();\r\n      if (!editor.annotationElementId || editor.serialize() !== null) {\r\n        hiddenAnnotationIds.add(editor.annotationElementId);\r\n        continue;\r\n      }\r\n      this.getEditableAnnotation(editor.annotationElementId)?.show();\r\n      editor.remove();\r\n    }\r\n    if (this.#annotationLayer) {\r\n      const editables = this.#annotationLayer.getEditableAnnotations();\r\n      for (const editable of editables) {\r\n        const {\r\n          id\r\n        } = editable.data;\r\n        if (hiddenAnnotationIds.has(id) || this.#uiManager.isDeletedAnnotationElement(id)) {\r\n          continue;\r\n        }\r\n        editable.show();\r\n      }\r\n    }\r\n    this.#cleanup();\r\n    if (this.isEmpty) {\r\n      this.div.hidden = true;\r\n    }\r\n    const {\r\n      classList\r\n    } = this.div;\r\n    for (const editorType of AnnotationEditorLayer.#editorTypes.values()) {\r\n      classList.remove(`${editorType._type}Editing`);\r\n    }\r\n    this.disableTextSelection();\r\n    this.#isDisabling = false;\r\n  }\r\n  getEditableAnnotation(id) {\r\n    return this.#annotationLayer?.getEditableAnnotation(id) || null;\r\n  }\r\n  setActiveEditor(editor) {\r\n    const currentActive = this.#uiManager.getActive();\r\n    if (currentActive === editor) {\r\n      return;\r\n    }\r\n    this.#uiManager.setActiveEditor(editor);\r\n  }\r\n  enableTextSelection() {\r\n    if (this.#textLayer?.div) {\r\n      document.addEventListener(\"selectstart\", this.#boundSelectionStart);\r\n    }\r\n  }\r\n  disableTextSelection() {\r\n    if (this.#textLayer?.div) {\r\n      document.removeEventListener(\"selectstart\", this.#boundSelectionStart);\r\n    }\r\n  }\r\n  enableClick() {\r\n    this.div.addEventListener(\"pointerdown\", this.#boundPointerdown);\r\n    this.div.addEventListener(\"pointerup\", this.#boundPointerup);\r\n  }\r\n  disableClick() {\r\n    this.div.removeEventListener(\"pointerdown\", this.#boundPointerdown);\r\n    this.div.removeEventListener(\"pointerup\", this.#boundPointerup);\r\n  }\r\n  attach(editor) {\r\n    this.#editors.set(editor.id, editor);\r\n    const {\r\n      annotationElementId\r\n    } = editor;\r\n    if (annotationElementId && this.#uiManager.isDeletedAnnotationElement(annotationElementId)) {\r\n      this.#uiManager.removeDeletedAnnotationElement(editor);\r\n    }\r\n  }\r\n  detach(editor) {\r\n    this.#editors.delete(editor.id);\r\n    this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);\r\n    if (!this.#isDisabling && editor.annotationElementId) {\r\n      this.#uiManager.addDeletedAnnotationElement(editor);\r\n    }\r\n  }\r\n  remove(editor) {\r\n    this.detach(editor);\r\n    this.#uiManager.removeEditor(editor);\r\n    editor.div.remove();\r\n    editor.isAttachedToDOM = false;\r\n    if (!this.#isCleaningUp) {\r\n      this.addInkEditorIfNeeded(false);\r\n    }\r\n  }\r\n  changeParent(editor) {\r\n    if (editor.parent === this) {\r\n      return;\r\n    }\r\n    if (editor.annotationElementId) {\r\n      this.#uiManager.addDeletedAnnotationElement(editor.annotationElementId);\r\n      editor_editor.AnnotationEditor.deleteAnnotationElement(editor);\r\n      editor.annotationElementId = null;\r\n    }\r\n    this.attach(editor);\r\n    editor.parent?.detach(editor);\r\n    editor.setParent(this);\r\n    if (editor.div && editor.isAttachedToDOM) {\r\n      editor.div.remove();\r\n      this.div.append(editor.div);\r\n    }\r\n  }\r\n  add(editor) {\r\n    this.changeParent(editor);\r\n    this.#uiManager.addEditor(editor);\r\n    this.attach(editor);\r\n    if (!editor.isAttachedToDOM) {\r\n      const div = editor.render();\r\n      this.div.append(div);\r\n      editor.isAttachedToDOM = true;\r\n    }\r\n    editor.fixAndSetPosition();\r\n    editor.onceAdded();\r\n    this.#uiManager.addToAnnotationStorage(editor);\r\n  }\r\n  moveEditorInDOM(editor) {\r\n    if (!editor.isAttachedToDOM) {\r\n      return;\r\n    }\r\n    const {\r\n      activeElement\r\n    } = document;\r\n    if (editor.div.contains(activeElement) && !this.#editorFocusTimeoutId) {\r\n      editor._focusEventsAllowed = false;\r\n      this.#editorFocusTimeoutId = setTimeout(() => {\r\n        this.#editorFocusTimeoutId = null;\r\n        if (!editor.div.contains(document.activeElement)) {\r\n          editor.div.addEventListener(\"focusin\", () => {\r\n            editor._focusEventsAllowed = true;\r\n          }, {\r\n            once: true\r\n          });\r\n          activeElement.focus();\r\n        } else {\r\n          editor._focusEventsAllowed = true;\r\n        }\r\n      }, 0);\r\n    }\r\n    editor._structTreeParentId = this.#accessibilityManager?.moveElementInDOM(this.div, editor.div, editor.contentDiv, true);\r\n  }\r\n  addOrRebuild(editor) {\r\n    if (editor.needsToBeRebuilt()) {\r\n      editor.parent ||= this;\r\n      editor.rebuild();\r\n    } else {\r\n      this.add(editor);\r\n    }\r\n  }\r\n  addUndoableEditor(editor) {\r\n    const cmd = () => editor._uiManager.rebuild(editor);\r\n    const undo = () => {\r\n      editor.remove();\r\n    };\r\n    this.addCommands({\r\n      cmd,\r\n      undo,\r\n      mustExec: false\r\n    });\r\n  }\r\n  getNextId() {\r\n    return this.#uiManager.getId();\r\n  }\r\n  get #currentEditorType() {\r\n    return AnnotationEditorLayer.#editorTypes.get(this.#uiManager.getMode());\r\n  }\r\n  #createNewEditor(params) {\r\n    const editorType = this.#currentEditorType;\r\n    return editorType ? new editorType.prototype.constructor(params) : null;\r\n  }\r\n  canCreateNewEmptyEditor() {\r\n    return this.#currentEditorType?.canCreateNewEmptyEditor();\r\n  }\r\n  pasteEditor(mode, params) {\r\n    this.#uiManager.updateToolbar(mode);\r\n    this.#uiManager.updateMode(mode);\r\n    const {\r\n      offsetX,\r\n      offsetY\r\n    } = this.#getCenterPoint();\r\n    const id = this.getNextId();\r\n    const editor = this.#createNewEditor({\r\n      parent: this,\r\n      id,\r\n      x: offsetX,\r\n      y: offsetY,\r\n      uiManager: this.#uiManager,\r\n      isCentered: true,\r\n      ...params\r\n    });\r\n    if (editor) {\r\n      this.add(editor);\r\n    }\r\n  }\r\n  deserialize(data) {\r\n    return AnnotationEditorLayer.#editorTypes.get(data.annotationType ?? data.annotationEditorType)?.deserialize(data, this, this.#uiManager) || null;\r\n  }\r\n  #createAndAddNewEditor(event, isCentered, data = {}) {\r\n    const id = this.getNextId();\r\n    const editor = this.#createNewEditor({\r\n      parent: this,\r\n      id,\r\n      x: event.offsetX,\r\n      y: event.offsetY,\r\n      uiManager: this.#uiManager,\r\n      isCentered,\r\n      ...data\r\n    });\r\n    if (editor) {\r\n      this.add(editor);\r\n    }\r\n    return editor;\r\n  }\r\n  #getCenterPoint() {\r\n    const {\r\n      x,\r\n      y,\r\n      width,\r\n      height\r\n    } = this.div.getBoundingClientRect();\r\n    const tlX = Math.max(0, x);\r\n    const tlY = Math.max(0, y);\r\n    const brX = Math.min(window.innerWidth, x + width);\r\n    const brY = Math.min(window.innerHeight, y + height);\r\n    const centerX = (tlX + brX) / 2 - x;\r\n    const centerY = (tlY + brY) / 2 - y;\r\n    const [offsetX, offsetY] = this.viewport.rotation % 180 === 0 ? [centerX, centerY] : [centerY, centerX];\r\n    return {\r\n      offsetX,\r\n      offsetY\r\n    };\r\n  }\r\n  addNewEditor() {\r\n    this.#createAndAddNewEditor(this.#getCenterPoint(), true);\r\n  }\r\n  setSelected(editor) {\r\n    this.#uiManager.setSelected(editor);\r\n  }\r\n  toggleSelected(editor) {\r\n    this.#uiManager.toggleSelected(editor);\r\n  }\r\n  isSelected(editor) {\r\n    return this.#uiManager.isSelected(editor);\r\n  }\r\n  unselect(editor) {\r\n    this.#uiManager.unselect(editor);\r\n  }\r\n  selectionStart(_event) {\r\n    this.#textLayer?.div.addEventListener(\"pointerup\", this.#boundPointerUpAfterSelection, {\r\n      once: true\r\n    });\r\n  }\r\n  pointerUpAfterSelection(event) {\r\n    const selection = document.getSelection();\r\n    if (selection.rangeCount === 0) {\r\n      return;\r\n    }\r\n    const range = selection.getRangeAt(0);\r\n    if (range.collapsed) {\r\n      return;\r\n    }\r\n    if (!this.#textLayer?.div.contains(range.commonAncestorContainer)) {\r\n      return;\r\n    }\r\n    const {\r\n      x: layerX,\r\n      y: layerY,\r\n      width: parentWidth,\r\n      height: parentHeight\r\n    } = this.#textLayer.div.getBoundingClientRect();\r\n    const bboxes = range.getClientRects();\r\n    let rotator;\r\n    switch (this.viewport.rotation) {\r\n      case 90:\r\n        rotator = (x, y, w, h) => ({\r\n          x: (y - layerY) / parentHeight,\r\n          y: 1 - (x + w - layerX) / parentWidth,\r\n          width: h / parentHeight,\r\n          height: w / parentWidth\r\n        });\r\n        break;\r\n      case 180:\r\n        rotator = (x, y, w, h) => ({\r\n          x: 1 - (x + w - layerX) / parentWidth,\r\n          y: 1 - (y + h - layerY) / parentHeight,\r\n          width: w / parentWidth,\r\n          height: h / parentHeight\r\n        });\r\n        break;\r\n      case 270:\r\n        rotator = (x, y, w, h) => ({\r\n          x: 1 - (y + h - layerY) / parentHeight,\r\n          y: (x - layerX) / parentWidth,\r\n          width: h / parentHeight,\r\n          height: w / parentWidth\r\n        });\r\n        break;\r\n      default:\r\n        rotator = (x, y, w, h) => ({\r\n          x: (x - layerX) / parentWidth,\r\n          y: (y - layerY) / parentHeight,\r\n          width: w / parentWidth,\r\n          height: h / parentHeight\r\n        });\r\n        break;\r\n    }\r\n    const boxes = [];\r\n    for (const {\r\n      x,\r\n      y,\r\n      width,\r\n      height\r\n    } of bboxes) {\r\n      if (width === 0 || height === 0) {\r\n        continue;\r\n      }\r\n      boxes.push(rotator(x, y, width, height));\r\n    }\r\n    if (boxes.length !== 0) {\r\n      this.#createAndAddNewEditor(event, false, {\r\n        boxes\r\n      });\r\n    }\r\n    selection.empty();\r\n  }\r\n  pointerup(event) {\r\n    const {\r\n      isMac\r\n    } = util.FeatureTest.platform;\r\n    if (event.button !== 0 || event.ctrlKey && isMac) {\r\n      return;\r\n    }\r\n    if (event.target !== this.div) {\r\n      return;\r\n    }\r\n    if (!this.#hadPointerDown) {\r\n      return;\r\n    }\r\n    this.#hadPointerDown = false;\r\n    if (!this.#allowClick) {\r\n      this.#allowClick = true;\r\n      return;\r\n    }\r\n    if (this.#uiManager.getMode() === util.AnnotationEditorType.STAMP) {\r\n      this.#uiManager.unselectAll();\r\n      return;\r\n    }\r\n    this.#createAndAddNewEditor(event, false);\r\n  }\r\n  pointerdown(event) {\r\n    if (this.#uiManager.getMode() === util.AnnotationEditorType.HIGHLIGHT) {\r\n      this.enableTextSelection();\r\n    }\r\n    if (this.#hadPointerDown) {\r\n      this.#hadPointerDown = false;\r\n      return;\r\n    }\r\n    const {\r\n      isMac\r\n    } = util.FeatureTest.platform;\r\n    if (event.button !== 0 || event.ctrlKey && isMac) {\r\n      return;\r\n    }\r\n    if (event.target !== this.div) {\r\n      return;\r\n    }\r\n    this.#hadPointerDown = true;\r\n    const editor = this.#uiManager.getActive();\r\n    this.#allowClick = !editor || editor.isEmpty();\r\n  }\r\n  findNewParent(editor, x, y) {\r\n    const layer = this.#uiManager.findParent(x, y);\r\n    if (layer === null || layer === this) {\r\n      return false;\r\n    }\r\n    layer.changeParent(editor);\r\n    return true;\r\n  }\r\n  destroy() {\r\n    if (this.#uiManager.getActive()?.parent === this) {\r\n      this.#uiManager.commitOrRemove();\r\n      this.#uiManager.setActiveEditor(null);\r\n    }\r\n    if (this.#editorFocusTimeoutId) {\r\n      clearTimeout(this.#editorFocusTimeoutId);\r\n      this.#editorFocusTimeoutId = null;\r\n    }\r\n    for (const editor of this.#editors.values()) {\r\n      this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);\r\n      editor.setParent(null);\r\n      editor.isAttachedToDOM = false;\r\n      editor.div.remove();\r\n    }\r\n    this.div = null;\r\n    this.#editors.clear();\r\n    this.#uiManager.removeLayer(this);\r\n  }\r\n  #cleanup() {\r\n    this.#isCleaningUp = true;\r\n    for (const editor of this.#editors.values()) {\r\n      if (editor.isEmpty()) {\r\n        editor.remove();\r\n      }\r\n    }\r\n    this.#isCleaningUp = false;\r\n  }\r\n  render({\r\n    viewport\r\n  }) {\r\n    this.viewport = viewport;\r\n    (0,display_utils.setLayerDimensions)(this.div, viewport);\r\n    for (const editor of this.#uiManager.getEditors(this.pageIndex)) {\r\n      this.add(editor);\r\n    }\r\n    this.updateMode();\r\n  }\r\n  update({\r\n    viewport\r\n  }) {\r\n    this.#uiManager.commitOrRemove();\r\n    const oldRotation = this.viewport.rotation;\r\n    const rotation = viewport.rotation;\r\n    this.viewport = viewport;\r\n    (0,display_utils.setLayerDimensions)(this.div, {\r\n      rotation\r\n    });\r\n    if (oldRotation !== rotation) {\r\n      for (const editor of this.#editors.values()) {\r\n        editor.rotate(rotation);\r\n      }\r\n    }\r\n    this.updateMode();\r\n  }\r\n  get pageDimensions() {\r\n    const {\r\n      pageWidth,\r\n      pageHeight\r\n    } = this.viewport.rawDims;\r\n    return [pageWidth, pageHeight];\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 97:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_366596__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_366596__.d(__nested_webpack_exports__, {\r\n/* harmony export */   ColorPicker: () => (/* binding */ ColorPicker)\r\n/* harmony export */ });\r\n/* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_366596__(266);\r\n/* harmony import */ var _tools_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_366596__(812);\r\n/* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_366596__(473);\r\n\r\n\r\n\r\nclass ColorPicker {\r\n  #boundKeyDown = this.#keyDown.bind(this);\r\n  #button = null;\r\n  #buttonSwatch = null;\r\n  #defaultColor;\r\n  #dropdown = null;\r\n  #dropdownWasFromKeyboard = false;\r\n  #isMainColorPicker = false;\r\n  #eventBus;\r\n  #uiManager = null;\r\n  static get _keyboardManager() {\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"_keyboardManager\", new _tools_js__WEBPACK_IMPORTED_MODULE_1__.KeyboardManager([[[\"Escape\", \"mac+Escape\"], ColorPicker.prototype._hideDropdownFromKeyboard], [[\" \", \"mac+ \"], ColorPicker.prototype._colorSelectFromKeyboard], [[\"ArrowDown\", \"ArrowRight\", \"mac+ArrowDown\", \"mac+ArrowRight\"], ColorPicker.prototype._moveToNext], [[\"ArrowUp\", \"ArrowLeft\", \"mac+ArrowUp\", \"mac+ArrowLeft\"], ColorPicker.prototype._moveToPrevious], [[\"Home\", \"mac+Home\"], ColorPicker.prototype._moveToBeginning], [[\"End\", \"mac+End\"], ColorPicker.prototype._moveToEnd]]));\r\n  }\r\n  constructor({\r\n    editor = null,\r\n    uiManager = null\r\n  }) {\r\n    this.#isMainColorPicker = !editor;\r\n    this.#uiManager = editor?._uiManager || uiManager;\r\n    this.#eventBus = this.#uiManager._eventBus;\r\n    this.#defaultColor = editor?.color || this.#uiManager?.highlightColors.values().next().value || \"#FFFF98\";\r\n  }\r\n  renderButton() {\r\n    const button = this.#button = document.createElement(\"button\");\r\n    button.className = \"colorPicker\";\r\n    button.tabIndex = \"0\";\r\n    button.setAttribute(\"data-l10n-id\", \"pdfjs-editor-colorpicker-button\");\r\n    button.setAttribute(\"aria-haspopup\", true);\r\n    button.addEventListener(\"click\", this.#openDropdown.bind(this));\r\n    const swatch = this.#buttonSwatch = document.createElement(\"span\");\r\n    swatch.className = \"swatch\";\r\n    swatch.style.backgroundColor = this.#defaultColor;\r\n    button.append(swatch);\r\n    return button;\r\n  }\r\n  renderMainDropdown() {\r\n    const dropdown = this.#dropdown = this.#getDropdownRoot(_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR);\r\n    dropdown.setAttribute(\"aria-orientation\", \"horizontal\");\r\n    dropdown.setAttribute(\"aria-labelledby\", \"highlightColorPickerLabel\");\r\n    return dropdown;\r\n  }\r\n  #getDropdownRoot(paramType) {\r\n    const div = document.createElement(\"div\");\r\n    div.addEventListener(\"contextmenu\", _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.noContextMenu);\r\n    div.className = \"dropdown\";\r\n    div.role = \"listbox\";\r\n    div.setAttribute(\"aria-multiselectable\", false);\r\n    div.setAttribute(\"aria-orientation\", \"vertical\");\r\n    div.setAttribute(\"data-l10n-id\", \"pdfjs-editor-colorpicker-dropdown\");\r\n    for (const [name, color] of this.#uiManager.highlightColors) {\r\n      const button = document.createElement(\"button\");\r\n      button.tabIndex = \"0\";\r\n      button.role = \"option\";\r\n      button.setAttribute(\"data-color\", color);\r\n      button.title = name;\r\n      button.setAttribute(\"data-l10n-id\", `pdfjs-editor-colorpicker-${name}`);\r\n      const swatch = document.createElement(\"span\");\r\n      button.append(swatch);\r\n      swatch.className = \"swatch\";\r\n      swatch.style.backgroundColor = color;\r\n      button.setAttribute(\"aria-selected\", color === this.#defaultColor);\r\n      button.addEventListener(\"click\", this.#colorSelect.bind(this, paramType, color));\r\n      div.append(button);\r\n    }\r\n    div.addEventListener(\"keydown\", this.#boundKeyDown);\r\n    return div;\r\n  }\r\n  #colorSelect(type, color, event) {\r\n    event.stopPropagation();\r\n    this.#eventBus.dispatch(\"switchannotationeditorparams\", {\r\n      source: this,\r\n      type,\r\n      value: color\r\n    });\r\n  }\r\n  _colorSelectFromKeyboard(event) {\r\n    const color = event.target.getAttribute(\"data-color\");\r\n    if (!color) {\r\n      return;\r\n    }\r\n    this.#colorSelect(color, event);\r\n  }\r\n  _moveToNext(event) {\r\n    if (event.target === this.#button) {\r\n      this.#dropdown.firstChild?.focus();\r\n      return;\r\n    }\r\n    event.target.nextSibling?.focus();\r\n  }\r\n  _moveToPrevious(event) {\r\n    event.target.previousSibling?.focus();\r\n  }\r\n  _moveToBeginning() {\r\n    this.#dropdown.firstChild?.focus();\r\n  }\r\n  _moveToEnd() {\r\n    this.#dropdown.lastChild?.focus();\r\n  }\r\n  #keyDown(event) {\r\n    ColorPicker._keyboardManager.exec(this, event);\r\n  }\r\n  #openDropdown(event) {\r\n    if (this.#dropdown && !this.#dropdown.classList.contains(\"hidden\")) {\r\n      this.hideDropdown();\r\n      return;\r\n    }\r\n    this.#button.addEventListener(\"keydown\", this.#boundKeyDown);\r\n    this.#dropdownWasFromKeyboard = event.detail === 0;\r\n    if (this.#dropdown) {\r\n      this.#dropdown.classList.remove(\"hidden\");\r\n      return;\r\n    }\r\n    const root = this.#dropdown = this.#getDropdownRoot(_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorParamsType.HIGHLIGHT_COLOR);\r\n    this.#button.append(root);\r\n  }\r\n  hideDropdown() {\r\n    this.#dropdown?.classList.add(\"hidden\");\r\n  }\r\n  _hideDropdownFromKeyboard() {\r\n    if (this.#isMainColorPicker || !this.#dropdown || this.#dropdown.classList.contains(\"hidden\")) {\r\n      return;\r\n    }\r\n    this.hideDropdown();\r\n    this.#button.removeEventListener(\"keydown\", this.#boundKeyDown);\r\n    this.#button.focus({\r\n      preventScroll: true,\r\n      focusVisible: this.#dropdownWasFromKeyboard\r\n    });\r\n  }\r\n  updateColor(color) {\r\n    if (this.#buttonSwatch) {\r\n      this.#buttonSwatch.style.backgroundColor = color;\r\n    }\r\n    if (!this.#dropdown) {\r\n      return;\r\n    }\r\n    const i = this.#uiManager.highlightColors.values();\r\n    for (const child of this.#dropdown.children) {\r\n      child.setAttribute(\"aria-selected\", i.next().value === color);\r\n    }\r\n  }\r\n  destroy() {\r\n    this.#button?.remove();\r\n    this.#button = null;\r\n    this.#buttonSwatch = null;\r\n    this.#dropdown?.remove();\r\n    this.#dropdown = null;\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 115:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_372933__) => {\r\n\r\n\r\n// EXPORTS\r\n__nested_webpack_require_372933__.d(__nested_webpack_exports__, {\r\n  AnnotationEditor: () => (/* binding */ AnnotationEditor)\r\n});\r\n\r\n// EXTERNAL MODULE: ./src/display/editor/tools.js\r\nvar tools = __nested_webpack_require_372933__(812);\r\n// EXTERNAL MODULE: ./src/shared/util.js\r\nvar util = __nested_webpack_require_372933__(266);\r\n// EXTERNAL MODULE: ./src/display/display_utils.js\r\nvar display_utils = __nested_webpack_require_372933__(473);\r\n;// CONCATENATED MODULE: ./src/display/editor/alt_text.js\r\n\r\nclass AltText {\r\n  #altText = \"\";\r\n  #altTextDecorative = false;\r\n  #altTextButton = null;\r\n  #altTextTooltip = null;\r\n  #altTextTooltipTimeout = null;\r\n  #altTextWasFromKeyBoard = false;\r\n  #editor = null;\r\n  static _l10nPromise = null;\r\n  constructor(editor) {\r\n    this.#editor = editor;\r\n  }\r\n  static initialize(l10nPromise) {\r\n    AltText._l10nPromise ||= l10nPromise;\r\n  }\r\n  async render() {\r\n    const altText = this.#altTextButton = document.createElement(\"button\");\r\n    altText.className = \"altText\";\r\n    const msg = await AltText._l10nPromise.get(\"pdfjs-editor-alt-text-button-label\");\r\n    altText.textContent = msg;\r\n    altText.setAttribute(\"aria-label\", msg);\r\n    altText.tabIndex = \"0\";\r\n    altText.addEventListener(\"contextmenu\", display_utils.noContextMenu);\r\n    altText.addEventListener(\"pointerdown\", event => event.stopPropagation());\r\n    const onClick = event => {\r\n      event.preventDefault();\r\n      this.#editor._uiManager.editAltText(this.#editor);\r\n    };\r\n    altText.addEventListener(\"click\", onClick, {\r\n      capture: true\r\n    });\r\n    altText.addEventListener(\"keydown\", event => {\r\n      if (event.target === altText && event.key === \"Enter\") {\r\n        this.#altTextWasFromKeyBoard = true;\r\n        onClick(event);\r\n      }\r\n    });\r\n    await this.#setState();\r\n    return altText;\r\n  }\r\n  finish() {\r\n    if (!this.#altTextButton) {\r\n      return;\r\n    }\r\n    this.#altTextButton.focus({\r\n      focusVisible: this.#altTextWasFromKeyBoard\r\n    });\r\n    this.#altTextWasFromKeyBoard = false;\r\n  }\r\n  get data() {\r\n    return {\r\n      altText: this.#altText,\r\n      decorative: this.#altTextDecorative\r\n    };\r\n  }\r\n  set data({\r\n    altText,\r\n    decorative\r\n  }) {\r\n    if (this.#altText === altText && this.#altTextDecorative === decorative) {\r\n      return;\r\n    }\r\n    this.#altText = altText;\r\n    this.#altTextDecorative = decorative;\r\n    this.#setState();\r\n  }\r\n  toggle(enabled = false) {\r\n    if (!this.#altTextButton) {\r\n      return;\r\n    }\r\n    if (!enabled && this.#altTextTooltipTimeout) {\r\n      clearTimeout(this.#altTextTooltipTimeout);\r\n      this.#altTextTooltipTimeout = null;\r\n    }\r\n    this.#altTextButton.disabled = !enabled;\r\n  }\r\n  destroy() {\r\n    this.#altTextButton?.remove();\r\n    this.#altTextButton = null;\r\n    this.#altTextTooltip = null;\r\n  }\r\n  async #setState() {\r\n    const button = this.#altTextButton;\r\n    if (!button) {\r\n      return;\r\n    }\r\n    if (!this.#altText && !this.#altTextDecorative) {\r\n      button.classList.remove(\"done\");\r\n      this.#altTextTooltip?.remove();\r\n      return;\r\n    }\r\n    button.classList.add(\"done\");\r\n    AltText._l10nPromise.get(\"pdfjs-editor-alt-text-edit-button-label\").then(msg => {\r\n      button.setAttribute(\"aria-label\", msg);\r\n    });\r\n    let tooltip = this.#altTextTooltip;\r\n    if (!tooltip) {\r\n      this.#altTextTooltip = tooltip = document.createElement(\"span\");\r\n      tooltip.className = \"tooltip\";\r\n      tooltip.setAttribute(\"role\", \"tooltip\");\r\n      const id = tooltip.id = `alt-text-tooltip-${this.#editor.id}`;\r\n      button.setAttribute(\"aria-describedby\", id);\r\n      const DELAY_TO_SHOW_TOOLTIP = 100;\r\n      button.addEventListener(\"mouseenter\", () => {\r\n        this.#altTextTooltipTimeout = setTimeout(() => {\r\n          this.#altTextTooltipTimeout = null;\r\n          this.#altTextTooltip.classList.add(\"show\");\r\n          this.#editor._uiManager._eventBus.dispatch(\"reporttelemetry\", {\r\n            source: this,\r\n            details: {\r\n              type: \"editing\",\r\n              subtype: this.#editor.editorType,\r\n              data: {\r\n                action: \"alt_text_tooltip\"\r\n              }\r\n            }\r\n          });\r\n        }, DELAY_TO_SHOW_TOOLTIP);\r\n      });\r\n      button.addEventListener(\"mouseleave\", () => {\r\n        if (this.#altTextTooltipTimeout) {\r\n          clearTimeout(this.#altTextTooltipTimeout);\r\n          this.#altTextTooltipTimeout = null;\r\n        }\r\n        this.#altTextTooltip?.classList.remove(\"show\");\r\n      });\r\n    }\r\n    tooltip.innerText = this.#altTextDecorative ? await AltText._l10nPromise.get(\"pdfjs-editor-alt-text-decorative-tooltip\") : this.#altText;\r\n    if (!tooltip.parentNode) {\r\n      button.append(tooltip);\r\n    }\r\n    const element = this.#editor.getImageForAltText();\r\n    element?.setAttribute(\"aria-describedby\", tooltip.id);\r\n  }\r\n}\r\n\r\n;// CONCATENATED MODULE: ./src/display/editor/toolbar.js\r\n\r\nclass EditorToolbar {\r\n  #toolbar = null;\r\n  #colorPicker = null;\r\n  #editor;\r\n  #buttons = null;\r\n  constructor(editor) {\r\n    this.#editor = editor;\r\n  }\r\n  render() {\r\n    const editToolbar = this.#toolbar = document.createElement(\"div\");\r\n    editToolbar.className = \"editToolbar\";\r\n    editToolbar.addEventListener(\"contextmenu\", display_utils.noContextMenu);\r\n    editToolbar.addEventListener(\"pointerdown\", EditorToolbar.#pointerDown);\r\n    const buttons = this.#buttons = document.createElement(\"div\");\r\n    buttons.className = \"buttons\";\r\n    editToolbar.append(buttons);\r\n    const position = this.#editor.toolbarPosition;\r\n    if (position) {\r\n      const {\r\n        style\r\n      } = editToolbar;\r\n      const x = this.#editor._uiManager.direction === \"ltr\" ? 1 - position[0] : position[0];\r\n      style.insetInlineEnd = `${100 * x}%`;\r\n      style.top = `calc(${100 * position[1]}% + var(--editor-toolbar-vert-offset))`;\r\n    }\r\n    this.#addDeleteButton();\r\n    return editToolbar;\r\n  }\r\n  static #pointerDown(e) {\r\n    e.stopPropagation();\r\n  }\r\n  #focusIn(e) {\r\n    this.#editor._focusEventsAllowed = false;\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  }\r\n  #focusOut(e) {\r\n    this.#editor._focusEventsAllowed = true;\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  }\r\n  #addListenersToElement(element) {\r\n    element.addEventListener(\"focusin\", this.#focusIn.bind(this), {\r\n      capture: true\r\n    });\r\n    element.addEventListener(\"focusout\", this.#focusOut.bind(this), {\r\n      capture: true\r\n    });\r\n    element.addEventListener(\"contextmenu\", display_utils.noContextMenu);\r\n  }\r\n  hide() {\r\n    this.#toolbar.classList.add(\"hidden\");\r\n    this.#colorPicker?.hideDropdown();\r\n  }\r\n  show() {\r\n    this.#toolbar.classList.remove(\"hidden\");\r\n  }\r\n  #addDeleteButton() {\r\n    const button = document.createElement(\"button\");\r\n    button.className = \"delete\";\r\n    button.tabIndex = 0;\r\n    button.setAttribute(\"data-l10n-id\", `pdfjs-editor-remove-${this.#editor.editorType}-button`);\r\n    this.#addListenersToElement(button);\r\n    button.addEventListener(\"click\", e => {\r\n      this.#editor._uiManager.delete();\r\n    });\r\n    this.#buttons.append(button);\r\n  }\r\n  get #divider() {\r\n    const divider = document.createElement(\"div\");\r\n    divider.className = \"divider\";\r\n    return divider;\r\n  }\r\n  addAltTextButton(button) {\r\n    this.#addListenersToElement(button);\r\n    this.#buttons.prepend(button, this.#divider);\r\n  }\r\n  addColorPicker(colorPicker) {\r\n    this.#colorPicker = colorPicker;\r\n    const button = colorPicker.renderButton();\r\n    this.#addListenersToElement(button);\r\n    this.#buttons.prepend(button, this.#divider);\r\n  }\r\n  remove() {\r\n    this.#toolbar.remove();\r\n    this.#colorPicker?.destroy();\r\n    this.#colorPicker = null;\r\n  }\r\n}\r\n\r\n;// CONCATENATED MODULE: ./src/display/editor/editor.js\r\n\r\n\r\n\r\n\r\n\r\nclass AnnotationEditor {\r\n  #allResizerDivs = null;\r\n  #altText = null;\r\n  #keepAspectRatio = false;\r\n  #resizersDiv = null;\r\n  #savedDimensions = null;\r\n  #boundFocusin = this.focusin.bind(this);\r\n  #boundFocusout = this.focusout.bind(this);\r\n  #editToolbar = null;\r\n  #focusedResizerName = \"\";\r\n  #hasBeenClicked = false;\r\n  #isEditing = false;\r\n  #isInEditMode = false;\r\n  #isResizerEnabledForKeyboard = false;\r\n  #moveInDOMTimeout = null;\r\n  _initialOptions = Object.create(null);\r\n  _uiManager = null;\r\n  _focusEventsAllowed = true;\r\n  _l10nPromise = null;\r\n  #isDraggable = false;\r\n  #zIndex = AnnotationEditor._zIndex++;\r\n  static _borderLineWidth = -1;\r\n  static _colorManager = new tools.ColorManager();\r\n  static _zIndex = 1;\r\n  static get _resizerKeyboardManager() {\r\n    const resize = AnnotationEditor.prototype._resizeWithKeyboard;\r\n    const small = tools.AnnotationEditorUIManager.TRANSLATE_SMALL;\r\n    const big = tools.AnnotationEditorUIManager.TRANSLATE_BIG;\r\n    return (0,util.shadow)(this, \"_resizerKeyboardManager\", new tools.KeyboardManager([[[\"ArrowLeft\", \"mac+ArrowLeft\"], resize, {\r\n      args: [-small, 0]\r\n    }], [[\"ctrl+ArrowLeft\", \"mac+shift+ArrowLeft\"], resize, {\r\n      args: [-big, 0]\r\n    }], [[\"ArrowRight\", \"mac+ArrowRight\"], resize, {\r\n      args: [small, 0]\r\n    }], [[\"ctrl+ArrowRight\", \"mac+shift+ArrowRight\"], resize, {\r\n      args: [big, 0]\r\n    }], [[\"ArrowUp\", \"mac+ArrowUp\"], resize, {\r\n      args: [0, -small]\r\n    }], [[\"ctrl+ArrowUp\", \"mac+shift+ArrowUp\"], resize, {\r\n      args: [0, -big]\r\n    }], [[\"ArrowDown\", \"mac+ArrowDown\"], resize, {\r\n      args: [0, small]\r\n    }], [[\"ctrl+ArrowDown\", \"mac+shift+ArrowDown\"], resize, {\r\n      args: [0, big]\r\n    }], [[\"Escape\", \"mac+Escape\"], AnnotationEditor.prototype._stopResizingWithKeyboard]]));\r\n  }\r\n  constructor(parameters) {\r\n    if (this.constructor === AnnotationEditor) {\r\n      (0,util.unreachable)(\"Cannot initialize AnnotationEditor.\");\r\n    }\r\n    this.parent = parameters.parent;\r\n    this.id = parameters.id;\r\n    this.width = this.height = null;\r\n    this.pageIndex = parameters.parent.pageIndex;\r\n    this.name = parameters.name;\r\n    this.div = null;\r\n    this._uiManager = parameters.uiManager;\r\n    this.annotationElementId = null;\r\n    this._willKeepAspectRatio = false;\r\n    this._initialOptions.isCentered = parameters.isCentered;\r\n    this._structTreeParentId = null;\r\n    const {\r\n      rotation,\r\n      rawDims: {\r\n        pageWidth,\r\n        pageHeight,\r\n        pageX,\r\n        pageY\r\n      }\r\n    } = this.parent.viewport;\r\n    this.rotation = rotation;\r\n    this.pageRotation = (360 + rotation - this._uiManager.viewParameters.rotation) % 360;\r\n    this.pageDimensions = [pageWidth, pageHeight];\r\n    this.pageTranslation = [pageX, pageY];\r\n    const [width, height] = this.parentDimensions;\r\n    this.x = parameters.x / width;\r\n    this.y = parameters.y / height;\r\n    this.isAttachedToDOM = false;\r\n    this.deleted = false;\r\n  }\r\n  get editorType() {\r\n    return Object.getPrototypeOf(this).constructor._type;\r\n  }\r\n  static get _defaultLineColor() {\r\n    return (0,util.shadow)(this, \"_defaultLineColor\", this._colorManager.getHexCode(\"CanvasText\"));\r\n  }\r\n  static deleteAnnotationElement(editor) {\r\n    const fakeEditor = new FakeEditor({\r\n      id: editor.parent.getNextId(),\r\n      parent: editor.parent,\r\n      uiManager: editor._uiManager\r\n    });\r\n    fakeEditor.annotationElementId = editor.annotationElementId;\r\n    fakeEditor.deleted = true;\r\n    fakeEditor._uiManager.addToAnnotationStorage(fakeEditor);\r\n  }\r\n  static initialize(l10n, options = null) {\r\n    AnnotationEditor._l10nPromise ||= new Map([\"pdfjs-editor-alt-text-button-label\", \"pdfjs-editor-alt-text-edit-button-label\", \"pdfjs-editor-alt-text-decorative-tooltip\", \"pdfjs-editor-resizer-label-topLeft\", \"pdfjs-editor-resizer-label-topMiddle\", \"pdfjs-editor-resizer-label-topRight\", \"pdfjs-editor-resizer-label-middleRight\", \"pdfjs-editor-resizer-label-bottomRight\", \"pdfjs-editor-resizer-label-bottomMiddle\", \"pdfjs-editor-resizer-label-bottomLeft\", \"pdfjs-editor-resizer-label-middleLeft\"].map(str => [str, l10n.get(str.replaceAll(/([A-Z])/g, c => `-${c.toLowerCase()}`))]));\r\n    if (options?.strings) {\r\n      for (const str of options.strings) {\r\n        AnnotationEditor._l10nPromise.set(str, l10n.get(str));\r\n      }\r\n    }\r\n    if (AnnotationEditor._borderLineWidth !== -1) {\r\n      return;\r\n    }\r\n    const style = getComputedStyle(document.documentElement);\r\n    AnnotationEditor._borderLineWidth = parseFloat(style.getPropertyValue(\"--outline-width\")) || 0;\r\n  }\r\n  static updateDefaultParams(_type, _value) {}\r\n  static get defaultPropertiesToUpdate() {\r\n    return [];\r\n  }\r\n  static isHandlingMimeForPasting(mime) {\r\n    return false;\r\n  }\r\n  static paste(item, parent) {\r\n    (0,util.unreachable)(\"Not implemented\");\r\n  }\r\n  get propertiesToUpdate() {\r\n    return [];\r\n  }\r\n  get _isDraggable() {\r\n    return this.#isDraggable;\r\n  }\r\n  set _isDraggable(value) {\r\n    this.#isDraggable = value;\r\n    this.div?.classList.toggle(\"draggable\", value);\r\n  }\r\n  get isEnterHandled() {\r\n    return true;\r\n  }\r\n  center() {\r\n    const [pageWidth, pageHeight] = this.pageDimensions;\r\n    switch (this.parentRotation) {\r\n      case 90:\r\n        this.x -= this.height * pageHeight / (pageWidth * 2);\r\n        this.y += this.width * pageWidth / (pageHeight * 2);\r\n        break;\r\n      case 180:\r\n        this.x += this.width / 2;\r\n        this.y += this.height / 2;\r\n        break;\r\n      case 270:\r\n        this.x += this.height * pageHeight / (pageWidth * 2);\r\n        this.y -= this.width * pageWidth / (pageHeight * 2);\r\n        break;\r\n      default:\r\n        this.x -= this.width / 2;\r\n        this.y -= this.height / 2;\r\n        break;\r\n    }\r\n    this.fixAndSetPosition();\r\n  }\r\n  addCommands(params) {\r\n    this._uiManager.addCommands(params);\r\n  }\r\n  get currentLayer() {\r\n    return this._uiManager.currentLayer;\r\n  }\r\n  setInBackground() {\r\n    this.div.style.zIndex = 0;\r\n  }\r\n  setInForeground() {\r\n    this.div.style.zIndex = this.#zIndex;\r\n  }\r\n  setParent(parent) {\r\n    if (parent !== null) {\r\n      this.pageIndex = parent.pageIndex;\r\n      this.pageDimensions = parent.pageDimensions;\r\n    } else {\r\n      this.#stopResizing();\r\n    }\r\n    this.parent = parent;\r\n  }\r\n  focusin(event) {\r\n    if (!this._focusEventsAllowed) {\r\n      return;\r\n    }\r\n    if (!this.#hasBeenClicked) {\r\n      this.parent.setSelected(this);\r\n    } else {\r\n      this.#hasBeenClicked = false;\r\n    }\r\n  }\r\n  focusout(event) {\r\n    if (!this._focusEventsAllowed) {\r\n      return;\r\n    }\r\n    if (!this.isAttachedToDOM) {\r\n      return;\r\n    }\r\n    const target = event.relatedTarget;\r\n    if (target?.closest(`#${this.id}`)) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    if (!this.parent?.isMultipleSelection) {\r\n      this.commitOrRemove();\r\n    }\r\n  }\r\n  commitOrRemove() {\r\n    if (this.isEmpty()) {\r\n      this.remove();\r\n    } else {\r\n      this.commit();\r\n    }\r\n  }\r\n  commit() {\r\n    this.addToAnnotationStorage();\r\n  }\r\n  addToAnnotationStorage() {\r\n    this._uiManager.addToAnnotationStorage(this);\r\n  }\r\n  setAt(x, y, tx, ty) {\r\n    const [width, height] = this.parentDimensions;\r\n    [tx, ty] = this.screenToPageTranslation(tx, ty);\r\n    this.x = (x + tx) / width;\r\n    this.y = (y + ty) / height;\r\n    this.fixAndSetPosition();\r\n  }\r\n  #translate([width, height], x, y) {\r\n    [x, y] = this.screenToPageTranslation(x, y);\r\n    this.x += x / width;\r\n    this.y += y / height;\r\n    this.fixAndSetPosition();\r\n  }\r\n  translate(x, y) {\r\n    this.#translate(this.parentDimensions, x, y);\r\n  }\r\n  translateInPage(x, y) {\r\n    this.#translate(this.pageDimensions, x, y);\r\n    this.div.scrollIntoView({\r\n      block: \"nearest\"\r\n    });\r\n  }\r\n  drag(tx, ty) {\r\n    const [parentWidth, parentHeight] = this.parentDimensions;\r\n    this.x += tx / parentWidth;\r\n    this.y += ty / parentHeight;\r\n    if (this.parent && (this.x < 0 || this.x > 1 || this.y < 0 || this.y > 1)) {\r\n      const {\r\n        x,\r\n        y\r\n      } = this.div.getBoundingClientRect();\r\n      if (this.parent.findNewParent(this, x, y)) {\r\n        this.x -= Math.floor(this.x);\r\n        this.y -= Math.floor(this.y);\r\n      }\r\n    }\r\n    let {\r\n      x,\r\n      y\r\n    } = this;\r\n    const [bx, by] = this.#getBaseTranslation();\r\n    x += bx;\r\n    y += by;\r\n    this.div.style.left = `${(100 * x).toFixed(2)}%`;\r\n    this.div.style.top = `${(100 * y).toFixed(2)}%`;\r\n    this.div.scrollIntoView({\r\n      block: \"nearest\"\r\n    });\r\n  }\r\n  #getBaseTranslation() {\r\n    const [parentWidth, parentHeight] = this.parentDimensions;\r\n    const {\r\n      _borderLineWidth\r\n    } = AnnotationEditor;\r\n    const x = _borderLineWidth / parentWidth;\r\n    const y = _borderLineWidth / parentHeight;\r\n    switch (this.rotation) {\r\n      case 90:\r\n        return [-x, y];\r\n      case 180:\r\n        return [x, y];\r\n      case 270:\r\n        return [x, -y];\r\n      default:\r\n        return [-x, -y];\r\n    }\r\n  }\r\n  fixAndSetPosition(rotation = this.rotation) {\r\n    const [pageWidth, pageHeight] = this.pageDimensions;\r\n    let {\r\n      x,\r\n      y,\r\n      width,\r\n      height\r\n    } = this;\r\n    width *= pageWidth;\r\n    height *= pageHeight;\r\n    x *= pageWidth;\r\n    y *= pageHeight;\r\n    switch (rotation) {\r\n      case 0:\r\n        x = Math.max(0, Math.min(pageWidth - width, x));\r\n        y = Math.max(0, Math.min(pageHeight - height, y));\r\n        break;\r\n      case 90:\r\n        x = Math.max(0, Math.min(pageWidth - height, x));\r\n        y = Math.min(pageHeight, Math.max(width, y));\r\n        break;\r\n      case 180:\r\n        x = Math.min(pageWidth, Math.max(width, x));\r\n        y = Math.min(pageHeight, Math.max(height, y));\r\n        break;\r\n      case 270:\r\n        x = Math.min(pageWidth, Math.max(height, x));\r\n        y = Math.max(0, Math.min(pageHeight - width, y));\r\n        break;\r\n    }\r\n    this.x = x /= pageWidth;\r\n    this.y = y /= pageHeight;\r\n    const [bx, by] = this.#getBaseTranslation();\r\n    x += bx;\r\n    y += by;\r\n    const {\r\n      style\r\n    } = this.div;\r\n    style.left = `${(100 * x).toFixed(2)}%`;\r\n    style.top = `${(100 * y).toFixed(2)}%`;\r\n    this.moveInDOM();\r\n  }\r\n  static #rotatePoint(x, y, angle) {\r\n    switch (angle) {\r\n      case 90:\r\n        return [y, -x];\r\n      case 180:\r\n        return [-x, -y];\r\n      case 270:\r\n        return [-y, x];\r\n      default:\r\n        return [x, y];\r\n    }\r\n  }\r\n  screenToPageTranslation(x, y) {\r\n    return AnnotationEditor.#rotatePoint(x, y, this.parentRotation);\r\n  }\r\n  pageTranslationToScreen(x, y) {\r\n    return AnnotationEditor.#rotatePoint(x, y, 360 - this.parentRotation);\r\n  }\r\n  #getRotationMatrix(rotation) {\r\n    switch (rotation) {\r\n      case 90:\r\n        {\r\n          const [pageWidth, pageHeight] = this.pageDimensions;\r\n          return [0, -pageWidth / pageHeight, pageHeight / pageWidth, 0];\r\n        }\r\n      case 180:\r\n        return [-1, 0, 0, -1];\r\n      case 270:\r\n        {\r\n          const [pageWidth, pageHeight] = this.pageDimensions;\r\n          return [0, pageWidth / pageHeight, -pageHeight / pageWidth, 0];\r\n        }\r\n      default:\r\n        return [1, 0, 0, 1];\r\n    }\r\n  }\r\n  get parentScale() {\r\n    return this._uiManager.viewParameters.realScale;\r\n  }\r\n  get parentRotation() {\r\n    return (this._uiManager.viewParameters.rotation + this.pageRotation) % 360;\r\n  }\r\n  get parentDimensions() {\r\n    const {\r\n      parentScale,\r\n      pageDimensions: [pageWidth, pageHeight]\r\n    } = this;\r\n    const scaledWidth = pageWidth * parentScale;\r\n    const scaledHeight = pageHeight * parentScale;\r\n    return util.FeatureTest.isCSSRoundSupported ? [Math.round(scaledWidth), Math.round(scaledHeight)] : [scaledWidth, scaledHeight];\r\n  }\r\n  setDims(width, height) {\r\n    const [parentWidth, parentHeight] = this.parentDimensions;\r\n    this.div.style.width = `${(100 * width / parentWidth).toFixed(2)}%`;\r\n    if (!this.#keepAspectRatio) {\r\n      this.div.style.height = `${(100 * height / parentHeight).toFixed(2)}%`;\r\n    }\r\n  }\r\n  fixDims() {\r\n    const {\r\n      style\r\n    } = this.div;\r\n    const {\r\n      height,\r\n      width\r\n    } = style;\r\n    const widthPercent = width.endsWith(\"%\");\r\n    const heightPercent = !this.#keepAspectRatio && height.endsWith(\"%\");\r\n    if (widthPercent && heightPercent) {\r\n      return;\r\n    }\r\n    const [parentWidth, parentHeight] = this.parentDimensions;\r\n    if (!widthPercent) {\r\n      style.width = `${(100 * parseFloat(width) / parentWidth).toFixed(2)}%`;\r\n    }\r\n    if (!this.#keepAspectRatio && !heightPercent) {\r\n      style.height = `${(100 * parseFloat(height) / parentHeight).toFixed(2)}%`;\r\n    }\r\n  }\r\n  getInitialTranslation() {\r\n    return [0, 0];\r\n  }\r\n  #createResizers() {\r\n    if (this.#resizersDiv) {\r\n      return;\r\n    }\r\n    this.#resizersDiv = document.createElement(\"div\");\r\n    this.#resizersDiv.classList.add(\"resizers\");\r\n    const classes = this._willKeepAspectRatio ? [\"topLeft\", \"topRight\", \"bottomRight\", \"bottomLeft\"] : [\"topLeft\", \"topMiddle\", \"topRight\", \"middleRight\", \"bottomRight\", \"bottomMiddle\", \"bottomLeft\", \"middleLeft\"];\r\n    for (const name of classes) {\r\n      const div = document.createElement(\"div\");\r\n      this.#resizersDiv.append(div);\r\n      div.classList.add(\"resizer\", name);\r\n      div.setAttribute(\"data-resizer-name\", name);\r\n      div.addEventListener(\"pointerdown\", this.#resizerPointerdown.bind(this, name));\r\n      div.addEventListener(\"contextmenu\", display_utils.noContextMenu);\r\n      div.tabIndex = -1;\r\n    }\r\n    this.div.prepend(this.#resizersDiv);\r\n  }\r\n  #resizerPointerdown(name, event) {\r\n    event.preventDefault();\r\n    const {\r\n      isMac\r\n    } = util.FeatureTest.platform;\r\n    if (event.button !== 0 || event.ctrlKey && isMac) {\r\n      return;\r\n    }\r\n    this.#altText?.toggle(false);\r\n    const boundResizerPointermove = this.#resizerPointermove.bind(this, name);\r\n    const savedDraggable = this._isDraggable;\r\n    this._isDraggable = false;\r\n    const pointerMoveOptions = {\r\n      passive: true,\r\n      capture: true\r\n    };\r\n    this.parent.togglePointerEvents(false);\r\n    window.addEventListener(\"pointermove\", boundResizerPointermove, pointerMoveOptions);\r\n    const savedX = this.x;\r\n    const savedY = this.y;\r\n    const savedWidth = this.width;\r\n    const savedHeight = this.height;\r\n    const savedParentCursor = this.parent.div.style.cursor;\r\n    const savedCursor = this.div.style.cursor;\r\n    this.div.style.cursor = this.parent.div.style.cursor = window.getComputedStyle(event.target).cursor;\r\n    const pointerUpCallback = () => {\r\n      this.parent.togglePointerEvents(true);\r\n      this.#altText?.toggle(true);\r\n      this._isDraggable = savedDraggable;\r\n      window.removeEventListener(\"pointerup\", pointerUpCallback);\r\n      window.removeEventListener(\"blur\", pointerUpCallback);\r\n      window.removeEventListener(\"pointermove\", boundResizerPointermove, pointerMoveOptions);\r\n      this.parent.div.style.cursor = savedParentCursor;\r\n      this.div.style.cursor = savedCursor;\r\n      this.#addResizeToUndoStack(savedX, savedY, savedWidth, savedHeight);\r\n    };\r\n    window.addEventListener(\"pointerup\", pointerUpCallback);\r\n    window.addEventListener(\"blur\", pointerUpCallback);\r\n  }\r\n  #addResizeToUndoStack(savedX, savedY, savedWidth, savedHeight) {\r\n    const newX = this.x;\r\n    const newY = this.y;\r\n    const newWidth = this.width;\r\n    const newHeight = this.height;\r\n    if (newX === savedX && newY === savedY && newWidth === savedWidth && newHeight === savedHeight) {\r\n      return;\r\n    }\r\n    this.addCommands({\r\n      cmd: () => {\r\n        this.width = newWidth;\r\n        this.height = newHeight;\r\n        this.x = newX;\r\n        this.y = newY;\r\n        const [parentWidth, parentHeight] = this.parentDimensions;\r\n        this.setDims(parentWidth * newWidth, parentHeight * newHeight);\r\n        this.fixAndSetPosition();\r\n      },\r\n      undo: () => {\r\n        this.width = savedWidth;\r\n        this.height = savedHeight;\r\n        this.x = savedX;\r\n        this.y = savedY;\r\n        const [parentWidth, parentHeight] = this.parentDimensions;\r\n        this.setDims(parentWidth * savedWidth, parentHeight * savedHeight);\r\n        this.fixAndSetPosition();\r\n      },\r\n      mustExec: true\r\n    });\r\n  }\r\n  #resizerPointermove(name, event) {\r\n    const [parentWidth, parentHeight] = this.parentDimensions;\r\n    const savedX = this.x;\r\n    const savedY = this.y;\r\n    const savedWidth = this.width;\r\n    const savedHeight = this.height;\r\n    const minWidth = AnnotationEditor.MIN_SIZE / parentWidth;\r\n    const minHeight = AnnotationEditor.MIN_SIZE / parentHeight;\r\n    const round = x => Math.round(x * 10000) / 10000;\r\n    const rotationMatrix = this.#getRotationMatrix(this.rotation);\r\n    const transf = (x, y) => [rotationMatrix[0] * x + rotationMatrix[2] * y, rotationMatrix[1] * x + rotationMatrix[3] * y];\r\n    const invRotationMatrix = this.#getRotationMatrix(360 - this.rotation);\r\n    const invTransf = (x, y) => [invRotationMatrix[0] * x + invRotationMatrix[2] * y, invRotationMatrix[1] * x + invRotationMatrix[3] * y];\r\n    let getPoint;\r\n    let getOpposite;\r\n    let isDiagonal = false;\r\n    let isHorizontal = false;\r\n    switch (name) {\r\n      case \"topLeft\":\r\n        isDiagonal = true;\r\n        getPoint = (w, h) => [0, 0];\r\n        getOpposite = (w, h) => [w, h];\r\n        break;\r\n      case \"topMiddle\":\r\n        getPoint = (w, h) => [w / 2, 0];\r\n        getOpposite = (w, h) => [w / 2, h];\r\n        break;\r\n      case \"topRight\":\r\n        isDiagonal = true;\r\n        getPoint = (w, h) => [w, 0];\r\n        getOpposite = (w, h) => [0, h];\r\n        break;\r\n      case \"middleRight\":\r\n        isHorizontal = true;\r\n        getPoint = (w, h) => [w, h / 2];\r\n        getOpposite = (w, h) => [0, h / 2];\r\n        break;\r\n      case \"bottomRight\":\r\n        isDiagonal = true;\r\n        getPoint = (w, h) => [w, h];\r\n        getOpposite = (w, h) => [0, 0];\r\n        break;\r\n      case \"bottomMiddle\":\r\n        getPoint = (w, h) => [w / 2, h];\r\n        getOpposite = (w, h) => [w / 2, 0];\r\n        break;\r\n      case \"bottomLeft\":\r\n        isDiagonal = true;\r\n        getPoint = (w, h) => [0, h];\r\n        getOpposite = (w, h) => [w, 0];\r\n        break;\r\n      case \"middleLeft\":\r\n        isHorizontal = true;\r\n        getPoint = (w, h) => [0, h / 2];\r\n        getOpposite = (w, h) => [w, h / 2];\r\n        break;\r\n    }\r\n    const point = getPoint(savedWidth, savedHeight);\r\n    const oppositePoint = getOpposite(savedWidth, savedHeight);\r\n    let transfOppositePoint = transf(...oppositePoint);\r\n    const oppositeX = round(savedX + transfOppositePoint[0]);\r\n    const oppositeY = round(savedY + transfOppositePoint[1]);\r\n    let ratioX = 1;\r\n    let ratioY = 1;\r\n    let [deltaX, deltaY] = this.screenToPageTranslation(event.movementX, event.movementY);\r\n    [deltaX, deltaY] = invTransf(deltaX / parentWidth, deltaY / parentHeight);\r\n    if (isDiagonal) {\r\n      const oldDiag = Math.hypot(savedWidth, savedHeight);\r\n      ratioX = ratioY = Math.max(Math.min(Math.hypot(oppositePoint[0] - point[0] - deltaX, oppositePoint[1] - point[1] - deltaY) / oldDiag, 1 / savedWidth, 1 / savedHeight), minWidth / savedWidth, minHeight / savedHeight);\r\n    } else if (isHorizontal) {\r\n      ratioX = Math.max(minWidth, Math.min(1, Math.abs(oppositePoint[0] - point[0] - deltaX))) / savedWidth;\r\n    } else {\r\n      ratioY = Math.max(minHeight, Math.min(1, Math.abs(oppositePoint[1] - point[1] - deltaY))) / savedHeight;\r\n    }\r\n    const newWidth = round(savedWidth * ratioX);\r\n    const newHeight = round(savedHeight * ratioY);\r\n    transfOppositePoint = transf(...getOpposite(newWidth, newHeight));\r\n    const newX = oppositeX - transfOppositePoint[0];\r\n    const newY = oppositeY - transfOppositePoint[1];\r\n    this.width = newWidth;\r\n    this.height = newHeight;\r\n    this.x = newX;\r\n    this.y = newY;\r\n    this.setDims(parentWidth * newWidth, parentHeight * newHeight);\r\n    this.fixAndSetPosition();\r\n  }\r\n  altTextFinish() {\r\n    this.#altText?.finish();\r\n  }\r\n  async addEditToolbar() {\r\n    if (this.#editToolbar || this.#isInEditMode) {\r\n      return this.#editToolbar;\r\n    }\r\n    this.#editToolbar = new EditorToolbar(this);\r\n    this.div.append(this.#editToolbar.render());\r\n    if (this.#altText) {\r\n      this.#editToolbar.addAltTextButton(await this.#altText.render());\r\n    }\r\n    return this.#editToolbar;\r\n  }\r\n  removeEditToolbar() {\r\n    if (!this.#editToolbar) {\r\n      return;\r\n    }\r\n    this.#editToolbar.remove();\r\n    this.#editToolbar = null;\r\n    this.#altText?.destroy();\r\n  }\r\n  getClientDimensions() {\r\n    return this.div.getBoundingClientRect();\r\n  }\r\n  async addAltTextButton() {\r\n    if (this.#altText) {\r\n      return;\r\n    }\r\n    AltText.initialize(AnnotationEditor._l10nPromise);\r\n    this.#altText = new AltText(this);\r\n    await this.addEditToolbar();\r\n  }\r\n  get altTextData() {\r\n    return this.#altText?.data;\r\n  }\r\n  set altTextData(data) {\r\n    if (!this.#altText) {\r\n      return;\r\n    }\r\n    this.#altText.data = data;\r\n  }\r\n  render() {\r\n    this.div = document.createElement(\"div\");\r\n    this.div.setAttribute(\"data-editor-rotation\", (360 - this.rotation) % 360);\r\n    this.div.className = this.name;\r\n    this.div.setAttribute(\"id\", this.id);\r\n    this.div.setAttribute(\"tabIndex\", 0);\r\n    this.setInForeground();\r\n    this.div.addEventListener(\"focusin\", this.#boundFocusin);\r\n    this.div.addEventListener(\"focusout\", this.#boundFocusout);\r\n    const [parentWidth, parentHeight] = this.parentDimensions;\r\n    if (this.parentRotation % 180 !== 0) {\r\n      this.div.style.maxWidth = `${(100 * parentHeight / parentWidth).toFixed(2)}%`;\r\n      this.div.style.maxHeight = `${(100 * parentWidth / parentHeight).toFixed(2)}%`;\r\n    }\r\n    const [tx, ty] = this.getInitialTranslation();\r\n    this.translate(tx, ty);\r\n    (0,tools.bindEvents)(this, this.div, [\"pointerdown\"]);\r\n    return this.div;\r\n  }\r\n  pointerdown(event) {\r\n    const {\r\n      isMac\r\n    } = util.FeatureTest.platform;\r\n    if (event.button !== 0 || event.ctrlKey && isMac) {\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n    this.#hasBeenClicked = true;\r\n    if (this._isDraggable) {\r\n      this.#setUpDragSession(event);\r\n      return;\r\n    }\r\n    this.#selectOnPointerEvent(event);\r\n  }\r\n  #selectOnPointerEvent(event) {\r\n    const {\r\n      isMac\r\n    } = util.FeatureTest.platform;\r\n    if (event.ctrlKey && !isMac || event.shiftKey || event.metaKey && isMac) {\r\n      this.parent.toggleSelected(this);\r\n    } else {\r\n      this.parent.setSelected(this);\r\n    }\r\n  }\r\n  #setUpDragSession(event) {\r\n    const isSelected = this._uiManager.isSelected(this);\r\n    this._uiManager.setUpDragSession();\r\n    let pointerMoveOptions, pointerMoveCallback;\r\n    if (isSelected) {\r\n      pointerMoveOptions = {\r\n        passive: true,\r\n        capture: true\r\n      };\r\n      pointerMoveCallback = e => {\r\n        const [tx, ty] = this.screenToPageTranslation(e.movementX, e.movementY);\r\n        this._uiManager.dragSelectedEditors(tx, ty);\r\n      };\r\n      window.addEventListener(\"pointermove\", pointerMoveCallback, pointerMoveOptions);\r\n    }\r\n    const pointerUpCallback = () => {\r\n      window.removeEventListener(\"pointerup\", pointerUpCallback);\r\n      window.removeEventListener(\"blur\", pointerUpCallback);\r\n      if (isSelected) {\r\n        window.removeEventListener(\"pointermove\", pointerMoveCallback, pointerMoveOptions);\r\n      }\r\n      this.#hasBeenClicked = false;\r\n      if (!this._uiManager.endDragSession()) {\r\n        this.#selectOnPointerEvent(event);\r\n      }\r\n    };\r\n    window.addEventListener(\"pointerup\", pointerUpCallback);\r\n    window.addEventListener(\"blur\", pointerUpCallback);\r\n  }\r\n  moveInDOM() {\r\n    if (this.#moveInDOMTimeout) {\r\n      clearTimeout(this.#moveInDOMTimeout);\r\n    }\r\n    this.#moveInDOMTimeout = setTimeout(() => {\r\n      this.#moveInDOMTimeout = null;\r\n      this.parent?.moveEditorInDOM(this);\r\n    }, 0);\r\n  }\r\n  _setParentAndPosition(parent, x, y) {\r\n    parent.changeParent(this);\r\n    this.x = x;\r\n    this.y = y;\r\n    this.fixAndSetPosition();\r\n  }\r\n  getRect(tx, ty, rotation = this.rotation) {\r\n    const scale = this.parentScale;\r\n    const [pageWidth, pageHeight] = this.pageDimensions;\r\n    const [pageX, pageY] = this.pageTranslation;\r\n    const shiftX = tx / scale;\r\n    const shiftY = ty / scale;\r\n    const x = this.x * pageWidth;\r\n    const y = this.y * pageHeight;\r\n    const width = this.width * pageWidth;\r\n    const height = this.height * pageHeight;\r\n    switch (rotation) {\r\n      case 0:\r\n        return [x + shiftX + pageX, pageHeight - y - shiftY - height + pageY, x + shiftX + width + pageX, pageHeight - y - shiftY + pageY];\r\n      case 90:\r\n        return [x + shiftY + pageX, pageHeight - y + shiftX + pageY, x + shiftY + height + pageX, pageHeight - y + shiftX + width + pageY];\r\n      case 180:\r\n        return [x - shiftX - width + pageX, pageHeight - y + shiftY + pageY, x - shiftX + pageX, pageHeight - y + shiftY + height + pageY];\r\n      case 270:\r\n        return [x - shiftY - height + pageX, pageHeight - y - shiftX - width + pageY, x - shiftY + pageX, pageHeight - y - shiftX + pageY];\r\n      default:\r\n        throw new Error(\"Invalid rotation\");\r\n    }\r\n  }\r\n  getRectInCurrentCoords(rect, pageHeight) {\r\n    const [x1, y1, x2, y2] = rect;\r\n    const width = x2 - x1;\r\n    const height = y2 - y1;\r\n    switch (this.rotation) {\r\n      case 0:\r\n        return [x1, pageHeight - y2, width, height];\r\n      case 90:\r\n        return [x1, pageHeight - y1, height, width];\r\n      case 180:\r\n        return [x2, pageHeight - y1, width, height];\r\n      case 270:\r\n        return [x2, pageHeight - y2, height, width];\r\n      default:\r\n        throw new Error(\"Invalid rotation\");\r\n    }\r\n  }\r\n  onceAdded() {}\r\n  isEmpty() {\r\n    return false;\r\n  }\r\n  enableEditMode() {\r\n    this.#isInEditMode = true;\r\n  }\r\n  disableEditMode() {\r\n    this.#isInEditMode = false;\r\n  }\r\n  isInEditMode() {\r\n    return this.#isInEditMode;\r\n  }\r\n  shouldGetKeyboardEvents() {\r\n    return this.#isResizerEnabledForKeyboard;\r\n  }\r\n  needsToBeRebuilt() {\r\n    return this.div && !this.isAttachedToDOM;\r\n  }\r\n  rebuild() {\r\n    this.div?.addEventListener(\"focusin\", this.#boundFocusin);\r\n    this.div?.addEventListener(\"focusout\", this.#boundFocusout);\r\n  }\r\n  rotate(_angle) {}\r\n  serialize(isForCopying = false, context = null) {\r\n    (0,util.unreachable)(\"An editor must be serializable\");\r\n  }\r\n  static deserialize(data, parent, uiManager) {\r\n    const editor = new this.prototype.constructor({\r\n      parent,\r\n      id: parent.getNextId(),\r\n      uiManager\r\n    });\r\n    editor.rotation = data.rotation;\r\n    const [pageWidth, pageHeight] = editor.pageDimensions;\r\n    const [x, y, width, height] = editor.getRectInCurrentCoords(data.rect, pageHeight);\r\n    editor.x = x / pageWidth;\r\n    editor.y = y / pageHeight;\r\n    editor.width = width / pageWidth;\r\n    editor.height = height / pageHeight;\r\n    return editor;\r\n  }\r\n  remove() {\r\n    this.div.removeEventListener(\"focusin\", this.#boundFocusin);\r\n    this.div.removeEventListener(\"focusout\", this.#boundFocusout);\r\n    if (!this.isEmpty()) {\r\n      this.commit();\r\n    }\r\n    if (this.parent) {\r\n      this.parent.remove(this);\r\n    } else {\r\n      this._uiManager.removeEditor(this);\r\n    }\r\n    if (this.#moveInDOMTimeout) {\r\n      clearTimeout(this.#moveInDOMTimeout);\r\n      this.#moveInDOMTimeout = null;\r\n    }\r\n    this.#stopResizing();\r\n    this.removeEditToolbar();\r\n  }\r\n  get isResizable() {\r\n    return false;\r\n  }\r\n  makeResizable() {\r\n    if (this.isResizable) {\r\n      this.#createResizers();\r\n      this.#resizersDiv.classList.remove(\"hidden\");\r\n      (0,tools.bindEvents)(this, this.div, [\"keydown\"]);\r\n    }\r\n  }\r\n  get toolbarPosition() {\r\n    return null;\r\n  }\r\n  keydown(event) {\r\n    if (!this.isResizable || event.target !== this.div || event.key !== \"Enter\") {\r\n      return;\r\n    }\r\n    this._uiManager.setSelected(this);\r\n    this.#savedDimensions = {\r\n      savedX: this.x,\r\n      savedY: this.y,\r\n      savedWidth: this.width,\r\n      savedHeight: this.height\r\n    };\r\n    const children = this.#resizersDiv.children;\r\n    if (!this.#allResizerDivs) {\r\n      this.#allResizerDivs = Array.from(children);\r\n      const boundResizerKeydown = this.#resizerKeydown.bind(this);\r\n      const boundResizerBlur = this.#resizerBlur.bind(this);\r\n      for (const div of this.#allResizerDivs) {\r\n        const name = div.getAttribute(\"data-resizer-name\");\r\n        div.setAttribute(\"role\", \"spinbutton\");\r\n        div.addEventListener(\"keydown\", boundResizerKeydown);\r\n        div.addEventListener(\"blur\", boundResizerBlur);\r\n        div.addEventListener(\"focus\", this.#resizerFocus.bind(this, name));\r\n        AnnotationEditor._l10nPromise.get(`pdfjs-editor-resizer-label-${name}`).then(msg => div.setAttribute(\"aria-label\", msg));\r\n      }\r\n    }\r\n    const first = this.#allResizerDivs[0];\r\n    let firstPosition = 0;\r\n    for (const div of children) {\r\n      if (div === first) {\r\n        break;\r\n      }\r\n      firstPosition++;\r\n    }\r\n    const nextFirstPosition = (360 - this.rotation + this.parentRotation) % 360 / 90 * (this.#allResizerDivs.length / 4);\r\n    if (nextFirstPosition !== firstPosition) {\r\n      if (nextFirstPosition < firstPosition) {\r\n        for (let i = 0; i < firstPosition - nextFirstPosition; i++) {\r\n          this.#resizersDiv.append(this.#resizersDiv.firstChild);\r\n        }\r\n      } else if (nextFirstPosition > firstPosition) {\r\n        for (let i = 0; i < nextFirstPosition - firstPosition; i++) {\r\n          this.#resizersDiv.firstChild.before(this.#resizersDiv.lastChild);\r\n        }\r\n      }\r\n      let i = 0;\r\n      for (const child of children) {\r\n        const div = this.#allResizerDivs[i++];\r\n        const name = div.getAttribute(\"data-resizer-name\");\r\n        AnnotationEditor._l10nPromise.get(`pdfjs-editor-resizer-label-${name}`).then(msg => child.setAttribute(\"aria-label\", msg));\r\n      }\r\n    }\r\n    this.#setResizerTabIndex(0);\r\n    this.#isResizerEnabledForKeyboard = true;\r\n    this.#resizersDiv.firstChild.focus({\r\n      focusVisible: true\r\n    });\r\n    event.preventDefault();\r\n    event.stopImmediatePropagation();\r\n  }\r\n  #resizerKeydown(event) {\r\n    AnnotationEditor._resizerKeyboardManager.exec(this, event);\r\n  }\r\n  #resizerBlur(event) {\r\n    if (this.#isResizerEnabledForKeyboard && event.relatedTarget?.parentNode !== this.#resizersDiv) {\r\n      this.#stopResizing();\r\n    }\r\n  }\r\n  #resizerFocus(name) {\r\n    this.#focusedResizerName = this.#isResizerEnabledForKeyboard ? name : \"\";\r\n  }\r\n  #setResizerTabIndex(value) {\r\n    if (!this.#allResizerDivs) {\r\n      return;\r\n    }\r\n    for (const div of this.#allResizerDivs) {\r\n      div.tabIndex = value;\r\n    }\r\n  }\r\n  _resizeWithKeyboard(x, y) {\r\n    if (!this.#isResizerEnabledForKeyboard) {\r\n      return;\r\n    }\r\n    this.#resizerPointermove(this.#focusedResizerName, {\r\n      movementX: x,\r\n      movementY: y\r\n    });\r\n  }\r\n  #stopResizing() {\r\n    this.#isResizerEnabledForKeyboard = false;\r\n    this.#setResizerTabIndex(-1);\r\n    if (this.#savedDimensions) {\r\n      const {\r\n        savedX,\r\n        savedY,\r\n        savedWidth,\r\n        savedHeight\r\n      } = this.#savedDimensions;\r\n      this.#addResizeToUndoStack(savedX, savedY, savedWidth, savedHeight);\r\n      this.#savedDimensions = null;\r\n    }\r\n  }\r\n  _stopResizingWithKeyboard() {\r\n    this.#stopResizing();\r\n    this.div.focus();\r\n  }\r\n  select() {\r\n    this.makeResizable();\r\n    this.div?.classList.add(\"selectedEditor\");\r\n    if (!this.#editToolbar) {\r\n      this.addEditToolbar().then(() => {\r\n        if (this.div?.classList.contains(\"selectedEditor\")) {\r\n          this.#editToolbar?.show();\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    this.#editToolbar?.show();\r\n  }\r\n  unselect() {\r\n    this.#resizersDiv?.classList.add(\"hidden\");\r\n    this.div?.classList.remove(\"selectedEditor\");\r\n    if (this.div?.contains(document.activeElement)) {\r\n      this._uiManager.currentLayer.div.focus();\r\n    }\r\n    this.#editToolbar?.hide();\r\n  }\r\n  updateParams(type, value) {}\r\n  disableEditing() {}\r\n  enableEditing() {}\r\n  enterInEditMode() {}\r\n  getImageForAltText() {\r\n    return null;\r\n  }\r\n  get contentDiv() {\r\n    return this.div;\r\n  }\r\n  get isEditing() {\r\n    return this.#isEditing;\r\n  }\r\n  set isEditing(value) {\r\n    this.#isEditing = value;\r\n    if (!this.parent) {\r\n      return;\r\n    }\r\n    if (value) {\r\n      this.parent.setSelected(this);\r\n      this.parent.setActiveEditor(this);\r\n    } else {\r\n      this.parent.setActiveEditor(null);\r\n    }\r\n  }\r\n  setAspectRatio(width, height) {\r\n    this.#keepAspectRatio = true;\r\n    const aspectRatio = width / height;\r\n    const {\r\n      style\r\n    } = this.div;\r\n    style.aspectRatio = aspectRatio;\r\n    style.height = \"auto\";\r\n  }\r\n  static get MIN_SIZE() {\r\n    return 16;\r\n  }\r\n  static canCreateNewEmptyEditor() {\r\n    return true;\r\n  }\r\n}\r\nclass FakeEditor extends AnnotationEditor {\r\n  constructor(params) {\r\n    super(params);\r\n    this.annotationElementId = params.annotationElementId;\r\n    this.deleted = true;\r\n  }\r\n  serialize() {\r\n    return {\r\n      id: this.annotationElementId,\r\n      deleted: true,\r\n      pageIndex: this.pageIndex\r\n    };\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 405:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_413983__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_413983__.d(__nested_webpack_exports__, {\r\n/* harmony export */   Outliner: () => (/* binding */ Outliner)\r\n/* harmony export */ });\r\nclass Outliner {\r\n  #box;\r\n  #verticalEdges = [];\r\n  #intervals = [];\r\n  constructor(boxes, borderWidth = 0, innerMargin = 0, isLTR = true) {\r\n    let minX = Infinity;\r\n    let maxX = -Infinity;\r\n    let minY = Infinity;\r\n    let maxY = -Infinity;\r\n    const NUMBER_OF_DIGITS = 4;\r\n    const EPSILON = 10 ** -NUMBER_OF_DIGITS;\r\n    for (const {\r\n      x,\r\n      y,\r\n      width,\r\n      height\r\n    } of boxes) {\r\n      const x1 = Math.floor((x - borderWidth) / EPSILON) * EPSILON;\r\n      const x2 = Math.ceil((x + width + borderWidth) / EPSILON) * EPSILON;\r\n      const y1 = Math.floor((y - borderWidth) / EPSILON) * EPSILON;\r\n      const y2 = Math.ceil((y + height + borderWidth) / EPSILON) * EPSILON;\r\n      const left = [x1, y1, y2, true];\r\n      const right = [x2, y1, y2, false];\r\n      this.#verticalEdges.push(left, right);\r\n      minX = Math.min(minX, x1);\r\n      maxX = Math.max(maxX, x2);\r\n      minY = Math.min(minY, y1);\r\n      maxY = Math.max(maxY, y2);\r\n    }\r\n    const bboxWidth = maxX - minX + 2 * innerMargin;\r\n    const bboxHeight = maxY - minY + 2 * innerMargin;\r\n    const shiftedMinX = minX - innerMargin;\r\n    const shiftedMinY = minY - innerMargin;\r\n    const lastEdge = this.#verticalEdges.at(isLTR ? -1 : -2);\r\n    const lastPoint = [lastEdge[0], lastEdge[2]];\r\n    for (const edge of this.#verticalEdges) {\r\n      const [x, y1, y2] = edge;\r\n      edge[0] = (x - shiftedMinX) / bboxWidth;\r\n      edge[1] = (y1 - shiftedMinY) / bboxHeight;\r\n      edge[2] = (y2 - shiftedMinY) / bboxHeight;\r\n    }\r\n    this.#box = {\r\n      x: shiftedMinX,\r\n      y: shiftedMinY,\r\n      width: bboxWidth,\r\n      height: bboxHeight,\r\n      lastPoint\r\n    };\r\n  }\r\n  getOutlines() {\r\n    this.#verticalEdges.sort((a, b) => a[0] - b[0] || a[1] - b[1] || a[2] - b[2]);\r\n    const outlineVerticalEdges = [];\r\n    for (const edge of this.#verticalEdges) {\r\n      if (edge[3]) {\r\n        outlineVerticalEdges.push(...this.#breakEdge(edge));\r\n        this.#insert(edge);\r\n      } else {\r\n        this.#remove(edge);\r\n        outlineVerticalEdges.push(...this.#breakEdge(edge));\r\n      }\r\n    }\r\n    return this.#getOutlines(outlineVerticalEdges);\r\n  }\r\n  #getOutlines(outlineVerticalEdges) {\r\n    const edges = [];\r\n    const allEdges = new Set();\r\n    for (const edge of outlineVerticalEdges) {\r\n      const [x, y1, y2] = edge;\r\n      edges.push([x, y1, edge], [x, y2, edge]);\r\n    }\r\n    edges.sort((a, b) => a[1] - b[1] || a[0] - b[0]);\r\n    for (let i = 0, ii = edges.length; i < ii; i += 2) {\r\n      const edge1 = edges[i][2];\r\n      const edge2 = edges[i + 1][2];\r\n      edge1.push(edge2);\r\n      edge2.push(edge1);\r\n      allEdges.add(edge1);\r\n      allEdges.add(edge2);\r\n    }\r\n    const outlines = [];\r\n    let outline;\r\n    while (allEdges.size > 0) {\r\n      const edge = allEdges.values().next().value;\r\n      let [x, y1, y2, edge1, edge2] = edge;\r\n      allEdges.delete(edge);\r\n      let lastPointX = x;\r\n      let lastPointY = y1;\r\n      outline = [x, y2];\r\n      outlines.push(outline);\r\n      while (true) {\r\n        let e;\r\n        if (allEdges.has(edge1)) {\r\n          e = edge1;\r\n        } else if (allEdges.has(edge2)) {\r\n          e = edge2;\r\n        } else {\r\n          break;\r\n        }\r\n        allEdges.delete(e);\r\n        [x, y1, y2, edge1, edge2] = e;\r\n        if (lastPointX !== x) {\r\n          outline.push(lastPointX, lastPointY, x, lastPointY === y1 ? y1 : y2);\r\n          lastPointX = x;\r\n        }\r\n        lastPointY = lastPointY === y1 ? y2 : y1;\r\n      }\r\n      outline.push(lastPointX, lastPointY);\r\n    }\r\n    return {\r\n      outlines,\r\n      box: this.#box\r\n    };\r\n  }\r\n  #binarySearch(y) {\r\n    const array = this.#intervals;\r\n    let start = 0;\r\n    let end = array.length - 1;\r\n    while (start <= end) {\r\n      const middle = start + end >> 1;\r\n      const y1 = array[middle][0];\r\n      if (y1 === y) {\r\n        return middle;\r\n      }\r\n      if (y1 < y) {\r\n        start = middle + 1;\r\n      } else {\r\n        end = middle - 1;\r\n      }\r\n    }\r\n    return end + 1;\r\n  }\r\n  #insert([, y1, y2]) {\r\n    const index = this.#binarySearch(y1);\r\n    this.#intervals.splice(index, 0, [y1, y2]);\r\n  }\r\n  #remove([, y1, y2]) {\r\n    const index = this.#binarySearch(y1);\r\n    for (let i = index; i < this.#intervals.length; i++) {\r\n      const [start, end] = this.#intervals[i];\r\n      if (start !== y1) {\r\n        break;\r\n      }\r\n      if (start === y1 && end === y2) {\r\n        this.#intervals.splice(i, 1);\r\n        return;\r\n      }\r\n    }\r\n    for (let i = index - 1; i >= 0; i--) {\r\n      const [start, end] = this.#intervals[i];\r\n      if (start !== y1) {\r\n        break;\r\n      }\r\n      if (start === y1 && end === y2) {\r\n        this.#intervals.splice(i, 1);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  #breakEdge(edge) {\r\n    const [x, y1, y2] = edge;\r\n    const results = [[x, y1, y2]];\r\n    const index = this.#binarySearch(y2);\r\n    for (let i = 0; i < index; i++) {\r\n      const [start, end] = this.#intervals[i];\r\n      for (let j = 0, jj = results.length; j < jj; j++) {\r\n        const [, y3, y4] = results[j];\r\n        if (end <= y3 || y4 <= start) {\r\n          continue;\r\n        }\r\n        if (y3 >= start) {\r\n          if (y4 > end) {\r\n            results[j][1] = end;\r\n          } else {\r\n            if (jj === 1) {\r\n              return [];\r\n            }\r\n            results.splice(j, 1);\r\n            j--;\r\n            jj--;\r\n          }\r\n          continue;\r\n        }\r\n        results[j][2] = start;\r\n        if (y4 > end) {\r\n          results.push([x, end, y4]);\r\n        }\r\n      }\r\n    }\r\n    return results;\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 812:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_419843__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_419843__.d(__nested_webpack_exports__, {\r\n/* harmony export */   AnnotationEditorUIManager: () => (/* binding */ AnnotationEditorUIManager),\r\n/* harmony export */   ColorManager: () => (/* binding */ ColorManager),\r\n/* harmony export */   KeyboardManager: () => (/* binding */ KeyboardManager),\r\n/* harmony export */   bindEvents: () => (/* binding */ bindEvents),\r\n/* harmony export */   opacityToHex: () => (/* binding */ opacityToHex)\r\n/* harmony export */ });\r\n/* unused harmony export CommandManager */\r\n/* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_419843__(266);\r\n/* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_419843__(473);\r\n\r\n\r\nfunction bindEvents(obj, element, names) {\r\n  for (const name of names) {\r\n    element.addEventListener(name, obj[name].bind(obj));\r\n  }\r\n}\r\nfunction opacityToHex(opacity) {\r\n  return Math.round(Math.min(255, Math.max(1, 255 * opacity))).toString(16).padStart(2, \"0\");\r\n}\r\nclass IdManager {\r\n  #id = 0;\r\n  getId() {\r\n    return `${_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorPrefix}${this.#id++}`;\r\n  }\r\n}\r\nclass ImageManager {\r\n  #baseId = (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.getUuid)();\r\n  #id = 0;\r\n  #cache = null;\r\n  static get _isSVGFittingCanvas() {\r\n    const svg = `data:image/svg+xml;charset=UTF-8,<svg viewBox=\"0 0 1 1\" width=\"1\" height=\"1\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"1\" height=\"1\" style=\"fill:red;\"/></svg>`;\r\n    const canvas = new OffscreenCanvas(1, 3);\r\n    const ctx = canvas.getContext(\"2d\");\r\n    const image = new Image();\r\n    image.src = svg;\r\n    const promise = image.decode().then(() => {\r\n      ctx.drawImage(image, 0, 0, 1, 1, 0, 0, 1, 3);\r\n      return new Uint32Array(ctx.getImageData(0, 0, 1, 1).data.buffer)[0] === 0;\r\n    });\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"_isSVGFittingCanvas\", promise);\r\n  }\r\n  async #get(key, rawData) {\r\n    this.#cache ||= new Map();\r\n    let data = this.#cache.get(key);\r\n    if (data === null) {\r\n      return null;\r\n    }\r\n    if (data?.bitmap) {\r\n      data.refCounter += 1;\r\n      return data;\r\n    }\r\n    try {\r\n      data ||= {\r\n        bitmap: null,\r\n        id: `image_${this.#baseId}_${this.#id++}`,\r\n        refCounter: 0,\r\n        isSvg: false\r\n      };\r\n      let image;\r\n      if (typeof rawData === \"string\") {\r\n        data.url = rawData;\r\n        image = await (0,_display_utils_js__WEBPACK_IMPORTED_MODULE_1__.fetchData)(rawData, \"blob\");\r\n      } else {\r\n        image = data.file = rawData;\r\n      }\r\n      if (image.type === \"image/svg+xml\") {\r\n        const mustRemoveAspectRatioPromise = ImageManager._isSVGFittingCanvas;\r\n        const fileReader = new FileReader();\r\n        const imageElement = new Image();\r\n        const imagePromise = new Promise((resolve, reject) => {\r\n          imageElement.onload = () => {\r\n            data.bitmap = imageElement;\r\n            data.isSvg = true;\r\n            resolve();\r\n          };\r\n          fileReader.onload = async () => {\r\n            const url = data.svgUrl = fileReader.result;\r\n            imageElement.src = (await mustRemoveAspectRatioPromise) ? `${url}#svgView(preserveAspectRatio(none))` : url;\r\n          };\r\n          imageElement.onerror = fileReader.onerror = reject;\r\n        });\r\n        fileReader.readAsDataURL(image);\r\n        await imagePromise;\r\n      } else {\r\n        data.bitmap = await createImageBitmap(image);\r\n      }\r\n      data.refCounter = 1;\r\n    } catch (e) {\r\n      console.error(e);\r\n      data = null;\r\n    }\r\n    this.#cache.set(key, data);\r\n    if (data) {\r\n      this.#cache.set(data.id, data);\r\n    }\r\n    return data;\r\n  }\r\n  async getFromFile(file) {\r\n    const {\r\n      lastModified,\r\n      name,\r\n      size,\r\n      type\r\n    } = file;\r\n    return this.#get(`${lastModified}_${name}_${size}_${type}`, file);\r\n  }\r\n  async getFromUrl(url) {\r\n    return this.#get(url, url);\r\n  }\r\n  async getFromId(id) {\r\n    this.#cache ||= new Map();\r\n    const data = this.#cache.get(id);\r\n    if (!data) {\r\n      return null;\r\n    }\r\n    if (data.bitmap) {\r\n      data.refCounter += 1;\r\n      return data;\r\n    }\r\n    if (data.file) {\r\n      return this.getFromFile(data.file);\r\n    }\r\n    return this.getFromUrl(data.url);\r\n  }\r\n  getSvgUrl(id) {\r\n    const data = this.#cache.get(id);\r\n    if (!data?.isSvg) {\r\n      return null;\r\n    }\r\n    return data.svgUrl;\r\n  }\r\n  deleteId(id) {\r\n    this.#cache ||= new Map();\r\n    const data = this.#cache.get(id);\r\n    if (!data) {\r\n      return;\r\n    }\r\n    data.refCounter -= 1;\r\n    if (data.refCounter !== 0) {\r\n      return;\r\n    }\r\n    data.bitmap = null;\r\n  }\r\n  isValidId(id) {\r\n    return id.startsWith(`image_${this.#baseId}_`);\r\n  }\r\n}\r\nclass CommandManager {\r\n  #commands = [];\r\n  #locked = false;\r\n  #maxSize;\r\n  #position = -1;\r\n  constructor(maxSize = 128) {\r\n    this.#maxSize = maxSize;\r\n  }\r\n  add({\r\n    cmd,\r\n    undo,\r\n    mustExec,\r\n    type = NaN,\r\n    overwriteIfSameType = false,\r\n    keepUndo = false\r\n  }) {\r\n    if (mustExec) {\r\n      cmd();\r\n    }\r\n    if (this.#locked) {\r\n      return;\r\n    }\r\n    const save = {\r\n      cmd,\r\n      undo,\r\n      type\r\n    };\r\n    if (this.#position === -1) {\r\n      if (this.#commands.length > 0) {\r\n        this.#commands.length = 0;\r\n      }\r\n      this.#position = 0;\r\n      this.#commands.push(save);\r\n      return;\r\n    }\r\n    if (overwriteIfSameType && this.#commands[this.#position].type === type) {\r\n      if (keepUndo) {\r\n        save.undo = this.#commands[this.#position].undo;\r\n      }\r\n      this.#commands[this.#position] = save;\r\n      return;\r\n    }\r\n    const next = this.#position + 1;\r\n    if (next === this.#maxSize) {\r\n      this.#commands.splice(0, 1);\r\n    } else {\r\n      this.#position = next;\r\n      if (next < this.#commands.length) {\r\n        this.#commands.splice(next);\r\n      }\r\n    }\r\n    this.#commands.push(save);\r\n  }\r\n  undo() {\r\n    if (this.#position === -1) {\r\n      return;\r\n    }\r\n    this.#locked = true;\r\n    this.#commands[this.#position].undo();\r\n    this.#locked = false;\r\n    this.#position -= 1;\r\n  }\r\n  redo() {\r\n    if (this.#position < this.#commands.length - 1) {\r\n      this.#position += 1;\r\n      this.#locked = true;\r\n      this.#commands[this.#position].cmd();\r\n      this.#locked = false;\r\n    }\r\n  }\r\n  hasSomethingToUndo() {\r\n    return this.#position !== -1;\r\n  }\r\n  hasSomethingToRedo() {\r\n    return this.#position < this.#commands.length - 1;\r\n  }\r\n  destroy() {\r\n    this.#commands = null;\r\n  }\r\n}\r\nclass KeyboardManager {\r\n  constructor(callbacks) {\r\n    this.buffer = [];\r\n    this.callbacks = new Map();\r\n    this.allKeys = new Set();\r\n    const {\r\n      isMac\r\n    } = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.FeatureTest.platform;\r\n    for (const [keys, callback, options = {}] of callbacks) {\r\n      for (const key of keys) {\r\n        const isMacKey = key.startsWith(\"mac+\");\r\n        if (isMac && isMacKey) {\r\n          this.callbacks.set(key.slice(4), {\r\n            callback,\r\n            options\r\n          });\r\n          this.allKeys.add(key.split(\"+\").at(-1));\r\n        } else if (!isMac && !isMacKey) {\r\n          this.callbacks.set(key, {\r\n            callback,\r\n            options\r\n          });\r\n          this.allKeys.add(key.split(\"+\").at(-1));\r\n        }\r\n      }\r\n    }\r\n  }\r\n  #serialize(event) {\r\n    if (event.altKey) {\r\n      this.buffer.push(\"alt\");\r\n    }\r\n    if (event.ctrlKey) {\r\n      this.buffer.push(\"ctrl\");\r\n    }\r\n    if (event.metaKey) {\r\n      this.buffer.push(\"meta\");\r\n    }\r\n    if (event.shiftKey) {\r\n      this.buffer.push(\"shift\");\r\n    }\r\n    this.buffer.push(event.key);\r\n    const str = this.buffer.join(\"+\");\r\n    this.buffer.length = 0;\r\n    return str;\r\n  }\r\n  exec(self, event) {\r\n    if (!this.allKeys.has(event.key)) {\r\n      return;\r\n    }\r\n    const info = this.callbacks.get(this.#serialize(event));\r\n    if (!info) {\r\n      return;\r\n    }\r\n    const {\r\n      callback,\r\n      options: {\r\n        bubbles = false,\r\n        args = [],\r\n        checker = null\r\n      }\r\n    } = info;\r\n    if (checker && !checker(self, event)) {\r\n      return;\r\n    }\r\n    callback.bind(self, ...args, event)();\r\n    if (!bubbles) {\r\n      event.stopPropagation();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n}\r\nclass ColorManager {\r\n  static _colorsMapping = new Map([[\"CanvasText\", [0, 0, 0]], [\"Canvas\", [255, 255, 255]]]);\r\n  get _colors() {\r\n    const colors = new Map([[\"CanvasText\", null], [\"Canvas\", null]]);\r\n    (0,_display_utils_js__WEBPACK_IMPORTED_MODULE_1__.getColorValues)(colors);\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"_colors\", colors);\r\n  }\r\n  convert(color) {\r\n    const rgb = (0,_display_utils_js__WEBPACK_IMPORTED_MODULE_1__.getRGB)(color);\r\n    if (!window.matchMedia(\"(forced-colors: active)\").matches) {\r\n      return rgb;\r\n    }\r\n    for (const [name, RGB] of this._colors) {\r\n      if (RGB.every((x, i) => x === rgb[i])) {\r\n        return ColorManager._colorsMapping.get(name);\r\n      }\r\n    }\r\n    return rgb;\r\n  }\r\n  getHexCode(name) {\r\n    const rgb = this._colors.get(name);\r\n    if (!rgb) {\r\n      return name;\r\n    }\r\n    return _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.Util.makeHexColor(...rgb);\r\n  }\r\n}\r\nclass AnnotationEditorUIManager {\r\n  #activeEditor = null;\r\n  #allEditors = new Map();\r\n  #allLayers = new Map();\r\n  #altTextManager = null;\r\n  #annotationStorage = null;\r\n  #commandManager = new CommandManager();\r\n  #currentPageIndex = 0;\r\n  #deletedAnnotationsElementIds = new Set();\r\n  #draggingEditors = null;\r\n  #editorTypes = null;\r\n  #editorsToRescale = new Set();\r\n  #filterFactory = null;\r\n  #focusMainContainerTimeoutId = null;\r\n  #highlightColors = null;\r\n  #idManager = new IdManager();\r\n  #isEnabled = false;\r\n  #isWaiting = false;\r\n  #lastActiveElement = null;\r\n  #mainHighlightColorPicker = null;\r\n  #mode = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorType.NONE;\r\n  #selectedEditors = new Set();\r\n  #pageColors = null;\r\n  #boundBlur = this.blur.bind(this);\r\n  #boundFocus = this.focus.bind(this);\r\n  #boundCopy = this.copy.bind(this);\r\n  #boundCut = this.cut.bind(this);\r\n  #boundPaste = this.paste.bind(this);\r\n  #boundKeydown = this.keydown.bind(this);\r\n  #boundOnEditingAction = this.onEditingAction.bind(this);\r\n  #boundOnPageChanging = this.onPageChanging.bind(this);\r\n  #boundOnScaleChanging = this.onScaleChanging.bind(this);\r\n  #boundOnRotationChanging = this.onRotationChanging.bind(this);\r\n  #previousStates = {\r\n    isEditing: false,\r\n    isEmpty: true,\r\n    hasSomethingToUndo: false,\r\n    hasSomethingToRedo: false,\r\n    hasSelectedEditor: false\r\n  };\r\n  #translation = [0, 0];\r\n  #translationTimeoutId = null;\r\n  #container = null;\r\n  #viewer = null;\r\n  static TRANSLATE_SMALL = 1;\r\n  static TRANSLATE_BIG = 10;\r\n  static get _keyboardManager() {\r\n    const proto = AnnotationEditorUIManager.prototype;\r\n    const arrowChecker = self => {\r\n      return self.#container.contains(document.activeElement) && document.activeElement.tagName !== \"BUTTON\" && self.hasSomethingToControl();\r\n    };\r\n    const textInputChecker = (_self, {\r\n      target: el\r\n    }) => {\r\n      if (el instanceof HTMLInputElement) {\r\n        const {\r\n          type\r\n        } = el;\r\n        return type !== \"text\" && type !== \"number\";\r\n      }\r\n      return true;\r\n    };\r\n    const small = this.TRANSLATE_SMALL;\r\n    const big = this.TRANSLATE_BIG;\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"_keyboardManager\", new KeyboardManager([[[\"ctrl+a\", \"mac+meta+a\"], proto.selectAll, {\r\n      checker: textInputChecker\r\n    }], [[\"ctrl+z\", \"mac+meta+z\"], proto.undo, {\r\n      checker: textInputChecker\r\n    }], [[\"ctrl+y\", \"ctrl+shift+z\", \"mac+meta+shift+z\", \"ctrl+shift+Z\", \"mac+meta+shift+Z\"], proto.redo, {\r\n      checker: textInputChecker\r\n    }], [[\"Backspace\", \"alt+Backspace\", \"ctrl+Backspace\", \"shift+Backspace\", \"mac+Backspace\", \"mac+alt+Backspace\", \"mac+ctrl+Backspace\", \"Delete\", \"ctrl+Delete\", \"shift+Delete\", \"mac+Delete\"], proto.delete, {\r\n      checker: textInputChecker\r\n    }], [[\"Enter\", \"mac+Enter\"], proto.addNewEditorFromKeyboard, {\r\n      checker: (self, {\r\n        target: el\r\n      }) => !(el instanceof HTMLButtonElement) && self.#container.contains(el) && !self.isEnterHandled\r\n    }], [[\" \", \"mac+ \"], proto.addNewEditorFromKeyboard, {\r\n      checker: self => self.#container.contains(document.activeElement)\r\n    }], [[\"Escape\", \"mac+Escape\"], proto.unselectAll], [[\"ArrowLeft\", \"mac+ArrowLeft\"], proto.translateSelectedEditors, {\r\n      args: [-small, 0],\r\n      checker: arrowChecker\r\n    }], [[\"ctrl+ArrowLeft\", \"mac+shift+ArrowLeft\"], proto.translateSelectedEditors, {\r\n      args: [-big, 0],\r\n      checker: arrowChecker\r\n    }], [[\"ArrowRight\", \"mac+ArrowRight\"], proto.translateSelectedEditors, {\r\n      args: [small, 0],\r\n      checker: arrowChecker\r\n    }], [[\"ctrl+ArrowRight\", \"mac+shift+ArrowRight\"], proto.translateSelectedEditors, {\r\n      args: [big, 0],\r\n      checker: arrowChecker\r\n    }], [[\"ArrowUp\", \"mac+ArrowUp\"], proto.translateSelectedEditors, {\r\n      args: [0, -small],\r\n      checker: arrowChecker\r\n    }], [[\"ctrl+ArrowUp\", \"mac+shift+ArrowUp\"], proto.translateSelectedEditors, {\r\n      args: [0, -big],\r\n      checker: arrowChecker\r\n    }], [[\"ArrowDown\", \"mac+ArrowDown\"], proto.translateSelectedEditors, {\r\n      args: [0, small],\r\n      checker: arrowChecker\r\n    }], [[\"ctrl+ArrowDown\", \"mac+shift+ArrowDown\"], proto.translateSelectedEditors, {\r\n      args: [0, big],\r\n      checker: arrowChecker\r\n    }]]));\r\n  }\r\n  constructor(container, viewer, altTextManager, eventBus, pdfDocument, pageColors, highlightColors) {\r\n    this.#container = container;\r\n    this.#viewer = viewer;\r\n    this.#altTextManager = altTextManager;\r\n    this._eventBus = eventBus;\r\n    this._eventBus._on(\"editingaction\", this.#boundOnEditingAction);\r\n    this._eventBus._on(\"pagechanging\", this.#boundOnPageChanging);\r\n    this._eventBus._on(\"scalechanging\", this.#boundOnScaleChanging);\r\n    this._eventBus._on(\"rotationchanging\", this.#boundOnRotationChanging);\r\n    this.#annotationStorage = pdfDocument.annotationStorage;\r\n    this.#filterFactory = pdfDocument.filterFactory;\r\n    this.#pageColors = pageColors;\r\n    this.#highlightColors = highlightColors || null;\r\n    this.viewParameters = {\r\n      realScale: _display_utils_js__WEBPACK_IMPORTED_MODULE_1__.PixelsPerInch.PDF_TO_CSS_UNITS,\r\n      rotation: 0\r\n    };\r\n  }\r\n  destroy() {\r\n    this.#removeKeyboardManager();\r\n    this.#removeFocusManager();\r\n    this._eventBus._off(\"editingaction\", this.#boundOnEditingAction);\r\n    this._eventBus._off(\"pagechanging\", this.#boundOnPageChanging);\r\n    this._eventBus._off(\"scalechanging\", this.#boundOnScaleChanging);\r\n    this._eventBus._off(\"rotationchanging\", this.#boundOnRotationChanging);\r\n    for (const layer of this.#allLayers.values()) {\r\n      layer.destroy();\r\n    }\r\n    this.#allLayers.clear();\r\n    this.#allEditors.clear();\r\n    this.#editorsToRescale.clear();\r\n    this.#activeEditor = null;\r\n    this.#selectedEditors.clear();\r\n    this.#commandManager.destroy();\r\n    this.#altTextManager?.destroy();\r\n    if (this.#focusMainContainerTimeoutId) {\r\n      clearTimeout(this.#focusMainContainerTimeoutId);\r\n      this.#focusMainContainerTimeoutId = null;\r\n    }\r\n    if (this.#translationTimeoutId) {\r\n      clearTimeout(this.#translationTimeoutId);\r\n      this.#translationTimeoutId = null;\r\n    }\r\n  }\r\n  get hcmFilter() {\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"hcmFilter\", this.#pageColors ? this.#filterFactory.addHCMFilter(this.#pageColors.foreground, this.#pageColors.background) : \"none\");\r\n  }\r\n  get direction() {\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"direction\", getComputedStyle(this.#container).direction);\r\n  }\r\n  get highlightColors() {\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"highlightColors\", this.#highlightColors ? new Map(this.#highlightColors.split(\",\").map(pair => pair.split(\"=\").map(x => x.trim()))) : null);\r\n  }\r\n  setMainHighlightColorPicker(colorPicker) {\r\n    this.#mainHighlightColorPicker = colorPicker;\r\n  }\r\n  editAltText(editor) {\r\n    this.#altTextManager?.editAltText(this, editor);\r\n  }\r\n  onPageChanging({\r\n    pageNumber\r\n  }) {\r\n    this.#currentPageIndex = pageNumber - 1;\r\n  }\r\n  focusMainContainer() {\r\n    this.#container.focus();\r\n  }\r\n  findParent(x, y) {\r\n    for (const layer of this.#allLayers.values()) {\r\n      const {\r\n        x: layerX,\r\n        y: layerY,\r\n        width,\r\n        height\r\n      } = layer.div.getBoundingClientRect();\r\n      if (x >= layerX && x <= layerX + width && y >= layerY && y <= layerY + height) {\r\n        return layer;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  disableUserSelect(value = false) {\r\n    this.#viewer.classList.toggle(\"noUserSelect\", value);\r\n  }\r\n  addShouldRescale(editor) {\r\n    this.#editorsToRescale.add(editor);\r\n  }\r\n  removeShouldRescale(editor) {\r\n    this.#editorsToRescale.delete(editor);\r\n  }\r\n  onScaleChanging({\r\n    scale\r\n  }) {\r\n    this.commitOrRemove();\r\n    this.viewParameters.realScale = scale * _display_utils_js__WEBPACK_IMPORTED_MODULE_1__.PixelsPerInch.PDF_TO_CSS_UNITS;\r\n    for (const editor of this.#editorsToRescale) {\r\n      editor.onScaleChanging();\r\n    }\r\n  }\r\n  onRotationChanging({\r\n    pagesRotation\r\n  }) {\r\n    this.commitOrRemove();\r\n    this.viewParameters.rotation = pagesRotation;\r\n  }\r\n  addToAnnotationStorage(editor) {\r\n    if (!editor.isEmpty() && this.#annotationStorage && !this.#annotationStorage.has(editor.id)) {\r\n      this.#annotationStorage.setValue(editor.id, editor);\r\n    }\r\n  }\r\n  #addFocusManager() {\r\n    window.addEventListener(\"focus\", this.#boundFocus);\r\n    window.addEventListener(\"blur\", this.#boundBlur);\r\n  }\r\n  #removeFocusManager() {\r\n    window.removeEventListener(\"focus\", this.#boundFocus);\r\n    window.removeEventListener(\"blur\", this.#boundBlur);\r\n  }\r\n  blur() {\r\n    if (!this.hasSelection) {\r\n      return;\r\n    }\r\n    const {\r\n      activeElement\r\n    } = document;\r\n    for (const editor of this.#selectedEditors) {\r\n      if (editor.div.contains(activeElement)) {\r\n        this.#lastActiveElement = [editor, activeElement];\r\n        editor._focusEventsAllowed = false;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  focus() {\r\n    if (!this.#lastActiveElement) {\r\n      return;\r\n    }\r\n    const [lastEditor, lastActiveElement] = this.#lastActiveElement;\r\n    this.#lastActiveElement = null;\r\n    lastActiveElement.addEventListener(\"focusin\", () => {\r\n      lastEditor._focusEventsAllowed = true;\r\n    }, {\r\n      once: true\r\n    });\r\n    lastActiveElement.focus();\r\n  }\r\n  #addKeyboardManager() {\r\n    window.addEventListener(\"keydown\", this.#boundKeydown);\r\n  }\r\n  #removeKeyboardManager() {\r\n    window.removeEventListener(\"keydown\", this.#boundKeydown);\r\n  }\r\n  #addCopyPasteListeners() {\r\n    document.addEventListener(\"copy\", this.#boundCopy);\r\n    document.addEventListener(\"cut\", this.#boundCut);\r\n    document.addEventListener(\"paste\", this.#boundPaste);\r\n  }\r\n  #removeCopyPasteListeners() {\r\n    document.removeEventListener(\"copy\", this.#boundCopy);\r\n    document.removeEventListener(\"cut\", this.#boundCut);\r\n    document.removeEventListener(\"paste\", this.#boundPaste);\r\n  }\r\n  addEditListeners() {\r\n    this.#addKeyboardManager();\r\n    this.#addCopyPasteListeners();\r\n  }\r\n  removeEditListeners() {\r\n    this.#removeKeyboardManager();\r\n    this.#removeCopyPasteListeners();\r\n  }\r\n  copy(event) {\r\n    event.preventDefault();\r\n    this.#activeEditor?.commitOrRemove();\r\n    if (!this.hasSelection) {\r\n      return;\r\n    }\r\n    const editors = [];\r\n    for (const editor of this.#selectedEditors) {\r\n      const serialized = editor.serialize(true);\r\n      if (serialized) {\r\n        editors.push(serialized);\r\n      }\r\n    }\r\n    if (editors.length === 0) {\r\n      return;\r\n    }\r\n    event.clipboardData.setData(\"application/pdfjs\", JSON.stringify(editors));\r\n  }\r\n  cut(event) {\r\n    this.copy(event);\r\n    this.delete();\r\n  }\r\n  paste(event) {\r\n    event.preventDefault();\r\n    const {\r\n      clipboardData\r\n    } = event;\r\n    for (const item of clipboardData.items) {\r\n      for (const editorType of this.#editorTypes) {\r\n        if (editorType.isHandlingMimeForPasting(item.type)) {\r\n          editorType.paste(item, this.currentLayer);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    let data = clipboardData.getData(\"application/pdfjs\");\r\n    if (!data) {\r\n      return;\r\n    }\r\n    try {\r\n      data = JSON.parse(data);\r\n    } catch (ex) {\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`paste: \"${ex.message}\".`);\r\n      return;\r\n    }\r\n    if (!Array.isArray(data)) {\r\n      return;\r\n    }\r\n    this.unselectAll();\r\n    const layer = this.currentLayer;\r\n    try {\r\n      const newEditors = [];\r\n      for (const editor of data) {\r\n        const deserializedEditor = layer.deserialize(editor);\r\n        if (!deserializedEditor) {\r\n          return;\r\n        }\r\n        newEditors.push(deserializedEditor);\r\n      }\r\n      const cmd = () => {\r\n        for (const editor of newEditors) {\r\n          this.#addEditorToLayer(editor);\r\n        }\r\n        this.#selectEditors(newEditors);\r\n      };\r\n      const undo = () => {\r\n        for (const editor of newEditors) {\r\n          editor.remove();\r\n        }\r\n      };\r\n      this.addCommands({\r\n        cmd,\r\n        undo,\r\n        mustExec: true\r\n      });\r\n    } catch (ex) {\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`paste: \"${ex.message}\".`);\r\n    }\r\n  }\r\n  keydown(event) {\r\n    if (!this.isEditorHandlingKeyboard) {\r\n      AnnotationEditorUIManager._keyboardManager.exec(this, event);\r\n    }\r\n  }\r\n  onEditingAction(details) {\r\n    if ([\"undo\", \"redo\", \"delete\", \"selectAll\"].includes(details.name)) {\r\n      this[details.name]();\r\n    }\r\n  }\r\n  #dispatchUpdateStates(details) {\r\n    const hasChanged = Object.entries(details).some(([key, value]) => this.#previousStates[key] !== value);\r\n    if (hasChanged) {\r\n      this._eventBus.dispatch(\"annotationeditorstateschanged\", {\r\n        source: this,\r\n        details: Object.assign(this.#previousStates, details)\r\n      });\r\n    }\r\n  }\r\n  #dispatchUpdateUI(details) {\r\n    this._eventBus.dispatch(\"annotationeditorparamschanged\", {\r\n      source: this,\r\n      details\r\n    });\r\n  }\r\n  setEditingState(isEditing) {\r\n    if (isEditing) {\r\n      this.#addFocusManager();\r\n      this.#addKeyboardManager();\r\n      this.#addCopyPasteListeners();\r\n      this.#dispatchUpdateStates({\r\n        isEditing: this.#mode !== _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorType.NONE,\r\n        isEmpty: this.#isEmpty(),\r\n        hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),\r\n        hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),\r\n        hasSelectedEditor: false\r\n      });\r\n    } else {\r\n      this.#removeFocusManager();\r\n      this.#removeKeyboardManager();\r\n      this.#removeCopyPasteListeners();\r\n      this.#dispatchUpdateStates({\r\n        isEditing: false\r\n      });\r\n      this.disableUserSelect(false);\r\n    }\r\n  }\r\n  registerEditorTypes(types) {\r\n    if (this.#editorTypes) {\r\n      return;\r\n    }\r\n    this.#editorTypes = types;\r\n    for (const editorType of this.#editorTypes) {\r\n      this.#dispatchUpdateUI(editorType.defaultPropertiesToUpdate);\r\n    }\r\n  }\r\n  getId() {\r\n    return this.#idManager.getId();\r\n  }\r\n  get currentLayer() {\r\n    return this.#allLayers.get(this.#currentPageIndex);\r\n  }\r\n  getLayer(pageIndex) {\r\n    return this.#allLayers.get(pageIndex);\r\n  }\r\n  get currentPageIndex() {\r\n    return this.#currentPageIndex;\r\n  }\r\n  addLayer(layer) {\r\n    this.#allLayers.set(layer.pageIndex, layer);\r\n    if (this.#isEnabled) {\r\n      layer.enable();\r\n    } else {\r\n      layer.disable();\r\n    }\r\n  }\r\n  removeLayer(layer) {\r\n    this.#allLayers.delete(layer.pageIndex);\r\n  }\r\n  updateMode(mode, editId = null, isFromKeyboard = false) {\r\n    if (this.#mode === mode) {\r\n      return;\r\n    }\r\n    this.#mode = mode;\r\n    if (mode === _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorType.NONE) {\r\n      this.setEditingState(false);\r\n      this.#disableAll();\r\n      return;\r\n    }\r\n    this.setEditingState(true);\r\n    this.#enableAll();\r\n    this.unselectAll();\r\n    for (const layer of this.#allLayers.values()) {\r\n      layer.updateMode(mode);\r\n    }\r\n    if (!editId && isFromKeyboard) {\r\n      this.addNewEditorFromKeyboard();\r\n      return;\r\n    }\r\n    if (!editId) {\r\n      return;\r\n    }\r\n    for (const editor of this.#allEditors.values()) {\r\n      if (editor.annotationElementId === editId) {\r\n        this.setSelected(editor);\r\n        editor.enterInEditMode();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  addNewEditorFromKeyboard() {\r\n    if (this.currentLayer.canCreateNewEmptyEditor()) {\r\n      this.currentLayer.addNewEditor();\r\n    }\r\n  }\r\n  updateToolbar(mode) {\r\n    if (mode === this.#mode) {\r\n      return;\r\n    }\r\n    this._eventBus.dispatch(\"switchannotationeditormode\", {\r\n      source: this,\r\n      mode\r\n    });\r\n  }\r\n  updateParams(type, value) {\r\n    if (!this.#editorTypes) {\r\n      return;\r\n    }\r\n    switch (type) {\r\n      case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorParamsType.CREATE:\r\n        this.currentLayer.addNewEditor();\r\n        return;\r\n      case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR:\r\n        this.#mainHighlightColorPicker?.updateColor(value);\r\n        break;\r\n    }\r\n    for (const editor of this.#selectedEditors) {\r\n      editor.updateParams(type, value);\r\n    }\r\n    for (const editorType of this.#editorTypes) {\r\n      editorType.updateDefaultParams(type, value);\r\n    }\r\n  }\r\n  enableWaiting(mustWait = false) {\r\n    if (this.#isWaiting === mustWait) {\r\n      return;\r\n    }\r\n    this.#isWaiting = mustWait;\r\n    for (const layer of this.#allLayers.values()) {\r\n      if (mustWait) {\r\n        layer.disableClick();\r\n      } else {\r\n        layer.enableClick();\r\n      }\r\n      layer.div.classList.toggle(\"waiting\", mustWait);\r\n    }\r\n  }\r\n  #enableAll() {\r\n    if (!this.#isEnabled) {\r\n      this.#isEnabled = true;\r\n      for (const layer of this.#allLayers.values()) {\r\n        layer.enable();\r\n      }\r\n    }\r\n  }\r\n  #disableAll() {\r\n    this.unselectAll();\r\n    if (this.#isEnabled) {\r\n      this.#isEnabled = false;\r\n      for (const layer of this.#allLayers.values()) {\r\n        layer.disable();\r\n      }\r\n    }\r\n  }\r\n  getEditors(pageIndex) {\r\n    const editors = [];\r\n    for (const editor of this.#allEditors.values()) {\r\n      if (editor.pageIndex === pageIndex) {\r\n        editors.push(editor);\r\n      }\r\n    }\r\n    return editors;\r\n  }\r\n  getEditor(id) {\r\n    return this.#allEditors.get(id);\r\n  }\r\n  addEditor(editor) {\r\n    this.#allEditors.set(editor.id, editor);\r\n  }\r\n  removeEditor(editor) {\r\n    if (editor.div.contains(document.activeElement)) {\r\n      if (this.#focusMainContainerTimeoutId) {\r\n        clearTimeout(this.#focusMainContainerTimeoutId);\r\n      }\r\n      this.#focusMainContainerTimeoutId = setTimeout(() => {\r\n        this.focusMainContainer();\r\n        this.#focusMainContainerTimeoutId = null;\r\n      }, 0);\r\n    }\r\n    this.#allEditors.delete(editor.id);\r\n    this.unselect(editor);\r\n    if (!editor.annotationElementId || !this.#deletedAnnotationsElementIds.has(editor.annotationElementId)) {\r\n      this.#annotationStorage?.remove(editor.id);\r\n    }\r\n  }\r\n  addDeletedAnnotationElement(editor) {\r\n    this.#deletedAnnotationsElementIds.add(editor.annotationElementId);\r\n    editor.deleted = true;\r\n  }\r\n  isDeletedAnnotationElement(annotationElementId) {\r\n    return this.#deletedAnnotationsElementIds.has(annotationElementId);\r\n  }\r\n  removeDeletedAnnotationElement(editor) {\r\n    this.#deletedAnnotationsElementIds.delete(editor.annotationElementId);\r\n    editor.deleted = false;\r\n  }\r\n  #addEditorToLayer(editor) {\r\n    const layer = this.#allLayers.get(editor.pageIndex);\r\n    if (layer) {\r\n      layer.addOrRebuild(editor);\r\n    } else {\r\n      this.addEditor(editor);\r\n    }\r\n  }\r\n  setActiveEditor(editor) {\r\n    if (this.#activeEditor === editor) {\r\n      return;\r\n    }\r\n    this.#activeEditor = editor;\r\n    if (editor) {\r\n      this.#dispatchUpdateUI(editor.propertiesToUpdate);\r\n    }\r\n  }\r\n  toggleSelected(editor) {\r\n    if (this.#selectedEditors.has(editor)) {\r\n      this.#selectedEditors.delete(editor);\r\n      editor.unselect();\r\n      this.#dispatchUpdateStates({\r\n        hasSelectedEditor: this.hasSelection\r\n      });\r\n      return;\r\n    }\r\n    this.#selectedEditors.add(editor);\r\n    editor.select();\r\n    this.#dispatchUpdateUI(editor.propertiesToUpdate);\r\n    this.#dispatchUpdateStates({\r\n      hasSelectedEditor: true\r\n    });\r\n  }\r\n  setSelected(editor) {\r\n    for (const ed of this.#selectedEditors) {\r\n      if (ed !== editor) {\r\n        ed.unselect();\r\n      }\r\n    }\r\n    this.#selectedEditors.clear();\r\n    this.#selectedEditors.add(editor);\r\n    editor.select();\r\n    this.#dispatchUpdateUI(editor.propertiesToUpdate);\r\n    this.#dispatchUpdateStates({\r\n      hasSelectedEditor: true\r\n    });\r\n  }\r\n  isSelected(editor) {\r\n    return this.#selectedEditors.has(editor);\r\n  }\r\n  get firstSelectedEditor() {\r\n    return this.#selectedEditors.values().next().value;\r\n  }\r\n  unselect(editor) {\r\n    editor.unselect();\r\n    this.#selectedEditors.delete(editor);\r\n    this.#dispatchUpdateStates({\r\n      hasSelectedEditor: this.hasSelection\r\n    });\r\n  }\r\n  get hasSelection() {\r\n    return this.#selectedEditors.size !== 0;\r\n  }\r\n  get isEnterHandled() {\r\n    return this.#selectedEditors.size === 1 && this.firstSelectedEditor.isEnterHandled;\r\n  }\r\n  undo() {\r\n    this.#commandManager.undo();\r\n    this.#dispatchUpdateStates({\r\n      hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),\r\n      hasSomethingToRedo: true,\r\n      isEmpty: this.#isEmpty()\r\n    });\r\n  }\r\n  redo() {\r\n    this.#commandManager.redo();\r\n    this.#dispatchUpdateStates({\r\n      hasSomethingToUndo: true,\r\n      hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),\r\n      isEmpty: this.#isEmpty()\r\n    });\r\n  }\r\n  addCommands(params) {\r\n    this.#commandManager.add(params);\r\n    this.#dispatchUpdateStates({\r\n      hasSomethingToUndo: true,\r\n      hasSomethingToRedo: false,\r\n      isEmpty: this.#isEmpty()\r\n    });\r\n  }\r\n  #isEmpty() {\r\n    if (this.#allEditors.size === 0) {\r\n      return true;\r\n    }\r\n    if (this.#allEditors.size === 1) {\r\n      for (const editor of this.#allEditors.values()) {\r\n        return editor.isEmpty();\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  delete() {\r\n    this.commitOrRemove();\r\n    if (!this.hasSelection) {\r\n      return;\r\n    }\r\n    const editors = [...this.#selectedEditors];\r\n    const cmd = () => {\r\n      for (const editor of editors) {\r\n        editor.remove();\r\n      }\r\n    };\r\n    const undo = () => {\r\n      for (const editor of editors) {\r\n        this.#addEditorToLayer(editor);\r\n      }\r\n    };\r\n    this.addCommands({\r\n      cmd,\r\n      undo,\r\n      mustExec: true\r\n    });\r\n  }\r\n  commitOrRemove() {\r\n    this.#activeEditor?.commitOrRemove();\r\n  }\r\n  hasSomethingToControl() {\r\n    return this.#activeEditor || this.hasSelection;\r\n  }\r\n  #selectEditors(editors) {\r\n    this.#selectedEditors.clear();\r\n    for (const editor of editors) {\r\n      if (editor.isEmpty()) {\r\n        continue;\r\n      }\r\n      this.#selectedEditors.add(editor);\r\n      editor.select();\r\n    }\r\n    this.#dispatchUpdateStates({\r\n      hasSelectedEditor: true\r\n    });\r\n  }\r\n  selectAll() {\r\n    for (const editor of this.#selectedEditors) {\r\n      editor.commit();\r\n    }\r\n    this.#selectEditors(this.#allEditors.values());\r\n  }\r\n  unselectAll() {\r\n    if (this.#activeEditor) {\r\n      this.#activeEditor.commitOrRemove();\r\n      if (this.#mode !== _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorType.NONE) {\r\n        return;\r\n      }\r\n    }\r\n    if (!this.hasSelection) {\r\n      return;\r\n    }\r\n    for (const editor of this.#selectedEditors) {\r\n      editor.unselect();\r\n    }\r\n    this.#selectedEditors.clear();\r\n    this.#dispatchUpdateStates({\r\n      hasSelectedEditor: false\r\n    });\r\n  }\r\n  translateSelectedEditors(x, y, noCommit = false) {\r\n    if (!noCommit) {\r\n      this.commitOrRemove();\r\n    }\r\n    if (!this.hasSelection) {\r\n      return;\r\n    }\r\n    this.#translation[0] += x;\r\n    this.#translation[1] += y;\r\n    const [totalX, totalY] = this.#translation;\r\n    const editors = [...this.#selectedEditors];\r\n    const TIME_TO_WAIT = 1000;\r\n    if (this.#translationTimeoutId) {\r\n      clearTimeout(this.#translationTimeoutId);\r\n    }\r\n    this.#translationTimeoutId = setTimeout(() => {\r\n      this.#translationTimeoutId = null;\r\n      this.#translation[0] = this.#translation[1] = 0;\r\n      this.addCommands({\r\n        cmd: () => {\r\n          for (const editor of editors) {\r\n            if (this.#allEditors.has(editor.id)) {\r\n              editor.translateInPage(totalX, totalY);\r\n            }\r\n          }\r\n        },\r\n        undo: () => {\r\n          for (const editor of editors) {\r\n            if (this.#allEditors.has(editor.id)) {\r\n              editor.translateInPage(-totalX, -totalY);\r\n            }\r\n          }\r\n        },\r\n        mustExec: false\r\n      });\r\n    }, TIME_TO_WAIT);\r\n    for (const editor of editors) {\r\n      editor.translateInPage(x, y);\r\n    }\r\n  }\r\n  setUpDragSession() {\r\n    if (!this.hasSelection) {\r\n      return;\r\n    }\r\n    this.disableUserSelect(true);\r\n    this.#draggingEditors = new Map();\r\n    for (const editor of this.#selectedEditors) {\r\n      this.#draggingEditors.set(editor, {\r\n        savedX: editor.x,\r\n        savedY: editor.y,\r\n        savedPageIndex: editor.pageIndex,\r\n        newX: 0,\r\n        newY: 0,\r\n        newPageIndex: -1\r\n      });\r\n    }\r\n  }\r\n  endDragSession() {\r\n    if (!this.#draggingEditors) {\r\n      return false;\r\n    }\r\n    this.disableUserSelect(false);\r\n    const map = this.#draggingEditors;\r\n    this.#draggingEditors = null;\r\n    let mustBeAddedInUndoStack = false;\r\n    for (const [{\r\n      x,\r\n      y,\r\n      pageIndex\r\n    }, value] of map) {\r\n      value.newX = x;\r\n      value.newY = y;\r\n      value.newPageIndex = pageIndex;\r\n      mustBeAddedInUndoStack ||= x !== value.savedX || y !== value.savedY || pageIndex !== value.savedPageIndex;\r\n    }\r\n    if (!mustBeAddedInUndoStack) {\r\n      return false;\r\n    }\r\n    const move = (editor, x, y, pageIndex) => {\r\n      if (this.#allEditors.has(editor.id)) {\r\n        const parent = this.#allLayers.get(pageIndex);\r\n        if (parent) {\r\n          editor._setParentAndPosition(parent, x, y);\r\n        } else {\r\n          editor.pageIndex = pageIndex;\r\n          editor.x = x;\r\n          editor.y = y;\r\n        }\r\n      }\r\n    };\r\n    this.addCommands({\r\n      cmd: () => {\r\n        for (const [editor, {\r\n          newX,\r\n          newY,\r\n          newPageIndex\r\n        }] of map) {\r\n          move(editor, newX, newY, newPageIndex);\r\n        }\r\n      },\r\n      undo: () => {\r\n        for (const [editor, {\r\n          savedX,\r\n          savedY,\r\n          savedPageIndex\r\n        }] of map) {\r\n          move(editor, savedX, savedY, savedPageIndex);\r\n        }\r\n      },\r\n      mustExec: true\r\n    });\r\n    return true;\r\n  }\r\n  dragSelectedEditors(tx, ty) {\r\n    if (!this.#draggingEditors) {\r\n      return;\r\n    }\r\n    for (const editor of this.#draggingEditors.keys()) {\r\n      editor.drag(tx, ty);\r\n    }\r\n  }\r\n  rebuild(editor) {\r\n    if (editor.parent === null) {\r\n      const parent = this.getLayer(editor.pageIndex);\r\n      if (parent) {\r\n        parent.changeParent(editor);\r\n        parent.addOrRebuild(editor);\r\n      } else {\r\n        this.addEditor(editor);\r\n        this.addToAnnotationStorage(editor);\r\n        editor.rebuild();\r\n      }\r\n    } else {\r\n      editor.parent.addOrRebuild(editor);\r\n    }\r\n  }\r\n  get isEditorHandlingKeyboard() {\r\n    return this.getActive()?.shouldGetKeyboardEvents() || this.#selectedEditors.size === 1 && this.firstSelectedEditor.shouldGetKeyboardEvents();\r\n  }\r\n  isActive(editor) {\r\n    return this.#activeEditor === editor;\r\n  }\r\n  getActive() {\r\n    return this.#activeEditor;\r\n  }\r\n  getMode() {\r\n    return this.#mode;\r\n  }\r\n  get imageManager() {\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"imageManager\", new ImageManager());\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 171:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_456367__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_456367__.d(__nested_webpack_exports__, {\r\n/* harmony export */   PDFFetchStream: () => (/* binding */ PDFFetchStream)\r\n/* harmony export */ });\r\n/* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_456367__(266);\r\n/* harmony import */ var _network_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_456367__(253);\r\n\r\n\r\n;\r\nfunction createFetchOptions(headers, withCredentials, abortController) {\r\n  return {\r\n    method: \"GET\",\r\n    headers,\r\n    signal: abortController.signal,\r\n    mode: \"cors\",\r\n    credentials: withCredentials ? \"include\" : \"same-origin\",\r\n    redirect: \"follow\"\r\n  };\r\n}\r\nfunction createHeaders(httpHeaders) {\r\n  const headers = new Headers();\r\n  for (const property in httpHeaders) {\r\n    const value = httpHeaders[property];\r\n    if (value === undefined) {\r\n      continue;\r\n    }\r\n    headers.append(property, value);\r\n  }\r\n  return headers;\r\n}\r\nfunction getArrayBuffer(val) {\r\n  if (val instanceof Uint8Array) {\r\n    return val.buffer;\r\n  }\r\n  if (val instanceof ArrayBuffer) {\r\n    return val;\r\n  }\r\n  (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`getArrayBuffer - unexpected data format: ${val}`);\r\n  return new Uint8Array(val).buffer;\r\n}\r\nclass PDFFetchStream {\r\n  constructor(source) {\r\n    this.source = source;\r\n    this.isHttp = /^https?:/i.test(source.url);\r\n    this.httpHeaders = this.isHttp && source.httpHeaders || {};\r\n    this._fullRequestReader = null;\r\n    this._rangeRequestReaders = [];\r\n  }\r\n  get _progressiveDataLength() {\r\n    return this._fullRequestReader?._loaded ?? 0;\r\n  }\r\n  getFullReader() {\r\n    (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!this._fullRequestReader, \"PDFFetchStream.getFullReader can only be called once.\");\r\n    this._fullRequestReader = new PDFFetchStreamReader(this);\r\n    return this._fullRequestReader;\r\n  }\r\n  getRangeReader(begin, end) {\r\n    if (end <= this._progressiveDataLength) {\r\n      return null;\r\n    }\r\n    const reader = new PDFFetchStreamRangeReader(this, begin, end);\r\n    this._rangeRequestReaders.push(reader);\r\n    return reader;\r\n  }\r\n  cancelAllRequests(reason) {\r\n    this._fullRequestReader?.cancel(reason);\r\n    for (const reader of this._rangeRequestReaders.slice(0)) {\r\n      reader.cancel(reason);\r\n    }\r\n  }\r\n}\r\nclass PDFFetchStreamReader {\r\n  constructor(stream) {\r\n    this._stream = stream;\r\n    this._reader = null;\r\n    this._loaded = 0;\r\n    this._filename = null;\r\n    const source = stream.source;\r\n    this._withCredentials = source.withCredentials || false;\r\n    this._contentLength = source.length;\r\n    this._headersCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n    this._disableRange = source.disableRange || false;\r\n    this._rangeChunkSize = source.rangeChunkSize;\r\n    if (!this._rangeChunkSize && !this._disableRange) {\r\n      this._disableRange = true;\r\n    }\r\n    this._abortController = new AbortController();\r\n    this._isStreamingSupported = !source.disableStream;\r\n    this._isRangeSupported = !source.disableRange;\r\n    this._headers = createHeaders(this._stream.httpHeaders);\r\n    const url = source.url;\r\n    fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\r\n      if (!(0,_network_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateResponseStatus)(response.status)) {\r\n        throw (0,_network_utils_js__WEBPACK_IMPORTED_MODULE_1__.createResponseStatusError)(response.status, url);\r\n      }\r\n      this._reader = response.body.getReader();\r\n      this._headersCapability.resolve();\r\n      const getResponseHeader = name => {\r\n        return response.headers.get(name);\r\n      };\r\n      const {\r\n        allowRangeRequests,\r\n        suggestedLength\r\n      } = (0,_network_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateRangeRequestCapabilities)({\r\n        getResponseHeader,\r\n        isHttp: this._stream.isHttp,\r\n        rangeChunkSize: this._rangeChunkSize,\r\n        disableRange: this._disableRange\r\n      });\r\n      this._isRangeSupported = allowRangeRequests;\r\n      this._contentLength = suggestedLength || this._contentLength;\r\n      this._filename = (0,_network_utils_js__WEBPACK_IMPORTED_MODULE_1__.extractFilenameFromHeader)(getResponseHeader);\r\n      if (!this._isStreamingSupported && this._isRangeSupported) {\r\n        this.cancel(new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(\"Streaming is disabled.\"));\r\n      }\r\n    }).catch(this._headersCapability.reject);\r\n    this.onProgress = null;\r\n  }\r\n  get headersReady() {\r\n    return this._headersCapability.promise;\r\n  }\r\n  get filename() {\r\n    return this._filename;\r\n  }\r\n  get contentLength() {\r\n    return this._contentLength;\r\n  }\r\n  get isRangeSupported() {\r\n    return this._isRangeSupported;\r\n  }\r\n  get isStreamingSupported() {\r\n    return this._isStreamingSupported;\r\n  }\r\n  async read() {\r\n    await this._headersCapability.promise;\r\n    const {\r\n      value,\r\n      done\r\n    } = await this._reader.read();\r\n    if (done) {\r\n      return {\r\n        value,\r\n        done\r\n      };\r\n    }\r\n    this._loaded += value.byteLength;\r\n    this.onProgress?.({\r\n      loaded: this._loaded,\r\n      total: this._contentLength\r\n    });\r\n    return {\r\n      value: getArrayBuffer(value),\r\n      done: false\r\n    };\r\n  }\r\n  cancel(reason) {\r\n    this._reader?.cancel(reason);\r\n    this._abortController.abort();\r\n  }\r\n}\r\nclass PDFFetchStreamRangeReader {\r\n  constructor(stream, begin, end) {\r\n    this._stream = stream;\r\n    this._reader = null;\r\n    this._loaded = 0;\r\n    const source = stream.source;\r\n    this._withCredentials = source.withCredentials || false;\r\n    this._readCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n    this._isStreamingSupported = !source.disableStream;\r\n    this._abortController = new AbortController();\r\n    this._headers = createHeaders(this._stream.httpHeaders);\r\n    this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\r\n    const url = source.url;\r\n    fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\r\n      if (!(0,_network_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateResponseStatus)(response.status)) {\r\n        throw (0,_network_utils_js__WEBPACK_IMPORTED_MODULE_1__.createResponseStatusError)(response.status, url);\r\n      }\r\n      this._readCapability.resolve();\r\n      this._reader = response.body.getReader();\r\n    }).catch(this._readCapability.reject);\r\n    this.onProgress = null;\r\n  }\r\n  get isStreamingSupported() {\r\n    return this._isStreamingSupported;\r\n  }\r\n  async read() {\r\n    await this._readCapability.promise;\r\n    const {\r\n      value,\r\n      done\r\n    } = await this._reader.read();\r\n    if (done) {\r\n      return {\r\n        value,\r\n        done\r\n      };\r\n    }\r\n    this._loaded += value.byteLength;\r\n    this.onProgress?.({\r\n      loaded: this._loaded\r\n    });\r\n    return {\r\n      value: getArrayBuffer(value),\r\n      done: false\r\n    };\r\n  }\r\n  cancel(reason) {\r\n    this._reader?.cancel(reason);\r\n    this._abortController.abort();\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 742:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_463586__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_463586__.d(__nested_webpack_exports__, {\r\n/* harmony export */   FontFaceObject: () => (/* binding */ FontFaceObject),\r\n/* harmony export */   FontLoader: () => (/* binding */ FontLoader)\r\n/* harmony export */ });\r\n/* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_463586__(266);\r\n\r\nclass FontLoader {\r\n  #systemFonts = new Set();\r\n  constructor({\r\n    ownerDocument = globalThis.document,\r\n    styleElement = null\r\n  }) {\r\n    this._document = ownerDocument;\r\n    this.nativeFontFaces = new Set();\r\n    this.styleElement = null;\r\n    this.loadingRequests = [];\r\n    this.loadTestFontId = 0;\r\n  }\r\n  addNativeFontFace(nativeFontFace) {\r\n    this.nativeFontFaces.add(nativeFontFace);\r\n    this._document.fonts.add(nativeFontFace);\r\n  }\r\n  removeNativeFontFace(nativeFontFace) {\r\n    this.nativeFontFaces.delete(nativeFontFace);\r\n    this._document.fonts.delete(nativeFontFace);\r\n  }\r\n  insertRule(rule) {\r\n    if (!this.styleElement) {\r\n      this.styleElement = this._document.createElement(\"style\");\r\n      this._document.documentElement.getElementsByTagName(\"head\")[0].append(this.styleElement);\r\n    }\r\n    const styleSheet = this.styleElement.sheet;\r\n    styleSheet.insertRule(rule, styleSheet.cssRules.length);\r\n  }\r\n  clear() {\r\n    for (const nativeFontFace of this.nativeFontFaces) {\r\n      this._document.fonts.delete(nativeFontFace);\r\n    }\r\n    this.nativeFontFaces.clear();\r\n    this.#systemFonts.clear();\r\n    if (this.styleElement) {\r\n      this.styleElement.remove();\r\n      this.styleElement = null;\r\n    }\r\n  }\r\n  async loadSystemFont({\r\n    systemFontInfo: info,\r\n    _inspectFont\r\n  }) {\r\n    if (!info || this.#systemFonts.has(info.loadedName)) {\r\n      return;\r\n    }\r\n    (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!this.disableFontFace, \"loadSystemFont shouldn't be called when `disableFontFace` is set.\");\r\n    if (this.isFontLoadingAPISupported) {\r\n      const {\r\n        loadedName,\r\n        src,\r\n        style\r\n      } = info;\r\n      const fontFace = new FontFace(loadedName, src, style);\r\n      this.addNativeFontFace(fontFace);\r\n      try {\r\n        await fontFace.load();\r\n        this.#systemFonts.add(loadedName);\r\n        _inspectFont?.(info);\r\n      } catch {\r\n        (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Cannot load system font: ${info.baseFontName}, installing it could help to improve PDF rendering.`);\r\n        this.removeNativeFontFace(fontFace);\r\n      }\r\n      return;\r\n    }\r\n    (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Not implemented: loadSystemFont without the Font Loading API.\");\r\n  }\r\n  async bind(font) {\r\n    if (font.attached || font.missingFile && !font.systemFontInfo) {\r\n      return;\r\n    }\r\n    font.attached = true;\r\n    if (font.systemFontInfo) {\r\n      await this.loadSystemFont(font);\r\n      return;\r\n    }\r\n    if (this.isFontLoadingAPISupported) {\r\n      const nativeFontFace = font.createNativeFontFace();\r\n      if (nativeFontFace) {\r\n        this.addNativeFontFace(nativeFontFace);\r\n        try {\r\n          await nativeFontFace.loaded;\r\n        } catch (ex) {\r\n          (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\r\n          font.disableFontFace = true;\r\n          throw ex;\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    const rule = font.createFontFaceRule();\r\n    if (rule) {\r\n      this.insertRule(rule);\r\n      if (this.isSyncFontLoadingSupported) {\r\n        return;\r\n      }\r\n      await new Promise(resolve => {\r\n        const request = this._queueLoadingCallback(resolve);\r\n        this._prepareFontLoadEvent(font, request);\r\n      });\r\n    }\r\n  }\r\n  get isFontLoadingAPISupported() {\r\n    const hasFonts = !!this._document?.fonts;\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"isFontLoadingAPISupported\", hasFonts);\r\n  }\r\n  get isSyncFontLoadingSupported() {\r\n    let supported = false;\r\n    if (_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS) {\r\n      supported = true;\r\n    } else if (typeof navigator !== \"undefined\" && typeof navigator?.userAgent === \"string\" && /Mozilla\\/5.0.*?rv:\\d+.*? Gecko/.test(navigator.userAgent)) {\r\n      supported = true;\r\n    }\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"isSyncFontLoadingSupported\", supported);\r\n  }\r\n  _queueLoadingCallback(callback) {\r\n    function completeRequest() {\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!request.done, \"completeRequest() cannot be called twice.\");\r\n      request.done = true;\r\n      while (loadingRequests.length > 0 && loadingRequests[0].done) {\r\n        const otherRequest = loadingRequests.shift();\r\n        setTimeout(otherRequest.callback, 0);\r\n      }\r\n    }\r\n    const {\r\n      loadingRequests\r\n    } = this;\r\n    const request = {\r\n      done: false,\r\n      complete: completeRequest,\r\n      callback\r\n    };\r\n    loadingRequests.push(request);\r\n    return request;\r\n  }\r\n  get _loadTestFont() {\r\n    const testFont = atob(\"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" + \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" + \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" + \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" + \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" + \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" + \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" + \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" + \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" + \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" + \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" + \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" + \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" + \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" + \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" + \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" + \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\");\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(this, \"_loadTestFont\", testFont);\r\n  }\r\n  _prepareFontLoadEvent(font, request) {\r\n    function int32(data, offset) {\r\n      return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;\r\n    }\r\n    function spliceString(s, offset, remove, insert) {\r\n      const chunk1 = s.substring(0, offset);\r\n      const chunk2 = s.substring(offset + remove);\r\n      return chunk1 + insert + chunk2;\r\n    }\r\n    let i, ii;\r\n    const canvas = this._document.createElement(\"canvas\");\r\n    canvas.width = 1;\r\n    canvas.height = 1;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    let called = 0;\r\n    function isFontReady(name, callback) {\r\n      if (++called > 30) {\r\n        (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(\"Load test font never loaded.\");\r\n        callback();\r\n        return;\r\n      }\r\n      ctx.font = \"30px \" + name;\r\n      ctx.fillText(\".\", 0, 20);\r\n      const imageData = ctx.getImageData(0, 0, 1, 1);\r\n      if (imageData.data[3] > 0) {\r\n        callback();\r\n        return;\r\n      }\r\n      setTimeout(isFontReady.bind(null, name, callback));\r\n    }\r\n    const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\r\n    let data = this._loadTestFont;\r\n    const COMMENT_OFFSET = 976;\r\n    data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);\r\n    const CFF_CHECKSUM_OFFSET = 16;\r\n    const XXXX_VALUE = 0x58585858;\r\n    let checksum = int32(data, CFF_CHECKSUM_OFFSET);\r\n    for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\r\n      checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;\r\n    }\r\n    if (i < loadTestFontId.length) {\r\n      checksum = checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i) | 0;\r\n    }\r\n    data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.string32)(checksum));\r\n    const url = `url(data:font/opentype;base64,${btoa(data)});`;\r\n    const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\r\n    this.insertRule(rule);\r\n    const div = this._document.createElement(\"div\");\r\n    div.style.visibility = \"hidden\";\r\n    div.style.width = div.style.height = \"10px\";\r\n    div.style.position = \"absolute\";\r\n    div.style.top = div.style.left = \"0px\";\r\n    for (const name of [font.loadedName, loadTestFontId]) {\r\n      const span = this._document.createElement(\"span\");\r\n      span.textContent = \"Hi\";\r\n      span.style.fontFamily = name;\r\n      div.append(span);\r\n    }\r\n    this._document.body.append(div);\r\n    isFontReady(loadTestFontId, () => {\r\n      div.remove();\r\n      request.complete();\r\n    });\r\n  }\r\n}\r\nclass FontFaceObject {\r\n  constructor(translatedData, {\r\n    isEvalSupported = true,\r\n    disableFontFace = false,\r\n    ignoreErrors = false,\r\n    inspectFont = null\r\n  }) {\r\n    this.compiledGlyphs = Object.create(null);\r\n    for (const i in translatedData) {\r\n      this[i] = translatedData[i];\r\n    }\r\n    this.isEvalSupported = isEvalSupported !== false;\r\n    this.disableFontFace = disableFontFace === true;\r\n    this.ignoreErrors = ignoreErrors === true;\r\n    this._inspectFont = inspectFont;\r\n  }\r\n  createNativeFontFace() {\r\n    if (!this.data || this.disableFontFace) {\r\n      return null;\r\n    }\r\n    let nativeFontFace;\r\n    if (!this.cssFontInfo) {\r\n      nativeFontFace = new FontFace(this.loadedName, this.data, {});\r\n    } else {\r\n      const css = {\r\n        weight: this.cssFontInfo.fontWeight\r\n      };\r\n      if (this.cssFontInfo.italicAngle) {\r\n        css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\r\n      }\r\n      nativeFontFace = new FontFace(this.cssFontInfo.fontFamily, this.data, css);\r\n    }\r\n    this._inspectFont?.(this);\r\n    return nativeFontFace;\r\n  }\r\n  createFontFaceRule() {\r\n    if (!this.data || this.disableFontFace) {\r\n      return null;\r\n    }\r\n    const data = (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.bytesToString)(this.data);\r\n    const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\r\n    let rule;\r\n    if (!this.cssFontInfo) {\r\n      rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\r\n    } else {\r\n      let css = `font-weight: ${this.cssFontInfo.fontWeight};`;\r\n      if (this.cssFontInfo.italicAngle) {\r\n        css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\r\n      }\r\n      rule = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css}src:${url}}`;\r\n    }\r\n    this._inspectFont?.(this, url);\r\n    return rule;\r\n  }\r\n  getPathGenerator(objs, character) {\r\n    if (this.compiledGlyphs[character] !== undefined) {\r\n      return this.compiledGlyphs[character];\r\n    }\r\n    let cmds;\r\n    try {\r\n      cmds = objs.get(this.loadedName + \"_path_\" + character);\r\n    } catch (ex) {\r\n      if (!this.ignoreErrors) {\r\n        throw ex;\r\n      }\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`getPathGenerator - ignoring character: \"${ex}\".`);\r\n      return this.compiledGlyphs[character] = function (c, size) {};\r\n    }\r\n    if (this.isEvalSupported && _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.FeatureTest.isEvalSupported) {\r\n      const jsBuf = [];\r\n      for (const current of cmds) {\r\n        const args = current.args !== undefined ? current.args.join(\",\") : \"\";\r\n        jsBuf.push(\"c.\", current.cmd, \"(\", args, \");\\n\");\r\n      }\r\n      return this.compiledGlyphs[character] = new Function(\"c\", \"size\", jsBuf.join(\"\"));\r\n    }\r\n    return this.compiledGlyphs[character] = function (c, size) {\r\n      for (const current of cmds) {\r\n        if (current.cmd === \"scale\") {\r\n          current.args = [size, -size];\r\n        }\r\n        c[current.cmd].apply(c, current.args);\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 472:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_476137__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_476137__.d(__nested_webpack_exports__, {\r\n/* harmony export */   Metadata: () => (/* binding */ Metadata)\r\n/* harmony export */ });\r\n/* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_476137__(266);\r\n\r\nclass Metadata {\r\n  #metadataMap;\r\n  #data;\r\n  constructor({\r\n    parsedData,\r\n    rawData\r\n  }) {\r\n    this.#metadataMap = parsedData;\r\n    this.#data = rawData;\r\n  }\r\n  getRaw() {\r\n    return this.#data;\r\n  }\r\n  get(name) {\r\n    return this.#metadataMap.get(name) ?? null;\r\n  }\r\n  getAll() {\r\n    return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.objectFromMap)(this.#metadataMap);\r\n  }\r\n  has(name) {\r\n    return this.#metadataMap.has(name);\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 474:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_476979__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_476979__.d(__nested_webpack_exports__, {\r\n/* harmony export */   PDFNetworkStream: () => (/* binding */ PDFNetworkStream)\r\n/* harmony export */ });\r\n/* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_476979__(266);\r\n/* harmony import */ var _network_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_476979__(253);\r\n\r\n\r\n;\r\nconst OK_RESPONSE = 200;\r\nconst PARTIAL_CONTENT_RESPONSE = 206;\r\nfunction getArrayBuffer(xhr) {\r\n  const data = xhr.response;\r\n  if (typeof data !== \"string\") {\r\n    return data;\r\n  }\r\n  return (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.stringToBytes)(data).buffer;\r\n}\r\nclass NetworkManager {\r\n  constructor(url, args = {}) {\r\n    this.url = url;\r\n    this.isHttp = /^https?:/i.test(url);\r\n    this.httpHeaders = this.isHttp && args.httpHeaders || Object.create(null);\r\n    this.withCredentials = args.withCredentials || false;\r\n    this.currXhrId = 0;\r\n    this.pendingRequests = Object.create(null);\r\n  }\r\n  requestRange(begin, end, listeners) {\r\n    const args = {\r\n      begin,\r\n      end\r\n    };\r\n    for (const prop in listeners) {\r\n      args[prop] = listeners[prop];\r\n    }\r\n    return this.request(args);\r\n  }\r\n  requestFull(listeners) {\r\n    return this.request(listeners);\r\n  }\r\n  request(args) {\r\n    const xhr = new XMLHttpRequest();\r\n    const xhrId = this.currXhrId++;\r\n    const pendingRequest = this.pendingRequests[xhrId] = {\r\n      xhr\r\n    };\r\n    xhr.open(\"GET\", this.url);\r\n    xhr.withCredentials = this.withCredentials;\r\n    for (const property in this.httpHeaders) {\r\n      const value = this.httpHeaders[property];\r\n      if (value === undefined) {\r\n        continue;\r\n      }\r\n      xhr.setRequestHeader(property, value);\r\n    }\r\n    if (this.isHttp && \"begin\" in args && \"end\" in args) {\r\n      xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\r\n      pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\r\n    } else {\r\n      pendingRequest.expectedStatus = OK_RESPONSE;\r\n    }\r\n    xhr.responseType = \"arraybuffer\";\r\n    if (args.onError) {\r\n      xhr.onerror = function (evt) {\r\n        args.onError(xhr.status);\r\n      };\r\n    }\r\n    xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\r\n    xhr.onprogress = this.onProgress.bind(this, xhrId);\r\n    pendingRequest.onHeadersReceived = args.onHeadersReceived;\r\n    pendingRequest.onDone = args.onDone;\r\n    pendingRequest.onError = args.onError;\r\n    pendingRequest.onProgress = args.onProgress;\r\n    xhr.send(null);\r\n    return xhrId;\r\n  }\r\n  onProgress(xhrId, evt) {\r\n    const pendingRequest = this.pendingRequests[xhrId];\r\n    if (!pendingRequest) {\r\n      return;\r\n    }\r\n    pendingRequest.onProgress?.(evt);\r\n  }\r\n  onStateChange(xhrId, evt) {\r\n    const pendingRequest = this.pendingRequests[xhrId];\r\n    if (!pendingRequest) {\r\n      return;\r\n    }\r\n    const xhr = pendingRequest.xhr;\r\n    if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\r\n      pendingRequest.onHeadersReceived();\r\n      delete pendingRequest.onHeadersReceived;\r\n    }\r\n    if (xhr.readyState !== 4) {\r\n      return;\r\n    }\r\n    if (!(xhrId in this.pendingRequests)) {\r\n      return;\r\n    }\r\n    delete this.pendingRequests[xhrId];\r\n    if (xhr.status === 0 && this.isHttp) {\r\n      pendingRequest.onError?.(xhr.status);\r\n      return;\r\n    }\r\n    const xhrStatus = xhr.status || OK_RESPONSE;\r\n    const ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\r\n    if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {\r\n      pendingRequest.onError?.(xhr.status);\r\n      return;\r\n    }\r\n    const chunk = getArrayBuffer(xhr);\r\n    if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\r\n      const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\r\n      const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\r\n      pendingRequest.onDone({\r\n        begin: parseInt(matches[1], 10),\r\n        chunk\r\n      });\r\n    } else if (chunk) {\r\n      pendingRequest.onDone({\r\n        begin: 0,\r\n        chunk\r\n      });\r\n    } else {\r\n      pendingRequest.onError?.(xhr.status);\r\n    }\r\n  }\r\n  getRequestXhr(xhrId) {\r\n    return this.pendingRequests[xhrId].xhr;\r\n  }\r\n  isPendingRequest(xhrId) {\r\n    return xhrId in this.pendingRequests;\r\n  }\r\n  abortRequest(xhrId) {\r\n    const xhr = this.pendingRequests[xhrId].xhr;\r\n    delete this.pendingRequests[xhrId];\r\n    xhr.abort();\r\n  }\r\n}\r\nclass PDFNetworkStream {\r\n  constructor(source) {\r\n    this._source = source;\r\n    this._manager = new NetworkManager(source.url, {\r\n      httpHeaders: source.httpHeaders,\r\n      withCredentials: source.withCredentials\r\n    });\r\n    this._rangeChunkSize = source.rangeChunkSize;\r\n    this._fullRequestReader = null;\r\n    this._rangeRequestReaders = [];\r\n  }\r\n  _onRangeRequestReaderClosed(reader) {\r\n    const i = this._rangeRequestReaders.indexOf(reader);\r\n    if (i >= 0) {\r\n      this._rangeRequestReaders.splice(i, 1);\r\n    }\r\n  }\r\n  getFullReader() {\r\n    (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!this._fullRequestReader, \"PDFNetworkStream.getFullReader can only be called once.\");\r\n    this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);\r\n    return this._fullRequestReader;\r\n  }\r\n  getRangeReader(begin, end) {\r\n    const reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);\r\n    reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\r\n    this._rangeRequestReaders.push(reader);\r\n    return reader;\r\n  }\r\n  cancelAllRequests(reason) {\r\n    this._fullRequestReader?.cancel(reason);\r\n    for (const reader of this._rangeRequestReaders.slice(0)) {\r\n      reader.cancel(reason);\r\n    }\r\n  }\r\n}\r\nclass PDFNetworkStreamFullRequestReader {\r\n  constructor(manager, source) {\r\n    this._manager = manager;\r\n    const args = {\r\n      onHeadersReceived: this._onHeadersReceived.bind(this),\r\n      onDone: this._onDone.bind(this),\r\n      onError: this._onError.bind(this),\r\n      onProgress: this._onProgress.bind(this)\r\n    };\r\n    this._url = source.url;\r\n    this._fullRequestId = manager.requestFull(args);\r\n    this._headersReceivedCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n    this._disableRange = source.disableRange || false;\r\n    this._contentLength = source.length;\r\n    this._rangeChunkSize = source.rangeChunkSize;\r\n    if (!this._rangeChunkSize && !this._disableRange) {\r\n      this._disableRange = true;\r\n    }\r\n    this._isStreamingSupported = false;\r\n    this._isRangeSupported = false;\r\n    this._cachedChunks = [];\r\n    this._requests = [];\r\n    this._done = false;\r\n    this._storedError = undefined;\r\n    this._filename = null;\r\n    this.onProgress = null;\r\n  }\r\n  _onHeadersReceived() {\r\n    const fullRequestXhrId = this._fullRequestId;\r\n    const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\r\n    const getResponseHeader = name => {\r\n      return fullRequestXhr.getResponseHeader(name);\r\n    };\r\n    const {\r\n      allowRangeRequests,\r\n      suggestedLength\r\n    } = (0,_network_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateRangeRequestCapabilities)({\r\n      getResponseHeader,\r\n      isHttp: this._manager.isHttp,\r\n      rangeChunkSize: this._rangeChunkSize,\r\n      disableRange: this._disableRange\r\n    });\r\n    if (allowRangeRequests) {\r\n      this._isRangeSupported = true;\r\n    }\r\n    this._contentLength = suggestedLength || this._contentLength;\r\n    this._filename = (0,_network_utils_js__WEBPACK_IMPORTED_MODULE_1__.extractFilenameFromHeader)(getResponseHeader);\r\n    if (this._isRangeSupported) {\r\n      this._manager.abortRequest(fullRequestXhrId);\r\n    }\r\n    this._headersReceivedCapability.resolve();\r\n  }\r\n  _onDone(data) {\r\n    if (data) {\r\n      if (this._requests.length > 0) {\r\n        const requestCapability = this._requests.shift();\r\n        requestCapability.resolve({\r\n          value: data.chunk,\r\n          done: false\r\n        });\r\n      } else {\r\n        this._cachedChunks.push(data.chunk);\r\n      }\r\n    }\r\n    this._done = true;\r\n    if (this._cachedChunks.length > 0) {\r\n      return;\r\n    }\r\n    for (const requestCapability of this._requests) {\r\n      requestCapability.resolve({\r\n        value: undefined,\r\n        done: true\r\n      });\r\n    }\r\n    this._requests.length = 0;\r\n  }\r\n  _onError(status) {\r\n    this._storedError = (0,_network_utils_js__WEBPACK_IMPORTED_MODULE_1__.createResponseStatusError)(status, this._url);\r\n    this._headersReceivedCapability.reject(this._storedError);\r\n    for (const requestCapability of this._requests) {\r\n      requestCapability.reject(this._storedError);\r\n    }\r\n    this._requests.length = 0;\r\n    this._cachedChunks.length = 0;\r\n  }\r\n  _onProgress(evt) {\r\n    this.onProgress?.({\r\n      loaded: evt.loaded,\r\n      total: evt.lengthComputable ? evt.total : this._contentLength\r\n    });\r\n  }\r\n  get filename() {\r\n    return this._filename;\r\n  }\r\n  get isRangeSupported() {\r\n    return this._isRangeSupported;\r\n  }\r\n  get isStreamingSupported() {\r\n    return this._isStreamingSupported;\r\n  }\r\n  get contentLength() {\r\n    return this._contentLength;\r\n  }\r\n  get headersReady() {\r\n    return this._headersReceivedCapability.promise;\r\n  }\r\n  async read() {\r\n    if (this._storedError) {\r\n      throw this._storedError;\r\n    }\r\n    if (this._cachedChunks.length > 0) {\r\n      const chunk = this._cachedChunks.shift();\r\n      return {\r\n        value: chunk,\r\n        done: false\r\n      };\r\n    }\r\n    if (this._done) {\r\n      return {\r\n        value: undefined,\r\n        done: true\r\n      };\r\n    }\r\n    const requestCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n    this._requests.push(requestCapability);\r\n    return requestCapability.promise;\r\n  }\r\n  cancel(reason) {\r\n    this._done = true;\r\n    this._headersReceivedCapability.reject(reason);\r\n    for (const requestCapability of this._requests) {\r\n      requestCapability.resolve({\r\n        value: undefined,\r\n        done: true\r\n      });\r\n    }\r\n    this._requests.length = 0;\r\n    if (this._manager.isPendingRequest(this._fullRequestId)) {\r\n      this._manager.abortRequest(this._fullRequestId);\r\n    }\r\n    this._fullRequestReader = null;\r\n  }\r\n}\r\nclass PDFNetworkStreamRangeRequestReader {\r\n  constructor(manager, begin, end) {\r\n    this._manager = manager;\r\n    const args = {\r\n      onDone: this._onDone.bind(this),\r\n      onError: this._onError.bind(this),\r\n      onProgress: this._onProgress.bind(this)\r\n    };\r\n    this._url = manager.url;\r\n    this._requestId = manager.requestRange(begin, end, args);\r\n    this._requests = [];\r\n    this._queuedChunk = null;\r\n    this._done = false;\r\n    this._storedError = undefined;\r\n    this.onProgress = null;\r\n    this.onClosed = null;\r\n  }\r\n  _close() {\r\n    this.onClosed?.(this);\r\n  }\r\n  _onDone(data) {\r\n    const chunk = data.chunk;\r\n    if (this._requests.length > 0) {\r\n      const requestCapability = this._requests.shift();\r\n      requestCapability.resolve({\r\n        value: chunk,\r\n        done: false\r\n      });\r\n    } else {\r\n      this._queuedChunk = chunk;\r\n    }\r\n    this._done = true;\r\n    for (const requestCapability of this._requests) {\r\n      requestCapability.resolve({\r\n        value: undefined,\r\n        done: true\r\n      });\r\n    }\r\n    this._requests.length = 0;\r\n    this._close();\r\n  }\r\n  _onError(status) {\r\n    this._storedError = (0,_network_utils_js__WEBPACK_IMPORTED_MODULE_1__.createResponseStatusError)(status, this._url);\r\n    for (const requestCapability of this._requests) {\r\n      requestCapability.reject(this._storedError);\r\n    }\r\n    this._requests.length = 0;\r\n    this._queuedChunk = null;\r\n  }\r\n  _onProgress(evt) {\r\n    if (!this.isStreamingSupported) {\r\n      this.onProgress?.({\r\n        loaded: evt.loaded\r\n      });\r\n    }\r\n  }\r\n  get isStreamingSupported() {\r\n    return false;\r\n  }\r\n  async read() {\r\n    if (this._storedError) {\r\n      throw this._storedError;\r\n    }\r\n    if (this._queuedChunk !== null) {\r\n      const chunk = this._queuedChunk;\r\n      this._queuedChunk = null;\r\n      return {\r\n        value: chunk,\r\n        done: false\r\n      };\r\n    }\r\n    if (this._done) {\r\n      return {\r\n        value: undefined,\r\n        done: true\r\n      };\r\n    }\r\n    const requestCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n    this._requests.push(requestCapability);\r\n    return requestCapability.promise;\r\n  }\r\n  cancel(reason) {\r\n    this._done = true;\r\n    for (const requestCapability of this._requests) {\r\n      requestCapability.resolve({\r\n        value: undefined,\r\n        done: true\r\n      });\r\n    }\r\n    this._requests.length = 0;\r\n    if (this._manager.isPendingRequest(this._requestId)) {\r\n      this._manager.abortRequest(this._requestId);\r\n    }\r\n    this._close();\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 253:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_489937__) => {\r\n\r\n\r\n// EXPORTS\r\n__nested_webpack_require_489937__.d(__nested_webpack_exports__, {\r\n  createResponseStatusError: () => (/* binding */ createResponseStatusError),\r\n  extractFilenameFromHeader: () => (/* binding */ extractFilenameFromHeader),\r\n  validateRangeRequestCapabilities: () => (/* binding */ validateRangeRequestCapabilities),\r\n  validateResponseStatus: () => (/* binding */ validateResponseStatus)\r\n});\r\n\r\n// EXTERNAL MODULE: ./src/shared/util.js\r\nvar util = __nested_webpack_require_489937__(266);\r\n;// CONCATENATED MODULE: ./src/display/content_disposition.js\r\n\r\nfunction getFilenameFromContentDispositionHeader(contentDisposition) {\r\n  let needsEncodingFixup = true;\r\n  let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\r\n  if (tmp) {\r\n    tmp = tmp[1];\r\n    let filename = rfc2616unquote(tmp);\r\n    filename = unescape(filename);\r\n    filename = rfc5987decode(filename);\r\n    filename = rfc2047decode(filename);\r\n    return fixupEncoding(filename);\r\n  }\r\n  tmp = rfc2231getparam(contentDisposition);\r\n  if (tmp) {\r\n    const filename = rfc2047decode(tmp);\r\n    return fixupEncoding(filename);\r\n  }\r\n  tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\r\n  if (tmp) {\r\n    tmp = tmp[1];\r\n    let filename = rfc2616unquote(tmp);\r\n    filename = rfc2047decode(filename);\r\n    return fixupEncoding(filename);\r\n  }\r\n  function toParamRegExp(attributePattern, flags) {\r\n    return new RegExp(\"(?:^|;)\\\\s*\" + attributePattern + \"\\\\s*=\\\\s*\" + \"(\" + '[^\";\\\\s][^;\\\\s]*' + \"|\" + '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' + \")\", flags);\r\n  }\r\n  function textdecode(encoding, value) {\r\n    if (encoding) {\r\n      if (!/^[\\x00-\\xFF]+$/.test(value)) {\r\n        return value;\r\n      }\r\n      try {\r\n        const decoder = new TextDecoder(encoding, {\r\n          fatal: true\r\n        });\r\n        const buffer = (0,util.stringToBytes)(value);\r\n        value = decoder.decode(buffer);\r\n        needsEncodingFixup = false;\r\n      } catch {}\r\n    }\r\n    return value;\r\n  }\r\n  function fixupEncoding(value) {\r\n    if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\r\n      value = textdecode(\"utf-8\", value);\r\n      if (needsEncodingFixup) {\r\n        value = textdecode(\"iso-8859-1\", value);\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n  function rfc2231getparam(contentDispositionStr) {\r\n    const matches = [];\r\n    let match;\r\n    const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\r\n    while ((match = iter.exec(contentDispositionStr)) !== null) {\r\n      let [, n, quot, part] = match;\r\n      n = parseInt(n, 10);\r\n      if (n in matches) {\r\n        if (n === 0) {\r\n          break;\r\n        }\r\n        continue;\r\n      }\r\n      matches[n] = [quot, part];\r\n    }\r\n    const parts = [];\r\n    for (let n = 0; n < matches.length; ++n) {\r\n      if (!(n in matches)) {\r\n        break;\r\n      }\r\n      let [quot, part] = matches[n];\r\n      part = rfc2616unquote(part);\r\n      if (quot) {\r\n        part = unescape(part);\r\n        if (n === 0) {\r\n          part = rfc5987decode(part);\r\n        }\r\n      }\r\n      parts.push(part);\r\n    }\r\n    return parts.join(\"\");\r\n  }\r\n  function rfc2616unquote(value) {\r\n    if (value.startsWith('\"')) {\r\n      const parts = value.slice(1).split('\\\\\"');\r\n      for (let i = 0; i < parts.length; ++i) {\r\n        const quotindex = parts[i].indexOf('\"');\r\n        if (quotindex !== -1) {\r\n          parts[i] = parts[i].slice(0, quotindex);\r\n          parts.length = i + 1;\r\n        }\r\n        parts[i] = parts[i].replaceAll(/\\\\(.)/g, \"$1\");\r\n      }\r\n      value = parts.join('\"');\r\n    }\r\n    return value;\r\n  }\r\n  function rfc5987decode(extvalue) {\r\n    const encodingend = extvalue.indexOf(\"'\");\r\n    if (encodingend === -1) {\r\n      return extvalue;\r\n    }\r\n    const encoding = extvalue.slice(0, encodingend);\r\n    const langvalue = extvalue.slice(encodingend + 1);\r\n    const value = langvalue.replace(/^[^']*'/, \"\");\r\n    return textdecode(encoding, value);\r\n  }\r\n  function rfc2047decode(value) {\r\n    if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\r\n      return value;\r\n    }\r\n    return value.replaceAll(/=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g, function (matches, charset, encoding, text) {\r\n      if (encoding === \"q\" || encoding === \"Q\") {\r\n        text = text.replaceAll(\"_\", \" \");\r\n        text = text.replaceAll(/=([0-9a-fA-F]{2})/g, function (match, hex) {\r\n          return String.fromCharCode(parseInt(hex, 16));\r\n        });\r\n        return textdecode(charset, text);\r\n      }\r\n      try {\r\n        text = atob(text);\r\n      } catch {}\r\n      return textdecode(charset, text);\r\n    });\r\n  }\r\n  return \"\";\r\n}\r\n\r\n// EXTERNAL MODULE: ./src/display/display_utils.js\r\nvar display_utils = __nested_webpack_require_489937__(473);\r\n;// CONCATENATED MODULE: ./src/display/network_utils.js\r\n\r\n\r\n\r\nfunction validateRangeRequestCapabilities({\r\n  getResponseHeader,\r\n  isHttp,\r\n  rangeChunkSize,\r\n  disableRange\r\n}) {\r\n  const returnValues = {\r\n    allowRangeRequests: false,\r\n    suggestedLength: undefined\r\n  };\r\n  const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\r\n  if (!Number.isInteger(length)) {\r\n    return returnValues;\r\n  }\r\n  returnValues.suggestedLength = length;\r\n  if (length <= 2 * rangeChunkSize) {\r\n    return returnValues;\r\n  }\r\n  if (disableRange || !isHttp) {\r\n    return returnValues;\r\n  }\r\n  if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\r\n    return returnValues;\r\n  }\r\n  const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\r\n  if (contentEncoding !== \"identity\") {\r\n    return returnValues;\r\n  }\r\n  returnValues.allowRangeRequests = true;\r\n  return returnValues;\r\n}\r\nfunction extractFilenameFromHeader(getResponseHeader) {\r\n  const contentDisposition = getResponseHeader(\"Content-Disposition\");\r\n  if (contentDisposition) {\r\n    let filename = getFilenameFromContentDispositionHeader(contentDisposition);\r\n    if (filename.includes(\"%\")) {\r\n      try {\r\n        filename = decodeURIComponent(filename);\r\n      } catch {}\r\n    }\r\n    if ((0,display_utils.isPdfFile)(filename)) {\r\n      return filename;\r\n    }\r\n  }\r\n  return null;\r\n}\r\nfunction createResponseStatusError(status, url) {\r\n  if (status === 404 || status === 0 && url.startsWith(\"file:\")) {\r\n    return new util.MissingPDFException('Missing PDF \"' + url + '\".');\r\n  }\r\n  return new util.UnexpectedResponseException(`Unexpected server response (${status}) while retrieving PDF \"${url}\".`, status);\r\n}\r\nfunction validateResponseStatus(status) {\r\n  return status === 200 || status === 206;\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 498:\r\n/***/ ((__webpack_module__, __nested_webpack_exports__, __nested_webpack_require_496504__) => {\r\n\r\n__nested_webpack_require_496504__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\r\n/* harmony export */ __nested_webpack_require_496504__.d(__nested_webpack_exports__, {\r\n/* harmony export */   PDFNodeStream: () => (/* binding */ PDFNodeStream)\r\n/* harmony export */ });\r\n/* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_496504__(266);\r\n/* harmony import */ var _network_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_496504__(253);\r\n\r\n\r\n;\r\nlet fs, http, https, url;\r\nif (_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS) {\r\n  fs = await import(/* webpackIgnore: true */ \"fs\");\r\n  http = await import(/* webpackIgnore: true */ \"http\");\r\n  https = await import(/* webpackIgnore: true */ \"https\");\r\n  url = await import(/* webpackIgnore: true */ \"url\");\r\n}\r\nconst fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\r\nfunction parseUrl(sourceUrl) {\r\n  const parsedUrl = url.parse(sourceUrl);\r\n  if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\r\n    return parsedUrl;\r\n  }\r\n  if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\r\n    return url.parse(`file:///${sourceUrl}`);\r\n  }\r\n  if (!parsedUrl.host) {\r\n    parsedUrl.protocol = \"file:\";\r\n  }\r\n  return parsedUrl;\r\n}\r\nclass PDFNodeStream {\r\n  constructor(source) {\r\n    this.source = source;\r\n    this.url = parseUrl(source.url);\r\n    this.isHttp = this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\r\n    this.isFsUrl = this.url.protocol === \"file:\";\r\n    this.httpHeaders = this.isHttp && source.httpHeaders || {};\r\n    this._fullRequestReader = null;\r\n    this._rangeRequestReaders = [];\r\n  }\r\n  get _progressiveDataLength() {\r\n    return this._fullRequestReader?._loaded ?? 0;\r\n  }\r\n  getFullReader() {\r\n    (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!this._fullRequestReader, \"PDFNodeStream.getFullReader can only be called once.\");\r\n    this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);\r\n    return this._fullRequestReader;\r\n  }\r\n  getRangeReader(start, end) {\r\n    if (end <= this._progressiveDataLength) {\r\n      return null;\r\n    }\r\n    const rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);\r\n    this._rangeRequestReaders.push(rangeReader);\r\n    return rangeReader;\r\n  }\r\n  cancelAllRequests(reason) {\r\n    this._fullRequestReader?.cancel(reason);\r\n    for (const reader of this._rangeRequestReaders.slice(0)) {\r\n      reader.cancel(reason);\r\n    }\r\n  }\r\n}\r\nclass BaseFullReader {\r\n  constructor(stream) {\r\n    this._url = stream.url;\r\n    this._done = false;\r\n    this._storedError = null;\r\n    this.onProgress = null;\r\n    const source = stream.source;\r\n    this._contentLength = source.length;\r\n    this._loaded = 0;\r\n    this._filename = null;\r\n    this._disableRange = source.disableRange || false;\r\n    this._rangeChunkSize = source.rangeChunkSize;\r\n    if (!this._rangeChunkSize && !this._disableRange) {\r\n      this._disableRange = true;\r\n    }\r\n    this._isStreamingSupported = !source.disableStream;\r\n    this._isRangeSupported = !source.disableRange;\r\n    this._readableStream = null;\r\n    this._readCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n    this._headersCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n  }\r\n  get headersReady() {\r\n    return this._headersCapability.promise;\r\n  }\r\n  get filename() {\r\n    return this._filename;\r\n  }\r\n  get contentLength() {\r\n    return this._contentLength;\r\n  }\r\n  get isRangeSupported() {\r\n    return this._isRangeSupported;\r\n  }\r\n  get isStreamingSupported() {\r\n    return this._isStreamingSupported;\r\n  }\r\n  async read() {\r\n    await this._readCapability.promise;\r\n    if (this._done) {\r\n      return {\r\n        value: undefined,\r\n        done: true\r\n      };\r\n    }\r\n    if (this._storedError) {\r\n      throw this._storedError;\r\n    }\r\n    const chunk = this._readableStream.read();\r\n    if (chunk === null) {\r\n      this._readCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n      return this.read();\r\n    }\r\n    this._loaded += chunk.length;\r\n    this.onProgress?.({\r\n      loaded: this._loaded,\r\n      total: this._contentLength\r\n    });\r\n    const buffer = new Uint8Array(chunk).buffer;\r\n    return {\r\n      value: buffer,\r\n      done: false\r\n    };\r\n  }\r\n  cancel(reason) {\r\n    if (!this._readableStream) {\r\n      this._error(reason);\r\n      return;\r\n    }\r\n    this._readableStream.destroy(reason);\r\n  }\r\n  _error(reason) {\r\n    this._storedError = reason;\r\n    this._readCapability.resolve();\r\n  }\r\n  _setReadableStream(readableStream) {\r\n    this._readableStream = readableStream;\r\n    readableStream.on(\"readable\", () => {\r\n      this._readCapability.resolve();\r\n    });\r\n    readableStream.on(\"end\", () => {\r\n      readableStream.destroy();\r\n      this._done = true;\r\n      this._readCapability.resolve();\r\n    });\r\n    readableStream.on(\"error\", reason => {\r\n      this._error(reason);\r\n    });\r\n    if (!this._isStreamingSupported && this._isRangeSupported) {\r\n      this._error(new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(\"streaming is disabled\"));\r\n    }\r\n    if (this._storedError) {\r\n      this._readableStream.destroy(this._storedError);\r\n    }\r\n  }\r\n}\r\nclass BaseRangeReader {\r\n  constructor(stream) {\r\n    this._url = stream.url;\r\n    this._done = false;\r\n    this._storedError = null;\r\n    this.onProgress = null;\r\n    this._loaded = 0;\r\n    this._readableStream = null;\r\n    this._readCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n    const source = stream.source;\r\n    this._isStreamingSupported = !source.disableStream;\r\n  }\r\n  get isStreamingSupported() {\r\n    return this._isStreamingSupported;\r\n  }\r\n  async read() {\r\n    await this._readCapability.promise;\r\n    if (this._done) {\r\n      return {\r\n        value: undefined,\r\n        done: true\r\n      };\r\n    }\r\n    if (this._storedError) {\r\n      throw this._storedError;\r\n    }\r\n    const chunk = this._readableStream.read();\r\n    if (chunk === null) {\r\n      this._readCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n      return this.read();\r\n    }\r\n    this._loaded += chunk.length;\r\n    this.onProgress?.({\r\n      loaded: this._loaded\r\n    });\r\n    const buffer = new Uint8Array(chunk).buffer;\r\n    return {\r\n      value: buffer,\r\n      done: false\r\n    };\r\n  }\r\n  cancel(reason) {\r\n    if (!this._readableStream) {\r\n      this._error(reason);\r\n      return;\r\n    }\r\n    this._readableStream.destroy(reason);\r\n  }\r\n  _error(reason) {\r\n    this._storedError = reason;\r\n    this._readCapability.resolve();\r\n  }\r\n  _setReadableStream(readableStream) {\r\n    this._readableStream = readableStream;\r\n    readableStream.on(\"readable\", () => {\r\n      this._readCapability.resolve();\r\n    });\r\n    readableStream.on(\"end\", () => {\r\n      readableStream.destroy();\r\n      this._done = true;\r\n      this._readCapability.resolve();\r\n    });\r\n    readableStream.on(\"error\", reason => {\r\n      this._error(reason);\r\n    });\r\n    if (this._storedError) {\r\n      this._readableStream.destroy(this._storedError);\r\n    }\r\n  }\r\n}\r\nfunction createRequestOptions(parsedUrl, headers) {\r\n  return {\r\n    protocol: parsedUrl.protocol,\r\n    auth: parsedUrl.auth,\r\n    host: parsedUrl.hostname,\r\n    port: parsedUrl.port,\r\n    path: parsedUrl.path,\r\n    method: \"GET\",\r\n    headers\r\n  };\r\n}\r\nclass PDFNodeStreamFullReader extends BaseFullReader {\r\n  constructor(stream) {\r\n    super(stream);\r\n    const handleResponse = response => {\r\n      if (response.statusCode === 404) {\r\n        const error = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException(`Missing PDF \"${this._url}\".`);\r\n        this._storedError = error;\r\n        this._headersCapability.reject(error);\r\n        return;\r\n      }\r\n      this._headersCapability.resolve();\r\n      this._setReadableStream(response);\r\n      const getResponseHeader = name => {\r\n        return this._readableStream.headers[name.toLowerCase()];\r\n      };\r\n      const {\r\n        allowRangeRequests,\r\n        suggestedLength\r\n      } = (0,_network_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateRangeRequestCapabilities)({\r\n        getResponseHeader,\r\n        isHttp: stream.isHttp,\r\n        rangeChunkSize: this._rangeChunkSize,\r\n        disableRange: this._disableRange\r\n      });\r\n      this._isRangeSupported = allowRangeRequests;\r\n      this._contentLength = suggestedLength || this._contentLength;\r\n      this._filename = (0,_network_utils_js__WEBPACK_IMPORTED_MODULE_1__.extractFilenameFromHeader)(getResponseHeader);\r\n    };\r\n    this._request = null;\r\n    if (this._url.protocol === \"http:\") {\r\n      this._request = http.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\r\n    } else {\r\n      this._request = https.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\r\n    }\r\n    this._request.on(\"error\", reason => {\r\n      this._storedError = reason;\r\n      this._headersCapability.reject(reason);\r\n    });\r\n    this._request.end();\r\n  }\r\n}\r\nclass PDFNodeStreamRangeReader extends BaseRangeReader {\r\n  constructor(stream, start, end) {\r\n    super(stream);\r\n    this._httpHeaders = {};\r\n    for (const property in stream.httpHeaders) {\r\n      const value = stream.httpHeaders[property];\r\n      if (value === undefined) {\r\n        continue;\r\n      }\r\n      this._httpHeaders[property] = value;\r\n    }\r\n    this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\r\n    const handleResponse = response => {\r\n      if (response.statusCode === 404) {\r\n        const error = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException(`Missing PDF \"${this._url}\".`);\r\n        this._storedError = error;\r\n        return;\r\n      }\r\n      this._setReadableStream(response);\r\n    };\r\n    this._request = null;\r\n    if (this._url.protocol === \"http:\") {\r\n      this._request = http.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\r\n    } else {\r\n      this._request = https.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\r\n    }\r\n    this._request.on(\"error\", reason => {\r\n      this._storedError = reason;\r\n    });\r\n    this._request.end();\r\n  }\r\n}\r\nclass PDFNodeStreamFsFullReader extends BaseFullReader {\r\n  constructor(stream) {\r\n    super(stream);\r\n    let path = decodeURIComponent(this._url.path);\r\n    if (fileUriRegex.test(this._url.href)) {\r\n      path = path.replace(/^\\//, \"\");\r\n    }\r\n    fs.lstat(path, (error, stat) => {\r\n      if (error) {\r\n        if (error.code === \"ENOENT\") {\r\n          error = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException(`Missing PDF \"${path}\".`);\r\n        }\r\n        this._storedError = error;\r\n        this._headersCapability.reject(error);\r\n        return;\r\n      }\r\n      this._contentLength = stat.size;\r\n      this._setReadableStream(fs.createReadStream(path));\r\n      this._headersCapability.resolve();\r\n    });\r\n  }\r\n}\r\nclass PDFNodeStreamFsRangeReader extends BaseRangeReader {\r\n  constructor(stream, start, end) {\r\n    super(stream);\r\n    let path = decodeURIComponent(this._url.path);\r\n    if (fileUriRegex.test(this._url.href)) {\r\n      path = path.replace(/^\\//, \"\");\r\n    }\r\n    this._setReadableStream(fs.createReadStream(path, {\r\n      start,\r\n      end: end - 1\r\n    }));\r\n  }\r\n}\r\n\r\n__webpack_async_result__();\r\n} catch(e) { __webpack_async_result__(e); } }, 1);\r\n\r\n/***/ }),\r\n\r\n/***/ 738:\r\n/***/ ((__webpack_module__, __nested_webpack_exports__, __nested_webpack_require_508120__) => {\r\n\r\n__nested_webpack_require_508120__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\r\n/* harmony export */ __nested_webpack_require_508120__.d(__nested_webpack_exports__, {\r\n/* harmony export */   NodeCMapReaderFactory: () => (/* binding */ NodeCMapReaderFactory),\r\n/* harmony export */   NodeCanvasFactory: () => (/* binding */ NodeCanvasFactory),\r\n/* harmony export */   NodeFilterFactory: () => (/* binding */ NodeFilterFactory),\r\n/* harmony export */   NodeStandardFontDataFactory: () => (/* binding */ NodeStandardFontDataFactory)\r\n/* harmony export */ });\r\n/* harmony import */ var _base_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_508120__(822);\r\n/* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_508120__(266);\r\n\r\n\r\n;\r\nlet fs, canvas, path2d_polyfill;\r\nif (_shared_util_js__WEBPACK_IMPORTED_MODULE_1__.isNodeJS) {\r\n  fs = await import(/* webpackIgnore: true */ \"fs\");\r\n  try {\r\n    canvas = await import(/* webpackIgnore: true */ \"canvas\");\r\n  } catch {}\r\n  try {\r\n    path2d_polyfill = await import(/* webpackIgnore: true */ \"path2d-polyfill\");\r\n  } catch {}\r\n}\r\n;\r\nconst fetchData = function (url) {\r\n  return new Promise((resolve, reject) => {\r\n    fs.readFile(url, (error, data) => {\r\n      if (error || !data) {\r\n        reject(new Error(error));\r\n        return;\r\n      }\r\n      resolve(new Uint8Array(data));\r\n    });\r\n  });\r\n};\r\nclass NodeFilterFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseFilterFactory {}\r\nclass NodeCanvasFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseCanvasFactory {\r\n  _createCanvas(width, height) {\r\n    return canvas.createCanvas(width, height);\r\n  }\r\n}\r\nclass NodeCMapReaderFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseCMapReaderFactory {\r\n  _fetchData(url, compressionType) {\r\n    return fetchData(url).then(data => {\r\n      return {\r\n        cMapData: data,\r\n        compressionType\r\n      };\r\n    });\r\n  }\r\n}\r\nclass NodeStandardFontDataFactory extends _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseStandardFontDataFactory {\r\n  _fetchData(url) {\r\n    return fetchData(url);\r\n  }\r\n}\r\n\r\n__webpack_async_result__();\r\n} catch(e) { __webpack_async_result__(e); } }, 1);\r\n\r\n/***/ }),\r\n\r\n/***/ 890:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_510476__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_510476__.d(__nested_webpack_exports__, {\r\n/* harmony export */   OptionalContentConfig: () => (/* binding */ OptionalContentConfig)\r\n/* harmony export */ });\r\n/* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_510476__(266);\r\n/* harmony import */ var _shared_murmurhash3_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_510476__(825);\r\n\r\n\r\nconst INTERNAL = Symbol(\"INTERNAL\");\r\nclass OptionalContentGroup {\r\n  #visible = true;\r\n  constructor(name, intent) {\r\n    this.name = name;\r\n    this.intent = intent;\r\n  }\r\n  get visible() {\r\n    return this.#visible;\r\n  }\r\n  _setVisible(internal, visible) {\r\n    if (internal !== INTERNAL) {\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Internal method `_setVisible` called.\");\r\n    }\r\n    this.#visible = visible;\r\n  }\r\n}\r\nclass OptionalContentConfig {\r\n  #cachedGetHash = null;\r\n  #groups = new Map();\r\n  #initialHash = null;\r\n  #order = null;\r\n  constructor(data) {\r\n    this.name = null;\r\n    this.creator = null;\r\n    if (data === null) {\r\n      return;\r\n    }\r\n    this.name = data.name;\r\n    this.creator = data.creator;\r\n    this.#order = data.order;\r\n    for (const group of data.groups) {\r\n      this.#groups.set(group.id, new OptionalContentGroup(group.name, group.intent));\r\n    }\r\n    if (data.baseState === \"OFF\") {\r\n      for (const group of this.#groups.values()) {\r\n        group._setVisible(INTERNAL, false);\r\n      }\r\n    }\r\n    for (const on of data.on) {\r\n      this.#groups.get(on)._setVisible(INTERNAL, true);\r\n    }\r\n    for (const off of data.off) {\r\n      this.#groups.get(off)._setVisible(INTERNAL, false);\r\n    }\r\n    this.#initialHash = this.getHash();\r\n  }\r\n  #evaluateVisibilityExpression(array) {\r\n    const length = array.length;\r\n    if (length < 2) {\r\n      return true;\r\n    }\r\n    const operator = array[0];\r\n    for (let i = 1; i < length; i++) {\r\n      const element = array[i];\r\n      let state;\r\n      if (Array.isArray(element)) {\r\n        state = this.#evaluateVisibilityExpression(element);\r\n      } else if (this.#groups.has(element)) {\r\n        state = this.#groups.get(element).visible;\r\n      } else {\r\n        (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Optional content group not found: ${element}`);\r\n        return true;\r\n      }\r\n      switch (operator) {\r\n        case \"And\":\r\n          if (!state) {\r\n            return false;\r\n          }\r\n          break;\r\n        case \"Or\":\r\n          if (state) {\r\n            return true;\r\n          }\r\n          break;\r\n        case \"Not\":\r\n          return !state;\r\n        default:\r\n          return true;\r\n      }\r\n    }\r\n    return operator === \"And\";\r\n  }\r\n  isVisible(group) {\r\n    if (this.#groups.size === 0) {\r\n      return true;\r\n    }\r\n    if (!group) {\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(\"Optional content group not defined.\");\r\n      return true;\r\n    }\r\n    if (group.type === \"OCG\") {\r\n      if (!this.#groups.has(group.id)) {\r\n        (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Optional content group not found: ${group.id}`);\r\n        return true;\r\n      }\r\n      return this.#groups.get(group.id).visible;\r\n    } else if (group.type === \"OCMD\") {\r\n      if (group.expression) {\r\n        return this.#evaluateVisibilityExpression(group.expression);\r\n      }\r\n      if (!group.policy || group.policy === \"AnyOn\") {\r\n        for (const id of group.ids) {\r\n          if (!this.#groups.has(id)) {\r\n            (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Optional content group not found: ${id}`);\r\n            return true;\r\n          }\r\n          if (this.#groups.get(id).visible) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      } else if (group.policy === \"AllOn\") {\r\n        for (const id of group.ids) {\r\n          if (!this.#groups.has(id)) {\r\n            (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Optional content group not found: ${id}`);\r\n            return true;\r\n          }\r\n          if (!this.#groups.get(id).visible) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      } else if (group.policy === \"AnyOff\") {\r\n        for (const id of group.ids) {\r\n          if (!this.#groups.has(id)) {\r\n            (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Optional content group not found: ${id}`);\r\n            return true;\r\n          }\r\n          if (!this.#groups.get(id).visible) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      } else if (group.policy === \"AllOff\") {\r\n        for (const id of group.ids) {\r\n          if (!this.#groups.has(id)) {\r\n            (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Optional content group not found: ${id}`);\r\n            return true;\r\n          }\r\n          if (this.#groups.get(id).visible) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Unknown optional content policy ${group.policy}.`);\r\n      return true;\r\n    }\r\n    (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Unknown group type ${group.type}.`);\r\n    return true;\r\n  }\r\n  setVisibility(id, visible = true) {\r\n    if (!this.#groups.has(id)) {\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(`Optional content group not found: ${id}`);\r\n      return;\r\n    }\r\n    this.#groups.get(id)._setVisible(INTERNAL, !!visible);\r\n    this.#cachedGetHash = null;\r\n  }\r\n  get hasInitialVisibility() {\r\n    return this.#initialHash === null || this.getHash() === this.#initialHash;\r\n  }\r\n  getOrder() {\r\n    if (!this.#groups.size) {\r\n      return null;\r\n    }\r\n    if (this.#order) {\r\n      return this.#order.slice();\r\n    }\r\n    return [...this.#groups.keys()];\r\n  }\r\n  getGroups() {\r\n    return this.#groups.size > 0 ? (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.objectFromMap)(this.#groups) : null;\r\n  }\r\n  getGroup(id) {\r\n    return this.#groups.get(id) || null;\r\n  }\r\n  getHash() {\r\n    if (this.#cachedGetHash !== null) {\r\n      return this.#cachedGetHash;\r\n    }\r\n    const hash = new _shared_murmurhash3_js__WEBPACK_IMPORTED_MODULE_1__.MurmurHash3_64();\r\n    for (const [id, group] of this.#groups) {\r\n      hash.update(`${id}:${group.visible}`);\r\n    }\r\n    return this.#cachedGetHash = hash.hexdigest();\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 739:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_516959__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_516959__.d(__nested_webpack_exports__, {\r\n/* harmony export */   renderTextLayer: () => (/* binding */ renderTextLayer),\r\n/* harmony export */   updateTextLayer: () => (/* binding */ updateTextLayer)\r\n/* harmony export */ });\r\n/* unused harmony export TextLayerRenderTask */\r\n/* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_516959__(266);\r\n/* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_516959__(473);\r\n\r\n\r\nconst MAX_TEXT_DIVS_TO_RENDER = 100000;\r\nconst DEFAULT_FONT_SIZE = 30;\r\nconst DEFAULT_FONT_ASCENT = 0.8;\r\nconst ascentCache = new Map();\r\nfunction getCtx(size, isOffscreenCanvasSupported) {\r\n  let ctx;\r\n  if (isOffscreenCanvasSupported && _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.FeatureTest.isOffscreenCanvasSupported) {\r\n    ctx = new OffscreenCanvas(size, size).getContext(\"2d\", {\r\n      alpha: false\r\n    });\r\n  } else {\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = canvas.height = size;\r\n    ctx = canvas.getContext(\"2d\", {\r\n      alpha: false\r\n    });\r\n  }\r\n  return ctx;\r\n}\r\nfunction getAscent(fontFamily, isOffscreenCanvasSupported) {\r\n  const cachedAscent = ascentCache.get(fontFamily);\r\n  if (cachedAscent) {\r\n    return cachedAscent;\r\n  }\r\n  const ctx = getCtx(DEFAULT_FONT_SIZE, isOffscreenCanvasSupported);\r\n  ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;\r\n  const metrics = ctx.measureText(\"\");\r\n  let ascent = metrics.fontBoundingBoxAscent;\r\n  let descent = Math.abs(metrics.fontBoundingBoxDescent);\r\n  if (ascent) {\r\n    const ratio = ascent / (ascent + descent);\r\n    ascentCache.set(fontFamily, ratio);\r\n    ctx.canvas.width = ctx.canvas.height = 0;\r\n    return ratio;\r\n  }\r\n  ctx.strokeStyle = \"red\";\r\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\r\n  ctx.strokeText(\"g\", 0, 0);\r\n  let pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\r\n  descent = 0;\r\n  for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\r\n    if (pixels[i] > 0) {\r\n      descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\r\n      break;\r\n    }\r\n  }\r\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\r\n  ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\r\n  pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\r\n  ascent = 0;\r\n  for (let i = 0, ii = pixels.length; i < ii; i += 4) {\r\n    if (pixels[i] > 0) {\r\n      ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\r\n      break;\r\n    }\r\n  }\r\n  ctx.canvas.width = ctx.canvas.height = 0;\r\n  if (ascent) {\r\n    const ratio = ascent / (ascent + descent);\r\n    ascentCache.set(fontFamily, ratio);\r\n    return ratio;\r\n  }\r\n  ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);\r\n  return DEFAULT_FONT_ASCENT;\r\n}\r\nfunction appendText(task, geom, styles) {\r\n  const textDiv = document.createElement(\"span\");\r\n  const textDivProperties = {\r\n    angle: 0,\r\n    canvasWidth: 0,\r\n    hasText: geom.str !== \"\",\r\n    hasEOL: geom.hasEOL,\r\n    fontSize: 0\r\n  };\r\n  task._textDivs.push(textDiv);\r\n  const tx = _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.Util.transform(task._transform, geom.transform);\r\n  let angle = Math.atan2(tx[1], tx[0]);\r\n  const style = styles[geom.fontName];\r\n  if (style.vertical) {\r\n    angle += Math.PI / 2;\r\n  }\r\n  const fontFamily = task._fontInspectorEnabled && style.fontSubstitution || style.fontFamily;\r\n  const fontHeight = Math.hypot(tx[2], tx[3]);\r\n  const fontAscent = fontHeight * getAscent(fontFamily, task._isOffscreenCanvasSupported);\r\n  let left, top;\r\n  if (angle === 0) {\r\n    left = tx[4];\r\n    top = tx[5] - fontAscent;\r\n  } else {\r\n    left = tx[4] + fontAscent * Math.sin(angle);\r\n    top = tx[5] - fontAscent * Math.cos(angle);\r\n  }\r\n  const scaleFactorStr = \"calc(var(--scale-factor)*\";\r\n  const divStyle = textDiv.style;\r\n  if (task._container === task._rootContainer) {\r\n    divStyle.left = `${(100 * left / task._pageWidth).toFixed(2)}%`;\r\n    divStyle.top = `${(100 * top / task._pageHeight).toFixed(2)}%`;\r\n  } else {\r\n    divStyle.left = `${scaleFactorStr}${left.toFixed(2)}px)`;\r\n    divStyle.top = `${scaleFactorStr}${top.toFixed(2)}px)`;\r\n  }\r\n  divStyle.fontSize = `${scaleFactorStr}${fontHeight.toFixed(2)}px)`;\r\n  divStyle.fontFamily = fontFamily;\r\n  textDivProperties.fontSize = fontHeight;\r\n  textDiv.setAttribute(\"role\", \"presentation\");\r\n  textDiv.textContent = geom.str;\r\n  textDiv.dir = geom.dir;\r\n  if (task._fontInspectorEnabled) {\r\n    textDiv.dataset.fontName = style.fontSubstitutionLoadedName || geom.fontName;\r\n  }\r\n  if (angle !== 0) {\r\n    textDivProperties.angle = angle * (180 / Math.PI);\r\n  }\r\n  let shouldScaleText = false;\r\n  if (geom.str.length > 1) {\r\n    shouldScaleText = true;\r\n  } else if (geom.str !== \" \" && geom.transform[0] !== geom.transform[3]) {\r\n    const absScaleX = Math.abs(geom.transform[0]),\r\n      absScaleY = Math.abs(geom.transform[3]);\r\n    if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {\r\n      shouldScaleText = true;\r\n    }\r\n  }\r\n  if (shouldScaleText) {\r\n    textDivProperties.canvasWidth = style.vertical ? geom.height : geom.width;\r\n  }\r\n  task._textDivProperties.set(textDiv, textDivProperties);\r\n  if (task._isReadableStream) {\r\n    task._layoutText(textDiv);\r\n  }\r\n}\r\nfunction layout(params) {\r\n  const {\r\n    div,\r\n    scale,\r\n    properties,\r\n    ctx,\r\n    prevFontSize,\r\n    prevFontFamily\r\n  } = params;\r\n  const {\r\n    style\r\n  } = div;\r\n  let transform = \"\";\r\n  if (properties.canvasWidth !== 0 && properties.hasText) {\r\n    const {\r\n      fontFamily\r\n    } = style;\r\n    const {\r\n      canvasWidth,\r\n      fontSize\r\n    } = properties;\r\n    if (prevFontSize !== fontSize || prevFontFamily !== fontFamily) {\r\n      ctx.font = `${fontSize * scale}px ${fontFamily}`;\r\n      params.prevFontSize = fontSize;\r\n      params.prevFontFamily = fontFamily;\r\n    }\r\n    const {\r\n      width\r\n    } = ctx.measureText(div.textContent);\r\n    if (width > 0) {\r\n      transform = `scaleX(${canvasWidth * scale / width})`;\r\n    }\r\n  }\r\n  if (properties.angle !== 0) {\r\n    transform = `rotate(${properties.angle}deg) ${transform}`;\r\n  }\r\n  if (transform.length > 0) {\r\n    style.transform = transform;\r\n  }\r\n}\r\nfunction render(task) {\r\n  if (task._canceled) {\r\n    return;\r\n  }\r\n  const textDivs = task._textDivs;\r\n  const capability = task._capability;\r\n  const textDivsLength = textDivs.length;\r\n  if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\r\n    capability.resolve();\r\n    return;\r\n  }\r\n  if (!task._isReadableStream) {\r\n    for (const textDiv of textDivs) {\r\n      task._layoutText(textDiv);\r\n    }\r\n  }\r\n  capability.resolve();\r\n}\r\nclass TextLayerRenderTask {\r\n  constructor({\r\n    textContentSource,\r\n    container,\r\n    viewport,\r\n    textDivs,\r\n    textDivProperties,\r\n    textContentItemsStr,\r\n    isOffscreenCanvasSupported\r\n  }) {\r\n    this._textContentSource = textContentSource;\r\n    this._isReadableStream = textContentSource instanceof ReadableStream;\r\n    this._container = this._rootContainer = container;\r\n    this._textDivs = textDivs || [];\r\n    this._textContentItemsStr = textContentItemsStr || [];\r\n    this._isOffscreenCanvasSupported = isOffscreenCanvasSupported;\r\n    this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\r\n    this._reader = null;\r\n    this._textDivProperties = textDivProperties || new WeakMap();\r\n    this._canceled = false;\r\n    this._capability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n    this._layoutTextParams = {\r\n      prevFontSize: null,\r\n      prevFontFamily: null,\r\n      div: null,\r\n      scale: viewport.scale * (globalThis.devicePixelRatio || 1),\r\n      properties: null,\r\n      ctx: getCtx(0, isOffscreenCanvasSupported)\r\n    };\r\n    const {\r\n      pageWidth,\r\n      pageHeight,\r\n      pageX,\r\n      pageY\r\n    } = viewport.rawDims;\r\n    this._transform = [1, 0, 0, -1, -pageX, pageY + pageHeight];\r\n    this._pageWidth = pageWidth;\r\n    this._pageHeight = pageHeight;\r\n    (0,_display_utils_js__WEBPACK_IMPORTED_MODULE_1__.setLayerDimensions)(container, viewport);\r\n    this._capability.promise.finally(() => {\r\n      this._layoutTextParams = null;\r\n    }).catch(() => {});\r\n  }\r\n  get promise() {\r\n    return this._capability.promise;\r\n  }\r\n  cancel() {\r\n    this._canceled = true;\r\n    if (this._reader) {\r\n      this._reader.cancel(new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(\"TextLayer task cancelled.\")).catch(() => {});\r\n      this._reader = null;\r\n    }\r\n    this._capability.reject(new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(\"TextLayer task cancelled.\"));\r\n  }\r\n  _processItems(items, styleCache) {\r\n    for (const item of items) {\r\n      if (item.str === undefined) {\r\n        if (item.type === \"beginMarkedContentProps\" || item.type === \"beginMarkedContent\") {\r\n          const parent = this._container;\r\n          this._container = document.createElement(\"span\");\r\n          this._container.classList.add(\"markedContent\");\r\n          if (item.id !== null) {\r\n            this._container.setAttribute(\"id\", `${item.id}`);\r\n          }\r\n          parent.append(this._container);\r\n        } else if (item.type === \"endMarkedContent\") {\r\n          this._container = this._container.parentNode;\r\n        }\r\n        continue;\r\n      }\r\n      this._textContentItemsStr.push(item.str);\r\n      appendText(this, item, styleCache);\r\n    }\r\n  }\r\n  _layoutText(textDiv) {\r\n    const textDivProperties = this._layoutTextParams.properties = this._textDivProperties.get(textDiv);\r\n    this._layoutTextParams.div = textDiv;\r\n    layout(this._layoutTextParams);\r\n    if (textDivProperties.hasText) {\r\n      this._container.append(textDiv);\r\n    }\r\n    if (textDivProperties.hasEOL) {\r\n      const br = document.createElement(\"br\");\r\n      br.setAttribute(\"role\", \"presentation\");\r\n      this._container.append(br);\r\n    }\r\n  }\r\n  _render() {\r\n    const capability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n    let styleCache = Object.create(null);\r\n    if (this._isReadableStream) {\r\n      const pump = () => {\r\n        this._reader.read().then(({\r\n          value,\r\n          done\r\n        }) => {\r\n          if (done) {\r\n            capability.resolve();\r\n            return;\r\n          }\r\n          Object.assign(styleCache, value.styles);\r\n          this._processItems(value.items, styleCache);\r\n          pump();\r\n        }, capability.reject);\r\n      };\r\n      this._reader = this._textContentSource.getReader();\r\n      pump();\r\n    } else if (this._textContentSource) {\r\n      const {\r\n        items,\r\n        styles\r\n      } = this._textContentSource;\r\n      this._processItems(items, styles);\r\n      capability.resolve();\r\n    } else {\r\n      throw new Error('No \"textContentSource\" parameter specified.');\r\n    }\r\n    capability.promise.then(() => {\r\n      styleCache = null;\r\n      render(this);\r\n    }, this._capability.reject);\r\n  }\r\n}\r\nfunction renderTextLayer(params) {\r\n  const task = new TextLayerRenderTask(params);\r\n  task._render();\r\n  return task;\r\n}\r\nfunction updateTextLayer({\r\n  container,\r\n  viewport,\r\n  textDivs,\r\n  textDivProperties,\r\n  isOffscreenCanvasSupported,\r\n  mustRotate = true,\r\n  mustRescale = true\r\n}) {\r\n  if (mustRotate) {\r\n    (0,_display_utils_js__WEBPACK_IMPORTED_MODULE_1__.setLayerDimensions)(container, {\r\n      rotation: viewport.rotation\r\n    });\r\n  }\r\n  if (mustRescale) {\r\n    const ctx = getCtx(0, isOffscreenCanvasSupported);\r\n    const scale = viewport.scale * (globalThis.devicePixelRatio || 1);\r\n    const params = {\r\n      prevFontSize: null,\r\n      prevFontFamily: null,\r\n      div: null,\r\n      scale,\r\n      properties: null,\r\n      ctx\r\n    };\r\n    for (const div of textDivs) {\r\n      params.properties = textDivProperties.get(div);\r\n      params.div = div;\r\n      layout(params);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 92:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_528919__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_528919__.d(__nested_webpack_exports__, {\r\n/* harmony export */   PDFDataTransportStream: () => (/* binding */ PDFDataTransportStream)\r\n/* harmony export */ });\r\n/* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_528919__(266);\r\n/* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_528919__(473);\r\n\r\n\r\nclass PDFDataTransportStream {\r\n  constructor({\r\n    length,\r\n    initialData,\r\n    progressiveDone = false,\r\n    contentDispositionFilename = null,\r\n    disableRange = false,\r\n    disableStream = false\r\n  }, pdfDataRangeTransport) {\r\n    (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(pdfDataRangeTransport, 'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.');\r\n    this._queuedChunks = [];\r\n    this._progressiveDone = progressiveDone;\r\n    this._contentDispositionFilename = contentDispositionFilename;\r\n    if (initialData?.length > 0) {\r\n      const buffer = initialData instanceof Uint8Array && initialData.byteLength === initialData.buffer.byteLength ? initialData.buffer : new Uint8Array(initialData).buffer;\r\n      this._queuedChunks.push(buffer);\r\n    }\r\n    this._pdfDataRangeTransport = pdfDataRangeTransport;\r\n    this._isStreamingSupported = !disableStream;\r\n    this._isRangeSupported = !disableRange;\r\n    this._contentLength = length;\r\n    this._fullRequestReader = null;\r\n    this._rangeReaders = [];\r\n    this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\r\n      this._onReceiveData({\r\n        begin,\r\n        chunk\r\n      });\r\n    });\r\n    this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\r\n      this._onProgress({\r\n        loaded,\r\n        total\r\n      });\r\n    });\r\n    this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\r\n      this._onReceiveData({\r\n        chunk\r\n      });\r\n    });\r\n    this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\r\n      this._onProgressiveDone();\r\n    });\r\n    this._pdfDataRangeTransport.transportReady();\r\n  }\r\n  _onReceiveData({\r\n    begin,\r\n    chunk\r\n  }) {\r\n    const buffer = chunk instanceof Uint8Array && chunk.byteLength === chunk.buffer.byteLength ? chunk.buffer : new Uint8Array(chunk).buffer;\r\n    if (begin === undefined) {\r\n      if (this._fullRequestReader) {\r\n        this._fullRequestReader._enqueue(buffer);\r\n      } else {\r\n        this._queuedChunks.push(buffer);\r\n      }\r\n    } else {\r\n      const found = this._rangeReaders.some(function (rangeReader) {\r\n        if (rangeReader._begin !== begin) {\r\n          return false;\r\n        }\r\n        rangeReader._enqueue(buffer);\r\n        return true;\r\n      });\r\n      (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(found, \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\");\r\n    }\r\n  }\r\n  get _progressiveDataLength() {\r\n    return this._fullRequestReader?._loaded ?? 0;\r\n  }\r\n  _onProgress(evt) {\r\n    if (evt.total === undefined) {\r\n      this._rangeReaders[0]?.onProgress?.({\r\n        loaded: evt.loaded\r\n      });\r\n    } else {\r\n      this._fullRequestReader?.onProgress?.({\r\n        loaded: evt.loaded,\r\n        total: evt.total\r\n      });\r\n    }\r\n  }\r\n  _onProgressiveDone() {\r\n    this._fullRequestReader?.progressiveDone();\r\n    this._progressiveDone = true;\r\n  }\r\n  _removeRangeReader(reader) {\r\n    const i = this._rangeReaders.indexOf(reader);\r\n    if (i >= 0) {\r\n      this._rangeReaders.splice(i, 1);\r\n    }\r\n  }\r\n  getFullReader() {\r\n    (0,_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!this._fullRequestReader, \"PDFDataTransportStream.getFullReader can only be called once.\");\r\n    const queuedChunks = this._queuedChunks;\r\n    this._queuedChunks = null;\r\n    return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone, this._contentDispositionFilename);\r\n  }\r\n  getRangeReader(begin, end) {\r\n    if (end <= this._progressiveDataLength) {\r\n      return null;\r\n    }\r\n    const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\r\n    this._pdfDataRangeTransport.requestDataRange(begin, end);\r\n    this._rangeReaders.push(reader);\r\n    return reader;\r\n  }\r\n  cancelAllRequests(reason) {\r\n    this._fullRequestReader?.cancel(reason);\r\n    for (const reader of this._rangeReaders.slice(0)) {\r\n      reader.cancel(reason);\r\n    }\r\n    this._pdfDataRangeTransport.abort();\r\n  }\r\n}\r\nclass PDFDataTransportStreamReader {\r\n  constructor(stream, queuedChunks, progressiveDone = false, contentDispositionFilename = null) {\r\n    this._stream = stream;\r\n    this._done = progressiveDone || false;\r\n    this._filename = (0,_display_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPdfFile)(contentDispositionFilename) ? contentDispositionFilename : null;\r\n    this._queuedChunks = queuedChunks || [];\r\n    this._loaded = 0;\r\n    for (const chunk of this._queuedChunks) {\r\n      this._loaded += chunk.byteLength;\r\n    }\r\n    this._requests = [];\r\n    this._headersReady = Promise.resolve();\r\n    stream._fullRequestReader = this;\r\n    this.onProgress = null;\r\n  }\r\n  _enqueue(chunk) {\r\n    if (this._done) {\r\n      return;\r\n    }\r\n    if (this._requests.length > 0) {\r\n      const requestCapability = this._requests.shift();\r\n      requestCapability.resolve({\r\n        value: chunk,\r\n        done: false\r\n      });\r\n    } else {\r\n      this._queuedChunks.push(chunk);\r\n    }\r\n    this._loaded += chunk.byteLength;\r\n  }\r\n  get headersReady() {\r\n    return this._headersReady;\r\n  }\r\n  get filename() {\r\n    return this._filename;\r\n  }\r\n  get isRangeSupported() {\r\n    return this._stream._isRangeSupported;\r\n  }\r\n  get isStreamingSupported() {\r\n    return this._stream._isStreamingSupported;\r\n  }\r\n  get contentLength() {\r\n    return this._stream._contentLength;\r\n  }\r\n  async read() {\r\n    if (this._queuedChunks.length > 0) {\r\n      const chunk = this._queuedChunks.shift();\r\n      return {\r\n        value: chunk,\r\n        done: false\r\n      };\r\n    }\r\n    if (this._done) {\r\n      return {\r\n        value: undefined,\r\n        done: true\r\n      };\r\n    }\r\n    const requestCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n    this._requests.push(requestCapability);\r\n    return requestCapability.promise;\r\n  }\r\n  cancel(reason) {\r\n    this._done = true;\r\n    for (const requestCapability of this._requests) {\r\n      requestCapability.resolve({\r\n        value: undefined,\r\n        done: true\r\n      });\r\n    }\r\n    this._requests.length = 0;\r\n  }\r\n  progressiveDone() {\r\n    if (this._done) {\r\n      return;\r\n    }\r\n    this._done = true;\r\n  }\r\n}\r\nclass PDFDataTransportStreamRangeReader {\r\n  constructor(stream, begin, end) {\r\n    this._stream = stream;\r\n    this._begin = begin;\r\n    this._end = end;\r\n    this._queuedChunk = null;\r\n    this._requests = [];\r\n    this._done = false;\r\n    this.onProgress = null;\r\n  }\r\n  _enqueue(chunk) {\r\n    if (this._done) {\r\n      return;\r\n    }\r\n    if (this._requests.length === 0) {\r\n      this._queuedChunk = chunk;\r\n    } else {\r\n      const requestsCapability = this._requests.shift();\r\n      requestsCapability.resolve({\r\n        value: chunk,\r\n        done: false\r\n      });\r\n      for (const requestCapability of this._requests) {\r\n        requestCapability.resolve({\r\n          value: undefined,\r\n          done: true\r\n        });\r\n      }\r\n      this._requests.length = 0;\r\n    }\r\n    this._done = true;\r\n    this._stream._removeRangeReader(this);\r\n  }\r\n  get isStreamingSupported() {\r\n    return false;\r\n  }\r\n  async read() {\r\n    if (this._queuedChunk) {\r\n      const chunk = this._queuedChunk;\r\n      this._queuedChunk = null;\r\n      return {\r\n        value: chunk,\r\n        done: false\r\n      };\r\n    }\r\n    if (this._done) {\r\n      return {\r\n        value: undefined,\r\n        done: true\r\n      };\r\n    }\r\n    const requestCapability = new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n    this._requests.push(requestCapability);\r\n    return requestCapability.promise;\r\n  }\r\n  cancel(reason) {\r\n    this._done = true;\r\n    for (const requestCapability of this._requests) {\r\n      requestCapability.resolve({\r\n        value: undefined,\r\n        done: true\r\n      });\r\n    }\r\n    this._requests.length = 0;\r\n    this._stream._removeRangeReader(this);\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 368:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_537288__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_537288__.d(__nested_webpack_exports__, {\r\n/* harmony export */   GlobalWorkerOptions: () => (/* binding */ GlobalWorkerOptions)\r\n/* harmony export */ });\r\nconst GlobalWorkerOptions = Object.create(null);\r\nGlobalWorkerOptions.workerPort = null;\r\nGlobalWorkerOptions.workerSrc = \"\";\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 160:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_537719__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_537719__.d(__nested_webpack_exports__, {\r\n/* harmony export */   XfaLayer: () => (/* binding */ XfaLayer)\r\n/* harmony export */ });\r\n/* harmony import */ var _xfa_text_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_537719__(521);\r\n\r\nclass XfaLayer {\r\n  static setupStorage(html, id, element, storage, intent) {\r\n    const storedData = storage.getValue(id, {\r\n      value: null\r\n    });\r\n    switch (element.name) {\r\n      case \"textarea\":\r\n        if (storedData.value !== null) {\r\n          html.textContent = storedData.value;\r\n        }\r\n        if (intent === \"print\") {\r\n          break;\r\n        }\r\n        html.addEventListener(\"input\", event => {\r\n          storage.setValue(id, {\r\n            value: event.target.value\r\n          });\r\n        });\r\n        break;\r\n      case \"input\":\r\n        if (element.attributes.type === \"radio\" || element.attributes.type === \"checkbox\") {\r\n          if (storedData.value === element.attributes.xfaOn) {\r\n            html.setAttribute(\"checked\", true);\r\n          } else if (storedData.value === element.attributes.xfaOff) {\r\n            html.removeAttribute(\"checked\");\r\n          }\r\n          if (intent === \"print\") {\r\n            break;\r\n          }\r\n          html.addEventListener(\"change\", event => {\r\n            storage.setValue(id, {\r\n              value: event.target.checked ? event.target.getAttribute(\"xfaOn\") : event.target.getAttribute(\"xfaOff\")\r\n            });\r\n          });\r\n        } else {\r\n          if (storedData.value !== null) {\r\n            html.setAttribute(\"value\", storedData.value);\r\n          }\r\n          if (intent === \"print\") {\r\n            break;\r\n          }\r\n          html.addEventListener(\"input\", event => {\r\n            storage.setValue(id, {\r\n              value: event.target.value\r\n            });\r\n          });\r\n        }\r\n        break;\r\n      case \"select\":\r\n        if (storedData.value !== null) {\r\n          html.setAttribute(\"value\", storedData.value);\r\n          for (const option of element.children) {\r\n            if (option.attributes.value === storedData.value) {\r\n              option.attributes.selected = true;\r\n            } else if (option.attributes.hasOwnProperty(\"selected\")) {\r\n              delete option.attributes.selected;\r\n            }\r\n          }\r\n        }\r\n        html.addEventListener(\"input\", event => {\r\n          const options = event.target.options;\r\n          const value = options.selectedIndex === -1 ? \"\" : options[options.selectedIndex].value;\r\n          storage.setValue(id, {\r\n            value\r\n          });\r\n        });\r\n        break;\r\n    }\r\n  }\r\n  static setAttributes({\r\n    html,\r\n    element,\r\n    storage = null,\r\n    intent,\r\n    linkService\r\n  }) {\r\n    const {\r\n      attributes\r\n    } = element;\r\n    const isHTMLAnchorElement = html instanceof HTMLAnchorElement;\r\n    if (attributes.type === \"radio\") {\r\n      attributes.name = `${attributes.name}-${intent}`;\r\n    }\r\n    for (const [key, value] of Object.entries(attributes)) {\r\n      if (value === null || value === undefined) {\r\n        continue;\r\n      }\r\n      switch (key) {\r\n        case \"class\":\r\n          if (value.length) {\r\n            html.setAttribute(key, value.join(\" \"));\r\n          }\r\n          break;\r\n        case \"dataId\":\r\n          break;\r\n        case \"id\":\r\n          html.setAttribute(\"data-element-id\", value);\r\n          break;\r\n        case \"style\":\r\n          Object.assign(html.style, value);\r\n          break;\r\n        case \"textContent\":\r\n          html.textContent = value;\r\n          break;\r\n        default:\r\n          if (!isHTMLAnchorElement || key !== \"href\" && key !== \"newWindow\") {\r\n            html.setAttribute(key, value);\r\n          }\r\n      }\r\n    }\r\n    if (isHTMLAnchorElement) {\r\n      linkService.addLinkAttributes(html, attributes.href, attributes.newWindow);\r\n    }\r\n    if (storage && attributes.dataId) {\r\n      this.setupStorage(html, attributes.dataId, element, storage);\r\n    }\r\n  }\r\n  static render(parameters) {\r\n    const storage = parameters.annotationStorage;\r\n    const linkService = parameters.linkService;\r\n    const root = parameters.xfaHtml;\r\n    const intent = parameters.intent || \"display\";\r\n    const rootHtml = document.createElement(root.name);\r\n    if (root.attributes) {\r\n      this.setAttributes({\r\n        html: rootHtml,\r\n        element: root,\r\n        intent,\r\n        linkService\r\n      });\r\n    }\r\n    const isNotForRichText = intent !== \"richText\";\r\n    const rootDiv = parameters.div;\r\n    rootDiv.append(rootHtml);\r\n    if (parameters.viewport) {\r\n      const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\r\n      rootDiv.style.transform = transform;\r\n    }\r\n    if (isNotForRichText) {\r\n      rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\r\n    }\r\n    const textDivs = [];\r\n    if (root.children.length === 0) {\r\n      if (root.value) {\r\n        const node = document.createTextNode(root.value);\r\n        rootHtml.append(node);\r\n        if (isNotForRichText && _xfa_text_js__WEBPACK_IMPORTED_MODULE_0__.XfaText.shouldBuildText(root.name)) {\r\n          textDivs.push(node);\r\n        }\r\n      }\r\n      return {\r\n        textDivs\r\n      };\r\n    }\r\n    const stack = [[root, -1, rootHtml]];\r\n    while (stack.length > 0) {\r\n      const [parent, i, html] = stack.at(-1);\r\n      if (i + 1 === parent.children.length) {\r\n        stack.pop();\r\n        continue;\r\n      }\r\n      const child = parent.children[++stack.at(-1)[1]];\r\n      if (child === null) {\r\n        continue;\r\n      }\r\n      const {\r\n        name\r\n      } = child;\r\n      if (name === \"#text\") {\r\n        const node = document.createTextNode(child.value);\r\n        textDivs.push(node);\r\n        html.append(node);\r\n        continue;\r\n      }\r\n      const childHtml = child?.attributes?.xmlns ? document.createElementNS(child.attributes.xmlns, name) : document.createElement(name);\r\n      html.append(childHtml);\r\n      if (child.attributes) {\r\n        this.setAttributes({\r\n          html: childHtml,\r\n          element: child,\r\n          storage,\r\n          intent,\r\n          linkService\r\n        });\r\n      }\r\n      if (child.children?.length > 0) {\r\n        stack.push([child, -1, childHtml]);\r\n      } else if (child.value) {\r\n        const node = document.createTextNode(child.value);\r\n        if (isNotForRichText && _xfa_text_js__WEBPACK_IMPORTED_MODULE_0__.XfaText.shouldBuildText(name)) {\r\n          textDivs.push(node);\r\n        }\r\n        childHtml.append(node);\r\n      }\r\n    }\r\n    for (const el of rootDiv.querySelectorAll(\".xfaNonInteractive input, .xfaNonInteractive textarea\")) {\r\n      el.setAttribute(\"readOnly\", true);\r\n    }\r\n    return {\r\n      textDivs\r\n    };\r\n  }\r\n  static update(parameters) {\r\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\r\n    parameters.div.style.transform = transform;\r\n    parameters.div.hidden = false;\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 521:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_544732__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_544732__.d(__nested_webpack_exports__, {\r\n/* harmony export */   XfaText: () => (/* binding */ XfaText)\r\n/* harmony export */ });\r\nclass XfaText {\r\n  static textContent(xfa) {\r\n    const items = [];\r\n    const output = {\r\n      items,\r\n      styles: Object.create(null)\r\n    };\r\n    function walk(node) {\r\n      if (!node) {\r\n        return;\r\n      }\r\n      let str = null;\r\n      const name = node.name;\r\n      if (name === \"#text\") {\r\n        str = node.value;\r\n      } else if (!XfaText.shouldBuildText(name)) {\r\n        return;\r\n      } else if (node?.attributes?.textContent) {\r\n        str = node.attributes.textContent;\r\n      } else if (node.value) {\r\n        str = node.value;\r\n      }\r\n      if (str !== null) {\r\n        items.push({\r\n          str\r\n        });\r\n      }\r\n      if (!node.children) {\r\n        return;\r\n      }\r\n      for (const child of node.children) {\r\n        walk(child);\r\n      }\r\n    }\r\n    walk(xfa);\r\n    return output;\r\n  }\r\n  static shouldBuildText(name) {\r\n    return !(name === \"textarea\" || name === \"input\" || name === \"option\" || name === \"select\");\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 907:\r\n/***/ ((__webpack_module__, __nested_webpack_exports__, __nested_webpack_require_545964__) => {\r\n\r\n__nested_webpack_require_545964__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\r\n/* harmony export */ __nested_webpack_require_545964__.d(__nested_webpack_exports__, {\r\n/* harmony export */   AbortException: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException),\r\n/* harmony export */   AnnotationEditorLayer: () => (/* reexport safe */ _display_editor_annotation_editor_layer_js__WEBPACK_IMPORTED_MODULE_4__.AnnotationEditorLayer),\r\n/* harmony export */   AnnotationEditorParamsType: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorParamsType),\r\n/* harmony export */   AnnotationEditorType: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorType),\r\n/* harmony export */   AnnotationEditorUIManager: () => (/* reexport safe */ _display_editor_tools_js__WEBPACK_IMPORTED_MODULE_5__.AnnotationEditorUIManager),\r\n/* harmony export */   AnnotationLayer: () => (/* reexport safe */ _display_annotation_layer_js__WEBPACK_IMPORTED_MODULE_6__.AnnotationLayer),\r\n/* harmony export */   AnnotationMode: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationMode),\r\n/* harmony export */   CMapCompressionType: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.CMapCompressionType),\r\n/* harmony export */   ColorPicker: () => (/* reexport safe */ _display_editor_color_picker_js__WEBPACK_IMPORTED_MODULE_7__.ColorPicker),\r\n/* harmony export */   DOMSVGFactory: () => (/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMSVGFactory),\r\n/* harmony export */   DrawLayer: () => (/* reexport safe */ _display_draw_layer_js__WEBPACK_IMPORTED_MODULE_8__.DrawLayer),\r\n/* harmony export */   FeatureTest: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.FeatureTest),\r\n/* harmony export */   GlobalWorkerOptions: () => (/* reexport safe */ _display_worker_options_js__WEBPACK_IMPORTED_MODULE_9__.GlobalWorkerOptions),\r\n/* harmony export */   ImageKind: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.ImageKind),\r\n/* harmony export */   InvalidPDFException: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.InvalidPDFException),\r\n/* harmony export */   MissingPDFException: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException),\r\n/* harmony export */   OPS: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.OPS),\r\n/* harmony export */   Outliner: () => (/* reexport safe */ _display_editor_outliner_js__WEBPACK_IMPORTED_MODULE_10__.Outliner),\r\n/* harmony export */   PDFDataRangeTransport: () => (/* reexport safe */ _display_api_js__WEBPACK_IMPORTED_MODULE_1__.PDFDataRangeTransport),\r\n/* harmony export */   PDFDateString: () => (/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.PDFDateString),\r\n/* harmony export */   PDFWorker: () => (/* reexport safe */ _display_api_js__WEBPACK_IMPORTED_MODULE_1__.PDFWorker),\r\n/* harmony export */   PasswordResponses: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PasswordResponses),\r\n/* harmony export */   PermissionFlag: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PermissionFlag),\r\n/* harmony export */   PixelsPerInch: () => (/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.PixelsPerInch),\r\n/* harmony export */   PromiseCapability: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability),\r\n/* harmony export */   RenderingCancelledException: () => (/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.RenderingCancelledException),\r\n/* harmony export */   UnexpectedResponseException: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.UnexpectedResponseException),\r\n/* harmony export */   Util: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.Util),\r\n/* harmony export */   VerbosityLevel: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.VerbosityLevel),\r\n/* harmony export */   XfaLayer: () => (/* reexport safe */ _display_xfa_layer_js__WEBPACK_IMPORTED_MODULE_11__.XfaLayer),\r\n/* harmony export */   build: () => (/* reexport safe */ _display_api_js__WEBPACK_IMPORTED_MODULE_1__.build),\r\n/* harmony export */   createValidAbsoluteUrl: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.createValidAbsoluteUrl),\r\n/* harmony export */   fetchData: () => (/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.fetchData),\r\n/* harmony export */   getDocument: () => (/* reexport safe */ _display_api_js__WEBPACK_IMPORTED_MODULE_1__.getDocument),\r\n/* harmony export */   getFilenameFromUrl: () => (/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.getFilenameFromUrl),\r\n/* harmony export */   getPdfFilenameFromUrl: () => (/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.getPdfFilenameFromUrl),\r\n/* harmony export */   getXfaPageViewport: () => (/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.getXfaPageViewport),\r\n/* harmony export */   isDataScheme: () => (/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isDataScheme),\r\n/* harmony export */   isPdfFile: () => (/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isPdfFile),\r\n/* harmony export */   noContextMenu: () => (/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.noContextMenu),\r\n/* harmony export */   normalizeUnicode: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.normalizeUnicode),\r\n/* harmony export */   renderTextLayer: () => (/* reexport safe */ _display_text_layer_js__WEBPACK_IMPORTED_MODULE_3__.renderTextLayer),\r\n/* harmony export */   setLayerDimensions: () => (/* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.setLayerDimensions),\r\n/* harmony export */   shadow: () => (/* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow),\r\n/* harmony export */   updateTextLayer: () => (/* reexport safe */ _display_text_layer_js__WEBPACK_IMPORTED_MODULE_3__.updateTextLayer),\r\n/* harmony export */   version: () => (/* reexport safe */ _display_api_js__WEBPACK_IMPORTED_MODULE_1__.version)\r\n/* harmony export */ });\r\n/* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_545964__(266);\r\n/* harmony import */ var _display_api_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_545964__(406);\r\n/* harmony import */ var _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_545964__(473);\r\n/* harmony import */ var _display_text_layer_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_545964__(739);\r\n/* harmony import */ var _display_editor_annotation_editor_layer_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_545964__(629);\r\n/* harmony import */ var _display_editor_tools_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_545964__(812);\r\n/* harmony import */ var _display_annotation_layer_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_545964__(640);\r\n/* harmony import */ var _display_editor_color_picker_js__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_545964__(97);\r\n/* harmony import */ var _display_draw_layer_js__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_545964__(423);\r\n/* harmony import */ var _display_worker_options_js__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_545964__(368);\r\n/* harmony import */ var _display_editor_outliner_js__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_545964__(405);\r\n/* harmony import */ var _display_xfa_layer_js__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_545964__(160);\r\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_display_api_js__WEBPACK_IMPORTED_MODULE_1__]);\r\n_display_api_js__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst pdfjsVersion = '4.0.379';\r\nconst pdfjsBuild = '9e14d04fd';\r\n\r\n__webpack_async_result__();\r\n} catch(e) { __webpack_async_result__(e); } });\r\n\r\n/***/ }),\r\n\r\n/***/ 694:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_554303__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_554303__.d(__nested_webpack_exports__, {\r\n/* harmony export */   MessageHandler: () => (/* binding */ MessageHandler)\r\n/* harmony export */ });\r\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_554303__(266);\r\n\r\nconst CallbackKind = {\r\n  UNKNOWN: 0,\r\n  DATA: 1,\r\n  ERROR: 2\r\n};\r\nconst StreamKind = {\r\n  UNKNOWN: 0,\r\n  CANCEL: 1,\r\n  CANCEL_COMPLETE: 2,\r\n  CLOSE: 3,\r\n  ENQUEUE: 4,\r\n  ERROR: 5,\r\n  PULL: 6,\r\n  PULL_COMPLETE: 7,\r\n  START_COMPLETE: 8\r\n};\r\nfunction wrapReason(reason) {\r\n  if (!(reason instanceof Error || typeof reason === \"object\" && reason !== null)) {\r\n    (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)('wrapReason: Expected \"reason\" to be a (possibly cloned) Error.');\r\n  }\r\n  switch (reason.name) {\r\n    case \"AbortException\":\r\n      return new _util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(reason.message);\r\n    case \"MissingPDFException\":\r\n      return new _util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException(reason.message);\r\n    case \"PasswordException\":\r\n      return new _util_js__WEBPACK_IMPORTED_MODULE_0__.PasswordException(reason.message, reason.code);\r\n    case \"UnexpectedResponseException\":\r\n      return new _util_js__WEBPACK_IMPORTED_MODULE_0__.UnexpectedResponseException(reason.message, reason.status);\r\n    case \"UnknownErrorException\":\r\n      return new _util_js__WEBPACK_IMPORTED_MODULE_0__.UnknownErrorException(reason.message, reason.details);\r\n    default:\r\n      return new _util_js__WEBPACK_IMPORTED_MODULE_0__.UnknownErrorException(reason.message, reason.toString());\r\n  }\r\n}\r\nclass MessageHandler {\r\n  constructor(sourceName, targetName, comObj) {\r\n    this.sourceName = sourceName;\r\n    this.targetName = targetName;\r\n    this.comObj = comObj;\r\n    this.callbackId = 1;\r\n    this.streamId = 1;\r\n    this.streamSinks = Object.create(null);\r\n    this.streamControllers = Object.create(null);\r\n    this.callbackCapabilities = Object.create(null);\r\n    this.actionHandler = Object.create(null);\r\n    this._onComObjOnMessage = event => {\r\n      const data = event.data;\r\n      if (data.targetName !== this.sourceName) {\r\n        return;\r\n      }\r\n      if (data.stream) {\r\n        this.#processStreamMessage(data);\r\n        return;\r\n      }\r\n      if (data.callback) {\r\n        const callbackId = data.callbackId;\r\n        const capability = this.callbackCapabilities[callbackId];\r\n        if (!capability) {\r\n          throw new Error(`Cannot resolve callback ${callbackId}`);\r\n        }\r\n        delete this.callbackCapabilities[callbackId];\r\n        if (data.callback === CallbackKind.DATA) {\r\n          capability.resolve(data.data);\r\n        } else if (data.callback === CallbackKind.ERROR) {\r\n          capability.reject(wrapReason(data.reason));\r\n        } else {\r\n          throw new Error(\"Unexpected callback case\");\r\n        }\r\n        return;\r\n      }\r\n      const action = this.actionHandler[data.action];\r\n      if (!action) {\r\n        throw new Error(`Unknown action from worker: ${data.action}`);\r\n      }\r\n      if (data.callbackId) {\r\n        const cbSourceName = this.sourceName;\r\n        const cbTargetName = data.sourceName;\r\n        new Promise(function (resolve) {\r\n          resolve(action(data.data));\r\n        }).then(function (result) {\r\n          comObj.postMessage({\r\n            sourceName: cbSourceName,\r\n            targetName: cbTargetName,\r\n            callback: CallbackKind.DATA,\r\n            callbackId: data.callbackId,\r\n            data: result\r\n          });\r\n        }, function (reason) {\r\n          comObj.postMessage({\r\n            sourceName: cbSourceName,\r\n            targetName: cbTargetName,\r\n            callback: CallbackKind.ERROR,\r\n            callbackId: data.callbackId,\r\n            reason: wrapReason(reason)\r\n          });\r\n        });\r\n        return;\r\n      }\r\n      if (data.streamId) {\r\n        this.#createStreamSink(data);\r\n        return;\r\n      }\r\n      action(data.data);\r\n    };\r\n    comObj.addEventListener(\"message\", this._onComObjOnMessage);\r\n  }\r\n  on(actionName, handler) {\r\n    const ah = this.actionHandler;\r\n    if (ah[actionName]) {\r\n      throw new Error(`There is already an actionName called \"${actionName}\"`);\r\n    }\r\n    ah[actionName] = handler;\r\n  }\r\n  send(actionName, data, transfers) {\r\n    this.comObj.postMessage({\r\n      sourceName: this.sourceName,\r\n      targetName: this.targetName,\r\n      action: actionName,\r\n      data\r\n    }, transfers);\r\n  }\r\n  sendWithPromise(actionName, data, transfers) {\r\n    const callbackId = this.callbackId++;\r\n    const capability = new _util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n    this.callbackCapabilities[callbackId] = capability;\r\n    try {\r\n      this.comObj.postMessage({\r\n        sourceName: this.sourceName,\r\n        targetName: this.targetName,\r\n        action: actionName,\r\n        callbackId,\r\n        data\r\n      }, transfers);\r\n    } catch (ex) {\r\n      capability.reject(ex);\r\n    }\r\n    return capability.promise;\r\n  }\r\n  sendWithStream(actionName, data, queueingStrategy, transfers) {\r\n    const streamId = this.streamId++,\r\n      sourceName = this.sourceName,\r\n      targetName = this.targetName,\r\n      comObj = this.comObj;\r\n    return new ReadableStream({\r\n      start: controller => {\r\n        const startCapability = new _util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n        this.streamControllers[streamId] = {\r\n          controller,\r\n          startCall: startCapability,\r\n          pullCall: null,\r\n          cancelCall: null,\r\n          isClosed: false\r\n        };\r\n        comObj.postMessage({\r\n          sourceName,\r\n          targetName,\r\n          action: actionName,\r\n          streamId,\r\n          data,\r\n          desiredSize: controller.desiredSize\r\n        }, transfers);\r\n        return startCapability.promise;\r\n      },\r\n      pull: controller => {\r\n        const pullCapability = new _util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n        this.streamControllers[streamId].pullCall = pullCapability;\r\n        comObj.postMessage({\r\n          sourceName,\r\n          targetName,\r\n          stream: StreamKind.PULL,\r\n          streamId,\r\n          desiredSize: controller.desiredSize\r\n        });\r\n        return pullCapability.promise;\r\n      },\r\n      cancel: reason => {\r\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(reason instanceof Error, \"cancel must have a valid reason\");\r\n        const cancelCapability = new _util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n        this.streamControllers[streamId].cancelCall = cancelCapability;\r\n        this.streamControllers[streamId].isClosed = true;\r\n        comObj.postMessage({\r\n          sourceName,\r\n          targetName,\r\n          stream: StreamKind.CANCEL,\r\n          streamId,\r\n          reason: wrapReason(reason)\r\n        });\r\n        return cancelCapability.promise;\r\n      }\r\n    }, queueingStrategy);\r\n  }\r\n  #createStreamSink(data) {\r\n    const streamId = data.streamId,\r\n      sourceName = this.sourceName,\r\n      targetName = data.sourceName,\r\n      comObj = this.comObj;\r\n    const self = this,\r\n      action = this.actionHandler[data.action];\r\n    const streamSink = {\r\n      enqueue(chunk, size = 1, transfers) {\r\n        if (this.isCancelled) {\r\n          return;\r\n        }\r\n        const lastDesiredSize = this.desiredSize;\r\n        this.desiredSize -= size;\r\n        if (lastDesiredSize > 0 && this.desiredSize <= 0) {\r\n          this.sinkCapability = new _util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability();\r\n          this.ready = this.sinkCapability.promise;\r\n        }\r\n        comObj.postMessage({\r\n          sourceName,\r\n          targetName,\r\n          stream: StreamKind.ENQUEUE,\r\n          streamId,\r\n          chunk\r\n        }, transfers);\r\n      },\r\n      close() {\r\n        if (this.isCancelled) {\r\n          return;\r\n        }\r\n        this.isCancelled = true;\r\n        comObj.postMessage({\r\n          sourceName,\r\n          targetName,\r\n          stream: StreamKind.CLOSE,\r\n          streamId\r\n        });\r\n        delete self.streamSinks[streamId];\r\n      },\r\n      error(reason) {\r\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(reason instanceof Error, \"error must have a valid reason\");\r\n        if (this.isCancelled) {\r\n          return;\r\n        }\r\n        this.isCancelled = true;\r\n        comObj.postMessage({\r\n          sourceName,\r\n          targetName,\r\n          stream: StreamKind.ERROR,\r\n          streamId,\r\n          reason: wrapReason(reason)\r\n        });\r\n      },\r\n      sinkCapability: new _util_js__WEBPACK_IMPORTED_MODULE_0__.PromiseCapability(),\r\n      onPull: null,\r\n      onCancel: null,\r\n      isCancelled: false,\r\n      desiredSize: data.desiredSize,\r\n      ready: null\r\n    };\r\n    streamSink.sinkCapability.resolve();\r\n    streamSink.ready = streamSink.sinkCapability.promise;\r\n    this.streamSinks[streamId] = streamSink;\r\n    new Promise(function (resolve) {\r\n      resolve(action(data.data, streamSink));\r\n    }).then(function () {\r\n      comObj.postMessage({\r\n        sourceName,\r\n        targetName,\r\n        stream: StreamKind.START_COMPLETE,\r\n        streamId,\r\n        success: true\r\n      });\r\n    }, function (reason) {\r\n      comObj.postMessage({\r\n        sourceName,\r\n        targetName,\r\n        stream: StreamKind.START_COMPLETE,\r\n        streamId,\r\n        reason: wrapReason(reason)\r\n      });\r\n    });\r\n  }\r\n  #processStreamMessage(data) {\r\n    const streamId = data.streamId,\r\n      sourceName = this.sourceName,\r\n      targetName = data.sourceName,\r\n      comObj = this.comObj;\r\n    const streamController = this.streamControllers[streamId],\r\n      streamSink = this.streamSinks[streamId];\r\n    switch (data.stream) {\r\n      case StreamKind.START_COMPLETE:\r\n        if (data.success) {\r\n          streamController.startCall.resolve();\r\n        } else {\r\n          streamController.startCall.reject(wrapReason(data.reason));\r\n        }\r\n        break;\r\n      case StreamKind.PULL_COMPLETE:\r\n        if (data.success) {\r\n          streamController.pullCall.resolve();\r\n        } else {\r\n          streamController.pullCall.reject(wrapReason(data.reason));\r\n        }\r\n        break;\r\n      case StreamKind.PULL:\r\n        if (!streamSink) {\r\n          comObj.postMessage({\r\n            sourceName,\r\n            targetName,\r\n            stream: StreamKind.PULL_COMPLETE,\r\n            streamId,\r\n            success: true\r\n          });\r\n          break;\r\n        }\r\n        if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {\r\n          streamSink.sinkCapability.resolve();\r\n        }\r\n        streamSink.desiredSize = data.desiredSize;\r\n        new Promise(function (resolve) {\r\n          resolve(streamSink.onPull?.());\r\n        }).then(function () {\r\n          comObj.postMessage({\r\n            sourceName,\r\n            targetName,\r\n            stream: StreamKind.PULL_COMPLETE,\r\n            streamId,\r\n            success: true\r\n          });\r\n        }, function (reason) {\r\n          comObj.postMessage({\r\n            sourceName,\r\n            targetName,\r\n            stream: StreamKind.PULL_COMPLETE,\r\n            streamId,\r\n            reason: wrapReason(reason)\r\n          });\r\n        });\r\n        break;\r\n      case StreamKind.ENQUEUE:\r\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(streamController, \"enqueue should have stream controller\");\r\n        if (streamController.isClosed) {\r\n          break;\r\n        }\r\n        streamController.controller.enqueue(data.chunk);\r\n        break;\r\n      case StreamKind.CLOSE:\r\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(streamController, \"close should have stream controller\");\r\n        if (streamController.isClosed) {\r\n          break;\r\n        }\r\n        streamController.isClosed = true;\r\n        streamController.controller.close();\r\n        this.#deleteStreamController(streamController, streamId);\r\n        break;\r\n      case StreamKind.ERROR:\r\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(streamController, \"error should have stream controller\");\r\n        streamController.controller.error(wrapReason(data.reason));\r\n        this.#deleteStreamController(streamController, streamId);\r\n        break;\r\n      case StreamKind.CANCEL_COMPLETE:\r\n        if (data.success) {\r\n          streamController.cancelCall.resolve();\r\n        } else {\r\n          streamController.cancelCall.reject(wrapReason(data.reason));\r\n        }\r\n        this.#deleteStreamController(streamController, streamId);\r\n        break;\r\n      case StreamKind.CANCEL:\r\n        if (!streamSink) {\r\n          break;\r\n        }\r\n        new Promise(function (resolve) {\r\n          resolve(streamSink.onCancel?.(wrapReason(data.reason)));\r\n        }).then(function () {\r\n          comObj.postMessage({\r\n            sourceName,\r\n            targetName,\r\n            stream: StreamKind.CANCEL_COMPLETE,\r\n            streamId,\r\n            success: true\r\n          });\r\n        }, function (reason) {\r\n          comObj.postMessage({\r\n            sourceName,\r\n            targetName,\r\n            stream: StreamKind.CANCEL_COMPLETE,\r\n            streamId,\r\n            reason: wrapReason(reason)\r\n          });\r\n        });\r\n        streamSink.sinkCapability.reject(wrapReason(data.reason));\r\n        streamSink.isCancelled = true;\r\n        delete this.streamSinks[streamId];\r\n        break;\r\n      default:\r\n        throw new Error(\"Unexpected stream case\");\r\n    }\r\n  }\r\n  async #deleteStreamController(streamController, streamId) {\r\n    await Promise.allSettled([streamController.startCall?.promise, streamController.pullCall?.promise, streamController.cancelCall?.promise]);\r\n    delete this.streamControllers[streamId];\r\n  }\r\n  destroy() {\r\n    this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 825:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_568204__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_568204__.d(__nested_webpack_exports__, {\r\n/* harmony export */   MurmurHash3_64: () => (/* binding */ MurmurHash3_64)\r\n/* harmony export */ });\r\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_568204__(266);\r\n\r\nconst SEED = 0xc3d2e1f0;\r\nconst MASK_HIGH = 0xffff0000;\r\nconst MASK_LOW = 0xffff;\r\nclass MurmurHash3_64 {\r\n  constructor(seed) {\r\n    this.h1 = seed ? seed & 0xffffffff : SEED;\r\n    this.h2 = seed ? seed & 0xffffffff : SEED;\r\n  }\r\n  update(input) {\r\n    let data, length;\r\n    if (typeof input === \"string\") {\r\n      data = new Uint8Array(input.length * 2);\r\n      length = 0;\r\n      for (let i = 0, ii = input.length; i < ii; i++) {\r\n        const code = input.charCodeAt(i);\r\n        if (code <= 0xff) {\r\n          data[length++] = code;\r\n        } else {\r\n          data[length++] = code >>> 8;\r\n          data[length++] = code & 0xff;\r\n        }\r\n      }\r\n    } else if ((0,_util_js__WEBPACK_IMPORTED_MODULE_0__.isArrayBuffer)(input)) {\r\n      data = input.slice();\r\n      length = data.byteLength;\r\n    } else {\r\n      throw new Error(\"Wrong data format in MurmurHash3_64_update. \" + \"Input must be a string or array.\");\r\n    }\r\n    const blockCounts = length >> 2;\r\n    const tailLength = length - blockCounts * 4;\r\n    const dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);\r\n    let k1 = 0,\r\n      k2 = 0;\r\n    let h1 = this.h1,\r\n      h2 = this.h2;\r\n    const C1 = 0xcc9e2d51,\r\n      C2 = 0x1b873593;\r\n    const C1_LOW = C1 & MASK_LOW,\r\n      C2_LOW = C2 & MASK_LOW;\r\n    for (let i = 0; i < blockCounts; i++) {\r\n      if (i & 1) {\r\n        k1 = dataUint32[i];\r\n        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\r\n        k1 = k1 << 15 | k1 >>> 17;\r\n        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\r\n        h1 ^= k1;\r\n        h1 = h1 << 13 | h1 >>> 19;\r\n        h1 = h1 * 5 + 0xe6546b64;\r\n      } else {\r\n        k2 = dataUint32[i];\r\n        k2 = k2 * C1 & MASK_HIGH | k2 * C1_LOW & MASK_LOW;\r\n        k2 = k2 << 15 | k2 >>> 17;\r\n        k2 = k2 * C2 & MASK_HIGH | k2 * C2_LOW & MASK_LOW;\r\n        h2 ^= k2;\r\n        h2 = h2 << 13 | h2 >>> 19;\r\n        h2 = h2 * 5 + 0xe6546b64;\r\n      }\r\n    }\r\n    k1 = 0;\r\n    switch (tailLength) {\r\n      case 3:\r\n        k1 ^= data[blockCounts * 4 + 2] << 16;\r\n      case 2:\r\n        k1 ^= data[blockCounts * 4 + 1] << 8;\r\n      case 1:\r\n        k1 ^= data[blockCounts * 4];\r\n        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\r\n        k1 = k1 << 15 | k1 >>> 17;\r\n        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\r\n        if (blockCounts & 1) {\r\n          h1 ^= k1;\r\n        } else {\r\n          h2 ^= k1;\r\n        }\r\n    }\r\n    this.h1 = h1;\r\n    this.h2 = h2;\r\n  }\r\n  hexdigest() {\r\n    let h1 = this.h1,\r\n      h2 = this.h2;\r\n    h1 ^= h2 >>> 1;\r\n    h1 = h1 * 0xed558ccd & MASK_HIGH | h1 * 0x8ccd & MASK_LOW;\r\n    h2 = h2 * 0xff51afd7 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xafd7ed55 & MASK_HIGH) >>> 16;\r\n    h1 ^= h2 >>> 1;\r\n    h1 = h1 * 0x1a85ec53 & MASK_HIGH | h1 * 0xec53 & MASK_LOW;\r\n    h2 = h2 * 0xc4ceb9fe & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xb9fe1a85 & MASK_HIGH) >>> 16;\r\n    h1 ^= h2 >>> 1;\r\n    return (h1 >>> 0).toString(16).padStart(8, \"0\") + (h2 >>> 0).toString(16).padStart(8, \"0\");\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n\r\n/***/ 266:\r\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_571605__) => {\r\n\r\n/* harmony export */ __nested_webpack_require_571605__.d(__nested_webpack_exports__, {\r\n/* harmony export */   AbortException: () => (/* binding */ AbortException),\r\n/* harmony export */   AnnotationBorderStyleType: () => (/* binding */ AnnotationBorderStyleType),\r\n/* harmony export */   AnnotationEditorParamsType: () => (/* binding */ AnnotationEditorParamsType),\r\n/* harmony export */   AnnotationEditorPrefix: () => (/* binding */ AnnotationEditorPrefix),\r\n/* harmony export */   AnnotationEditorType: () => (/* binding */ AnnotationEditorType),\r\n/* harmony export */   AnnotationMode: () => (/* binding */ AnnotationMode),\r\n/* harmony export */   AnnotationPrefix: () => (/* binding */ AnnotationPrefix),\r\n/* harmony export */   AnnotationType: () => (/* binding */ AnnotationType),\r\n/* harmony export */   BaseException: () => (/* binding */ BaseException),\r\n/* harmony export */   CMapCompressionType: () => (/* binding */ CMapCompressionType),\r\n/* harmony export */   FONT_IDENTITY_MATRIX: () => (/* binding */ FONT_IDENTITY_MATRIX),\r\n/* harmony export */   FeatureTest: () => (/* binding */ FeatureTest),\r\n/* harmony export */   FormatError: () => (/* binding */ FormatError),\r\n/* harmony export */   IDENTITY_MATRIX: () => (/* binding */ IDENTITY_MATRIX),\r\n/* harmony export */   ImageKind: () => (/* binding */ ImageKind),\r\n/* harmony export */   InvalidPDFException: () => (/* binding */ InvalidPDFException),\r\n/* harmony export */   LINE_FACTOR: () => (/* binding */ LINE_FACTOR),\r\n/* harmony export */   MAX_IMAGE_SIZE_TO_CACHE: () => (/* binding */ MAX_IMAGE_SIZE_TO_CACHE),\r\n/* harmony export */   MissingPDFException: () => (/* binding */ MissingPDFException),\r\n/* harmony export */   OPS: () => (/* binding */ OPS),\r\n/* harmony export */   PasswordException: () => (/* binding */ PasswordException),\r\n/* harmony export */   PasswordResponses: () => (/* binding */ PasswordResponses),\r\n/* harmony export */   PermissionFlag: () => (/* binding */ PermissionFlag),\r\n/* harmony export */   PromiseCapability: () => (/* binding */ PromiseCapability),\r\n/* harmony export */   RenderingIntentFlag: () => (/* binding */ RenderingIntentFlag),\r\n/* harmony export */   TextRenderingMode: () => (/* binding */ TextRenderingMode),\r\n/* harmony export */   UnexpectedResponseException: () => (/* binding */ UnexpectedResponseException),\r\n/* harmony export */   UnknownErrorException: () => (/* binding */ UnknownErrorException),\r\n/* harmony export */   Util: () => (/* binding */ Util),\r\n/* harmony export */   VerbosityLevel: () => (/* binding */ VerbosityLevel),\r\n/* harmony export */   assert: () => (/* binding */ assert),\r\n/* harmony export */   bytesToString: () => (/* binding */ bytesToString),\r\n/* harmony export */   createValidAbsoluteUrl: () => (/* binding */ createValidAbsoluteUrl),\r\n/* harmony export */   getUuid: () => (/* binding */ getUuid),\r\n/* harmony export */   getVerbosityLevel: () => (/* binding */ getVerbosityLevel),\r\n/* harmony export */   info: () => (/* binding */ info),\r\n/* harmony export */   isArrayBuffer: () => (/* binding */ isArrayBuffer),\r\n/* harmony export */   isNodeJS: () => (/* binding */ isNodeJS),\r\n/* harmony export */   normalizeUnicode: () => (/* binding */ normalizeUnicode),\r\n/* harmony export */   objectFromMap: () => (/* binding */ objectFromMap),\r\n/* harmony export */   setVerbosityLevel: () => (/* binding */ setVerbosityLevel),\r\n/* harmony export */   shadow: () => (/* binding */ shadow),\r\n/* harmony export */   string32: () => (/* binding */ string32),\r\n/* harmony export */   stringToBytes: () => (/* binding */ stringToBytes),\r\n/* harmony export */   unreachable: () => (/* binding */ unreachable),\r\n/* harmony export */   warn: () => (/* binding */ warn)\r\n/* harmony export */ });\r\n/* unused harmony exports AnnotationActionEventType, AnnotationFieldFlag, AnnotationFlag, AnnotationReplyType, BASELINE_FACTOR, DocumentActionEventType, getModificationDate, isArrayEqual, LINE_DESCENT_FACTOR, objectSize, PageActionEventType, stringToPDFString, stringToUTF8String, utf8StringToString */\r\nconst isNodeJS = typeof process === \"object\" && process + \"\" === \"[object process]\" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== \"browser\");\r\nconst IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\r\nconst FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\r\nconst MAX_IMAGE_SIZE_TO_CACHE = 10e6;\r\nconst LINE_FACTOR = 1.35;\r\nconst LINE_DESCENT_FACTOR = 0.35;\r\nconst BASELINE_FACTOR = LINE_DESCENT_FACTOR / LINE_FACTOR;\r\nconst RenderingIntentFlag = {\r\n  ANY: 0x01,\r\n  DISPLAY: 0x02,\r\n  PRINT: 0x04,\r\n  SAVE: 0x08,\r\n  ANNOTATIONS_FORMS: 0x10,\r\n  ANNOTATIONS_STORAGE: 0x20,\r\n  ANNOTATIONS_DISABLE: 0x40,\r\n  OPLIST: 0x100\r\n};\r\nconst AnnotationMode = {\r\n  DISABLE: 0,\r\n  ENABLE: 1,\r\n  ENABLE_FORMS: 2,\r\n  ENABLE_STORAGE: 3\r\n};\r\nconst AnnotationEditorPrefix = \"pdfjs_internal_editor_\";\r\nconst AnnotationEditorType = {\r\n  DISABLE: -1,\r\n  NONE: 0,\r\n  FREETEXT: 3,\r\n  HIGHLIGHT: 9,\r\n  STAMP: 13,\r\n  INK: 15\r\n};\r\nconst AnnotationEditorParamsType = {\r\n  RESIZE: 1,\r\n  CREATE: 2,\r\n  FREETEXT_SIZE: 11,\r\n  FREETEXT_COLOR: 12,\r\n  FREETEXT_OPACITY: 13,\r\n  INK_COLOR: 21,\r\n  INK_THICKNESS: 22,\r\n  INK_OPACITY: 23,\r\n  HIGHLIGHT_COLOR: 31,\r\n  HIGHLIGHT_DEFAULT_COLOR: 32\r\n};\r\nconst PermissionFlag = {\r\n  PRINT: 0x04,\r\n  MODIFY_CONTENTS: 0x08,\r\n  COPY: 0x10,\r\n  MODIFY_ANNOTATIONS: 0x20,\r\n  FILL_INTERACTIVE_FORMS: 0x100,\r\n  COPY_FOR_ACCESSIBILITY: 0x200,\r\n  ASSEMBLE: 0x400,\r\n  PRINT_HIGH_QUALITY: 0x800\r\n};\r\nconst TextRenderingMode = {\r\n  FILL: 0,\r\n  STROKE: 1,\r\n  FILL_STROKE: 2,\r\n  INVISIBLE: 3,\r\n  FILL_ADD_TO_PATH: 4,\r\n  STROKE_ADD_TO_PATH: 5,\r\n  FILL_STROKE_ADD_TO_PATH: 6,\r\n  ADD_TO_PATH: 7,\r\n  FILL_STROKE_MASK: 3,\r\n  ADD_TO_PATH_FLAG: 4\r\n};\r\nconst ImageKind = {\r\n  GRAYSCALE_1BPP: 1,\r\n  RGB_24BPP: 2,\r\n  RGBA_32BPP: 3\r\n};\r\nconst AnnotationType = {\r\n  TEXT: 1,\r\n  LINK: 2,\r\n  FREETEXT: 3,\r\n  LINE: 4,\r\n  SQUARE: 5,\r\n  CIRCLE: 6,\r\n  POLYGON: 7,\r\n  POLYLINE: 8,\r\n  HIGHLIGHT: 9,\r\n  UNDERLINE: 10,\r\n  SQUIGGLY: 11,\r\n  STRIKEOUT: 12,\r\n  STAMP: 13,\r\n  CARET: 14,\r\n  INK: 15,\r\n  POPUP: 16,\r\n  FILEATTACHMENT: 17,\r\n  SOUND: 18,\r\n  MOVIE: 19,\r\n  WIDGET: 20,\r\n  SCREEN: 21,\r\n  PRINTERMARK: 22,\r\n  TRAPNET: 23,\r\n  WATERMARK: 24,\r\n  THREED: 25,\r\n  REDACT: 26\r\n};\r\nconst AnnotationReplyType = {\r\n  GROUP: \"Group\",\r\n  REPLY: \"R\"\r\n};\r\nconst AnnotationFlag = {\r\n  INVISIBLE: 0x01,\r\n  HIDDEN: 0x02,\r\n  PRINT: 0x04,\r\n  NOZOOM: 0x08,\r\n  NOROTATE: 0x10,\r\n  NOVIEW: 0x20,\r\n  READONLY: 0x40,\r\n  LOCKED: 0x80,\r\n  TOGGLENOVIEW: 0x100,\r\n  LOCKEDCONTENTS: 0x200\r\n};\r\nconst AnnotationFieldFlag = {\r\n  READONLY: 0x0000001,\r\n  REQUIRED: 0x0000002,\r\n  NOEXPORT: 0x0000004,\r\n  MULTILINE: 0x0001000,\r\n  PASSWORD: 0x0002000,\r\n  NOTOGGLETOOFF: 0x0004000,\r\n  RADIO: 0x0008000,\r\n  PUSHBUTTON: 0x0010000,\r\n  COMBO: 0x0020000,\r\n  EDIT: 0x0040000,\r\n  SORT: 0x0080000,\r\n  FILESELECT: 0x0100000,\r\n  MULTISELECT: 0x0200000,\r\n  DONOTSPELLCHECK: 0x0400000,\r\n  DONOTSCROLL: 0x0800000,\r\n  COMB: 0x1000000,\r\n  RICHTEXT: 0x2000000,\r\n  RADIOSINUNISON: 0x2000000,\r\n  COMMITONSELCHANGE: 0x4000000\r\n};\r\nconst AnnotationBorderStyleType = {\r\n  SOLID: 1,\r\n  DASHED: 2,\r\n  BEVELED: 3,\r\n  INSET: 4,\r\n  UNDERLINE: 5\r\n};\r\nconst AnnotationActionEventType = {\r\n  E: \"Mouse Enter\",\r\n  X: \"Mouse Exit\",\r\n  D: \"Mouse Down\",\r\n  U: \"Mouse Up\",\r\n  Fo: \"Focus\",\r\n  Bl: \"Blur\",\r\n  PO: \"PageOpen\",\r\n  PC: \"PageClose\",\r\n  PV: \"PageVisible\",\r\n  PI: \"PageInvisible\",\r\n  K: \"Keystroke\",\r\n  F: \"Format\",\r\n  V: \"Validate\",\r\n  C: \"Calculate\"\r\n};\r\nconst DocumentActionEventType = {\r\n  WC: \"WillClose\",\r\n  WS: \"WillSave\",\r\n  DS: \"DidSave\",\r\n  WP: \"WillPrint\",\r\n  DP: \"DidPrint\"\r\n};\r\nconst PageActionEventType = {\r\n  O: \"PageOpen\",\r\n  C: \"PageClose\"\r\n};\r\nconst VerbosityLevel = {\r\n  ERRORS: 0,\r\n  WARNINGS: 1,\r\n  INFOS: 5\r\n};\r\nconst CMapCompressionType = {\r\n  NONE: 0,\r\n  BINARY: 1\r\n};\r\nconst OPS = {\r\n  dependency: 1,\r\n  setLineWidth: 2,\r\n  setLineCap: 3,\r\n  setLineJoin: 4,\r\n  setMiterLimit: 5,\r\n  setDash: 6,\r\n  setRenderingIntent: 7,\r\n  setFlatness: 8,\r\n  setGState: 9,\r\n  save: 10,\r\n  restore: 11,\r\n  transform: 12,\r\n  moveTo: 13,\r\n  lineTo: 14,\r\n  curveTo: 15,\r\n  curveTo2: 16,\r\n  curveTo3: 17,\r\n  closePath: 18,\r\n  rectangle: 19,\r\n  stroke: 20,\r\n  closeStroke: 21,\r\n  fill: 22,\r\n  eoFill: 23,\r\n  fillStroke: 24,\r\n  eoFillStroke: 25,\r\n  closeFillStroke: 26,\r\n  closeEOFillStroke: 27,\r\n  endPath: 28,\r\n  clip: 29,\r\n  eoClip: 30,\r\n  beginText: 31,\r\n  endText: 32,\r\n  setCharSpacing: 33,\r\n  setWordSpacing: 34,\r\n  setHScale: 35,\r\n  setLeading: 36,\r\n  setFont: 37,\r\n  setTextRenderingMode: 38,\r\n  setTextRise: 39,\r\n  moveText: 40,\r\n  setLeadingMoveText: 41,\r\n  setTextMatrix: 42,\r\n  nextLine: 43,\r\n  showText: 44,\r\n  showSpacedText: 45,\r\n  nextLineShowText: 46,\r\n  nextLineSetSpacingShowText: 47,\r\n  setCharWidth: 48,\r\n  setCharWidthAndBounds: 49,\r\n  setStrokeColorSpace: 50,\r\n  setFillColorSpace: 51,\r\n  setStrokeColor: 52,\r\n  setStrokeColorN: 53,\r\n  setFillColor: 54,\r\n  setFillColorN: 55,\r\n  setStrokeGray: 56,\r\n  setFillGray: 57,\r\n  setStrokeRGBColor: 58,\r\n  setFillRGBColor: 59,\r\n  setStrokeCMYKColor: 60,\r\n  setFillCMYKColor: 61,\r\n  shadingFill: 62,\r\n  beginInlineImage: 63,\r\n  beginImageData: 64,\r\n  endInlineImage: 65,\r\n  paintXObject: 66,\r\n  markPoint: 67,\r\n  markPointProps: 68,\r\n  beginMarkedContent: 69,\r\n  beginMarkedContentProps: 70,\r\n  endMarkedContent: 71,\r\n  beginCompat: 72,\r\n  endCompat: 73,\r\n  paintFormXObjectBegin: 74,\r\n  paintFormXObjectEnd: 75,\r\n  beginGroup: 76,\r\n  endGroup: 77,\r\n  beginAnnotation: 80,\r\n  endAnnotation: 81,\r\n  paintImageMaskXObject: 83,\r\n  paintImageMaskXObjectGroup: 84,\r\n  paintImageXObject: 85,\r\n  paintInlineImageXObject: 86,\r\n  paintInlineImageXObjectGroup: 87,\r\n  paintImageXObjectRepeat: 88,\r\n  paintImageMaskXObjectRepeat: 89,\r\n  paintSolidColorImageMask: 90,\r\n  constructPath: 91\r\n};\r\nconst PasswordResponses = {\r\n  NEED_PASSWORD: 1,\r\n  INCORRECT_PASSWORD: 2\r\n};\r\nlet verbosity = VerbosityLevel.WARNINGS;\r\nfunction setVerbosityLevel(level) {\r\n  if (Number.isInteger(level)) {\r\n    verbosity = level;\r\n  }\r\n}\r\nfunction getVerbosityLevel() {\r\n  return verbosity;\r\n}\r\nfunction info(msg) {\r\n  if (verbosity >= VerbosityLevel.INFOS) {\r\n    console.log(`Info: ${msg}`);\r\n  }\r\n}\r\nfunction warn(msg) {\r\n  if (verbosity >= VerbosityLevel.WARNINGS) {\r\n    console.log(`Warning: ${msg}`);\r\n  }\r\n}\r\nfunction unreachable(msg) {\r\n  throw new Error(msg);\r\n}\r\nfunction assert(cond, msg) {\r\n  if (!cond) {\r\n    unreachable(msg);\r\n  }\r\n}\r\nfunction _isValidProtocol(url) {\r\n  switch (url?.protocol) {\r\n    case \"http:\":\r\n    case \"https:\":\r\n    case \"ftp:\":\r\n    case \"mailto:\":\r\n    case \"tel:\":\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n}\r\nfunction createValidAbsoluteUrl(url, baseUrl = null, options = null) {\r\n  if (!url) {\r\n    return null;\r\n  }\r\n  try {\r\n    if (options && typeof url === \"string\") {\r\n      if (options.addDefaultProtocol && url.startsWith(\"www.\")) {\r\n        const dots = url.match(/\\./g);\r\n        if (dots?.length >= 2) {\r\n          url = `http://${url}`;\r\n        }\r\n      }\r\n      if (options.tryConvertEncoding) {\r\n        try {\r\n          url = stringToUTF8String(url);\r\n        } catch {}\r\n      }\r\n    }\r\n    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\r\n    if (_isValidProtocol(absoluteUrl)) {\r\n      return absoluteUrl;\r\n    }\r\n  } catch {}\r\n  return null;\r\n}\r\nfunction shadow(obj, prop, value, nonSerializable = false) {\r\n  Object.defineProperty(obj, prop, {\r\n    value,\r\n    enumerable: !nonSerializable,\r\n    configurable: true,\r\n    writable: false\r\n  });\r\n  return value;\r\n}\r\nconst BaseException = function BaseExceptionClosure() {\r\n  function BaseException(message, name) {\r\n    if (this.constructor === BaseException) {\r\n      unreachable(\"Cannot initialize BaseException.\");\r\n    }\r\n    this.message = message;\r\n    this.name = name;\r\n  }\r\n  BaseException.prototype = new Error();\r\n  BaseException.constructor = BaseException;\r\n  return BaseException;\r\n}();\r\nclass PasswordException extends BaseException {\r\n  constructor(msg, code) {\r\n    super(msg, \"PasswordException\");\r\n    this.code = code;\r\n  }\r\n}\r\nclass UnknownErrorException extends BaseException {\r\n  constructor(msg, details) {\r\n    super(msg, \"UnknownErrorException\");\r\n    this.details = details;\r\n  }\r\n}\r\nclass InvalidPDFException extends BaseException {\r\n  constructor(msg) {\r\n    super(msg, \"InvalidPDFException\");\r\n  }\r\n}\r\nclass MissingPDFException extends BaseException {\r\n  constructor(msg) {\r\n    super(msg, \"MissingPDFException\");\r\n  }\r\n}\r\nclass UnexpectedResponseException extends BaseException {\r\n  constructor(msg, status) {\r\n    super(msg, \"UnexpectedResponseException\");\r\n    this.status = status;\r\n  }\r\n}\r\nclass FormatError extends BaseException {\r\n  constructor(msg) {\r\n    super(msg, \"FormatError\");\r\n  }\r\n}\r\nclass AbortException extends BaseException {\r\n  constructor(msg) {\r\n    super(msg, \"AbortException\");\r\n  }\r\n}\r\nfunction bytesToString(bytes) {\r\n  if (typeof bytes !== \"object\" || bytes?.length === undefined) {\r\n    unreachable(\"Invalid argument for bytesToString\");\r\n  }\r\n  const length = bytes.length;\r\n  const MAX_ARGUMENT_COUNT = 8192;\r\n  if (length < MAX_ARGUMENT_COUNT) {\r\n    return String.fromCharCode.apply(null, bytes);\r\n  }\r\n  const strBuf = [];\r\n  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\r\n    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\r\n    const chunk = bytes.subarray(i, chunkEnd);\r\n    strBuf.push(String.fromCharCode.apply(null, chunk));\r\n  }\r\n  return strBuf.join(\"\");\r\n}\r\nfunction stringToBytes(str) {\r\n  if (typeof str !== \"string\") {\r\n    unreachable(\"Invalid argument for stringToBytes\");\r\n  }\r\n  const length = str.length;\r\n  const bytes = new Uint8Array(length);\r\n  for (let i = 0; i < length; ++i) {\r\n    bytes[i] = str.charCodeAt(i) & 0xff;\r\n  }\r\n  return bytes;\r\n}\r\nfunction string32(value) {\r\n  return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\r\n}\r\nfunction objectSize(obj) {\r\n  return Object.keys(obj).length;\r\n}\r\nfunction objectFromMap(map) {\r\n  const obj = Object.create(null);\r\n  for (const [key, value] of map) {\r\n    obj[key] = value;\r\n  }\r\n  return obj;\r\n}\r\nfunction isLittleEndian() {\r\n  const buffer8 = new Uint8Array(4);\r\n  buffer8[0] = 1;\r\n  const view32 = new Uint32Array(buffer8.buffer, 0, 1);\r\n  return view32[0] === 1;\r\n}\r\nfunction isEvalSupported() {\r\n  try {\r\n    new Function(\"\");\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\nclass FeatureTest {\r\n  static get isLittleEndian() {\r\n    return shadow(this, \"isLittleEndian\", isLittleEndian());\r\n  }\r\n  static get isEvalSupported() {\r\n    return shadow(this, \"isEvalSupported\", isEvalSupported());\r\n  }\r\n  static get isOffscreenCanvasSupported() {\r\n    return shadow(this, \"isOffscreenCanvasSupported\", typeof OffscreenCanvas !== \"undefined\");\r\n  }\r\n  static get platform() {\r\n    if (typeof navigator !== \"undefined\" && typeof navigator?.platform === \"string\") {\r\n      return shadow(this, \"platform\", {\r\n        isMac: navigator.platform.includes(\"Mac\")\r\n      });\r\n    }\r\n    return shadow(this, \"platform\", {\r\n      isMac: false\r\n    });\r\n  }\r\n  static get isCSSRoundSupported() {\r\n    return shadow(this, \"isCSSRoundSupported\", globalThis.CSS?.supports?.(\"width: round(1.5px, 1px)\"));\r\n  }\r\n}\r\nconst hexNumbers = [...Array(256).keys()].map(n => n.toString(16).padStart(2, \"0\"));\r\nclass Util {\r\n  static makeHexColor(r, g, b) {\r\n    return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\r\n  }\r\n  static scaleMinMax(transform, minMax) {\r\n    let temp;\r\n    if (transform[0]) {\r\n      if (transform[0] < 0) {\r\n        temp = minMax[0];\r\n        minMax[0] = minMax[1];\r\n        minMax[1] = temp;\r\n      }\r\n      minMax[0] *= transform[0];\r\n      minMax[1] *= transform[0];\r\n      if (transform[3] < 0) {\r\n        temp = minMax[2];\r\n        minMax[2] = minMax[3];\r\n        minMax[3] = temp;\r\n      }\r\n      minMax[2] *= transform[3];\r\n      minMax[3] *= transform[3];\r\n    } else {\r\n      temp = minMax[0];\r\n      minMax[0] = minMax[2];\r\n      minMax[2] = temp;\r\n      temp = minMax[1];\r\n      minMax[1] = minMax[3];\r\n      minMax[3] = temp;\r\n      if (transform[1] < 0) {\r\n        temp = minMax[2];\r\n        minMax[2] = minMax[3];\r\n        minMax[3] = temp;\r\n      }\r\n      minMax[2] *= transform[1];\r\n      minMax[3] *= transform[1];\r\n      if (transform[2] < 0) {\r\n        temp = minMax[0];\r\n        minMax[0] = minMax[1];\r\n        minMax[1] = temp;\r\n      }\r\n      minMax[0] *= transform[2];\r\n      minMax[1] *= transform[2];\r\n    }\r\n    minMax[0] += transform[4];\r\n    minMax[1] += transform[4];\r\n    minMax[2] += transform[5];\r\n    minMax[3] += transform[5];\r\n  }\r\n  static transform(m1, m2) {\r\n    return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\r\n  }\r\n  static applyTransform(p, m) {\r\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\r\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\r\n    return [xt, yt];\r\n  }\r\n  static applyInverseTransform(p, m) {\r\n    const d = m[0] * m[3] - m[1] * m[2];\r\n    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\r\n    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\r\n    return [xt, yt];\r\n  }\r\n  static getAxialAlignedBoundingBox(r, m) {\r\n    const p1 = this.applyTransform(r, m);\r\n    const p2 = this.applyTransform(r.slice(2, 4), m);\r\n    const p3 = this.applyTransform([r[0], r[3]], m);\r\n    const p4 = this.applyTransform([r[2], r[1]], m);\r\n    return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\r\n  }\r\n  static inverseTransform(m) {\r\n    const d = m[0] * m[3] - m[1] * m[2];\r\n    return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\r\n  }\r\n  static singularValueDecompose2dScale(m) {\r\n    const transpose = [m[0], m[2], m[1], m[3]];\r\n    const a = m[0] * transpose[0] + m[1] * transpose[2];\r\n    const b = m[0] * transpose[1] + m[1] * transpose[3];\r\n    const c = m[2] * transpose[0] + m[3] * transpose[2];\r\n    const d = m[2] * transpose[1] + m[3] * transpose[3];\r\n    const first = (a + d) / 2;\r\n    const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\r\n    const sx = first + second || 1;\r\n    const sy = first - second || 1;\r\n    return [Math.sqrt(sx), Math.sqrt(sy)];\r\n  }\r\n  static normalizeRect(rect) {\r\n    const r = rect.slice(0);\r\n    if (rect[0] > rect[2]) {\r\n      r[0] = rect[2];\r\n      r[2] = rect[0];\r\n    }\r\n    if (rect[1] > rect[3]) {\r\n      r[1] = rect[3];\r\n      r[3] = rect[1];\r\n    }\r\n    return r;\r\n  }\r\n  static intersect(rect1, rect2) {\r\n    const xLow = Math.max(Math.min(rect1[0], rect1[2]), Math.min(rect2[0], rect2[2]));\r\n    const xHigh = Math.min(Math.max(rect1[0], rect1[2]), Math.max(rect2[0], rect2[2]));\r\n    if (xLow > xHigh) {\r\n      return null;\r\n    }\r\n    const yLow = Math.max(Math.min(rect1[1], rect1[3]), Math.min(rect2[1], rect2[3]));\r\n    const yHigh = Math.min(Math.max(rect1[1], rect1[3]), Math.max(rect2[1], rect2[3]));\r\n    if (yLow > yHigh) {\r\n      return null;\r\n    }\r\n    return [xLow, yLow, xHigh, yHigh];\r\n  }\r\n  static bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3) {\r\n    const tvalues = [],\r\n      bounds = [[], []];\r\n    let a, b, c, t, t1, t2, b2ac, sqrtb2ac;\r\n    for (let i = 0; i < 2; ++i) {\r\n      if (i === 0) {\r\n        b = 6 * x0 - 12 * x1 + 6 * x2;\r\n        a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\r\n        c = 3 * x1 - 3 * x0;\r\n      } else {\r\n        b = 6 * y0 - 12 * y1 + 6 * y2;\r\n        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\r\n        c = 3 * y1 - 3 * y0;\r\n      }\r\n      if (Math.abs(a) < 1e-12) {\r\n        if (Math.abs(b) < 1e-12) {\r\n          continue;\r\n        }\r\n        t = -c / b;\r\n        if (0 < t && t < 1) {\r\n          tvalues.push(t);\r\n        }\r\n        continue;\r\n      }\r\n      b2ac = b * b - 4 * c * a;\r\n      sqrtb2ac = Math.sqrt(b2ac);\r\n      if (b2ac < 0) {\r\n        continue;\r\n      }\r\n      t1 = (-b + sqrtb2ac) / (2 * a);\r\n      if (0 < t1 && t1 < 1) {\r\n        tvalues.push(t1);\r\n      }\r\n      t2 = (-b - sqrtb2ac) / (2 * a);\r\n      if (0 < t2 && t2 < 1) {\r\n        tvalues.push(t2);\r\n      }\r\n    }\r\n    let j = tvalues.length,\r\n      mt;\r\n    const jlen = j;\r\n    while (j--) {\r\n      t = tvalues[j];\r\n      mt = 1 - t;\r\n      bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\r\n      bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\r\n    }\r\n    bounds[0][jlen] = x0;\r\n    bounds[1][jlen] = y0;\r\n    bounds[0][jlen + 1] = x3;\r\n    bounds[1][jlen + 1] = y3;\r\n    bounds[0].length = bounds[1].length = jlen + 2;\r\n    return [Math.min(...bounds[0]), Math.min(...bounds[1]), Math.max(...bounds[0]), Math.max(...bounds[1])];\r\n  }\r\n}\r\nconst PDFStringTranslateTable = (/* unused pure expression or super */ null && (0));\r\nfunction stringToPDFString(str) {\r\n  if (str[0] >= \"\\xEF\") {\r\n    let encoding;\r\n    if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\r\n      encoding = \"utf-16be\";\r\n      if (str.length % 2 === 1) {\r\n        str = str.slice(0, -1);\r\n      }\r\n    } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\r\n      encoding = \"utf-16le\";\r\n      if (str.length % 2 === 1) {\r\n        str = str.slice(0, -1);\r\n      }\r\n    } else if (str[0] === \"\\xEF\" && str[1] === \"\\xBB\" && str[2] === \"\\xBF\") {\r\n      encoding = \"utf-8\";\r\n    }\r\n    if (encoding) {\r\n      try {\r\n        const decoder = new TextDecoder(encoding, {\r\n          fatal: true\r\n        });\r\n        const buffer = stringToBytes(str);\r\n        const decoded = decoder.decode(buffer);\r\n        if (!decoded.includes(\"\\x1b\")) {\r\n          return decoded;\r\n        }\r\n        return decoded.replaceAll(/\\x1b[^\\x1b]*(?:\\x1b|$)/g, \"\");\r\n      } catch (ex) {\r\n        warn(`stringToPDFString: \"${ex}\".`);\r\n      }\r\n    }\r\n  }\r\n  const strBuf = [];\r\n  for (let i = 0, ii = str.length; i < ii; i++) {\r\n    const charCode = str.charCodeAt(i);\r\n    if (charCode === 0x1b) {\r\n      while (++i < ii && str.charCodeAt(i) !== 0x1b) {}\r\n      continue;\r\n    }\r\n    const code = PDFStringTranslateTable[charCode];\r\n    strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\r\n  }\r\n  return strBuf.join(\"\");\r\n}\r\nfunction stringToUTF8String(str) {\r\n  return decodeURIComponent(escape(str));\r\n}\r\nfunction utf8StringToString(str) {\r\n  return unescape(encodeURIComponent(str));\r\n}\r\nfunction isArrayBuffer(v) {\r\n  return typeof v === \"object\" && v?.byteLength !== undefined;\r\n}\r\nfunction isArrayEqual(arr1, arr2) {\r\n  if (arr1.length !== arr2.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0, ii = arr1.length; i < ii; i++) {\r\n    if (arr1[i] !== arr2[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nfunction getModificationDate(date = new Date()) {\r\n  const buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, \"0\"), date.getUTCDate().toString().padStart(2, \"0\"), date.getUTCHours().toString().padStart(2, \"0\"), date.getUTCMinutes().toString().padStart(2, \"0\"), date.getUTCSeconds().toString().padStart(2, \"0\")];\r\n  return buffer.join(\"\");\r\n}\r\nclass PromiseCapability {\r\n  #settled = false;\r\n  constructor() {\r\n    this.promise = new Promise((resolve, reject) => {\r\n      this.resolve = data => {\r\n        this.#settled = true;\r\n        resolve(data);\r\n      };\r\n      this.reject = reason => {\r\n        this.#settled = true;\r\n        reject(reason);\r\n      };\r\n    });\r\n  }\r\n  get settled() {\r\n    return this.#settled;\r\n  }\r\n}\r\nlet NormalizeRegex = null;\r\nlet NormalizationMap = null;\r\nfunction normalizeUnicode(str) {\r\n  if (!NormalizeRegex) {\r\n    NormalizeRegex = /([\\u00a0\\u00b5\\u037e\\u0eb3\\u2000-\\u200a\\u202f\\u2126\\ufb00-\\ufb04\\ufb06\\ufb20-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufba1\\ufba4-\\ufba9\\ufbae-\\ufbb1\\ufbd3-\\ufbdc\\ufbde-\\ufbe7\\ufbea-\\ufbf8\\ufbfc-\\ufbfd\\ufc00-\\ufc5d\\ufc64-\\ufcf1\\ufcf5-\\ufd3d\\ufd88\\ufdf4\\ufdfa-\\ufdfb\\ufe71\\ufe77\\ufe79\\ufe7b\\ufe7d]+)|(\\ufb05+)/gu;\r\n    NormalizationMap = new Map([[\"ﬅ\", \"ſt\"]]);\r\n  }\r\n  return str.replaceAll(NormalizeRegex, (_, p1, p2) => {\r\n    return p1 ? p1.normalize(\"NFKC\") : NormalizationMap.get(p2);\r\n  });\r\n}\r\nfunction getUuid() {\r\n  if (typeof crypto !== \"undefined\" && typeof crypto?.randomUUID === \"function\") {\r\n    return crypto.randomUUID();\r\n  }\r\n  const buf = new Uint8Array(32);\r\n  if (typeof crypto !== \"undefined\" && typeof crypto?.getRandomValues === \"function\") {\r\n    crypto.getRandomValues(buf);\r\n  } else {\r\n    for (let i = 0; i < 32; i++) {\r\n      buf[i] = Math.floor(Math.random() * 255);\r\n    }\r\n  }\r\n  return bytesToString(buf);\r\n}\r\nconst AnnotationPrefix = \"pdfjs_internal_id_\";\r\n\r\n\r\n/***/ })\r\n\r\n/******/ });\r\n/************************************************************************/\r\n/******/ // The module cache\r\n/******/ var __webpack_module_cache__ = {};\r\n/******/ \r\n/******/ // The require function\r\n/******/ function __nested_webpack_require_597229__(moduleId) {\r\n/******/ \t// Check if module is in cache\r\n/******/ \tvar cachedModule = __webpack_module_cache__[moduleId];\r\n/******/ \tif (cachedModule !== undefined) {\r\n/******/ \t\treturn cachedModule.exports;\r\n/******/ \t}\r\n/******/ \t// Create a new module (and put it into the cache)\r\n/******/ \tvar module = __webpack_module_cache__[moduleId] = {\r\n/******/ \t\t// no module.id needed\r\n/******/ \t\t// no module.loaded needed\r\n/******/ \t\texports: {}\r\n/******/ \t};\r\n/******/ \r\n/******/ \t// Execute the module function\r\n/******/ \t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_597229__);\r\n/******/ \r\n/******/ \t// Return the exports of the module\r\n/******/ \treturn module.exports;\r\n/******/ }\r\n/******/ \r\n/************************************************************************/\r\n/******/ /* webpack/runtime/async module */\r\n/******/ (() => {\r\n/******/ \tvar webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\r\n/******/ \tvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\r\n/******/ \tvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\r\n/******/ \tvar resolveQueue = (queue) => {\r\n/******/ \t\tif(queue && queue.d < 1) {\r\n/******/ \t\t\tqueue.d = 1;\r\n/******/ \t\t\tqueue.forEach((fn) => (fn.r--));\r\n/******/ \t\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\r\n/******/ \t\t}\r\n/******/ \t}\r\n/******/ \tvar wrapDeps = (deps) => (deps.map((dep) => {\r\n/******/ \t\tif(dep !== null && typeof dep === \"object\") {\r\n/******/ \t\t\tif(dep[webpackQueues]) return dep;\r\n/******/ \t\t\tif(dep.then) {\r\n/******/ \t\t\t\tvar queue = [];\r\n/******/ \t\t\t\tqueue.d = 0;\r\n/******/ \t\t\t\tdep.then((r) => {\r\n/******/ \t\t\t\t\tobj[webpackExports] = r;\r\n/******/ \t\t\t\t\tresolveQueue(queue);\r\n/******/ \t\t\t\t}, (e) => {\r\n/******/ \t\t\t\t\tobj[webpackError] = e;\r\n/******/ \t\t\t\t\tresolveQueue(queue);\r\n/******/ \t\t\t\t});\r\n/******/ \t\t\t\tvar obj = {};\r\n/******/ \t\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\r\n/******/ \t\t\t\treturn obj;\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\tvar ret = {};\r\n/******/ \t\tret[webpackQueues] = x => {};\r\n/******/ \t\tret[webpackExports] = dep;\r\n/******/ \t\treturn ret;\r\n/******/ \t}));\r\n/******/ \t__nested_webpack_require_597229__.a = (module, body, hasAwait) => {\r\n/******/ \t\tvar queue;\r\n/******/ \t\thasAwait && ((queue = []).d = -1);\r\n/******/ \t\tvar depQueues = new Set();\r\n/******/ \t\tvar exports = module.exports;\r\n/******/ \t\tvar currentDeps;\r\n/******/ \t\tvar outerResolve;\r\n/******/ \t\tvar reject;\r\n/******/ \t\tvar promise = new Promise((resolve, rej) => {\r\n/******/ \t\t\treject = rej;\r\n/******/ \t\t\touterResolve = resolve;\r\n/******/ \t\t});\r\n/******/ \t\tpromise[webpackExports] = exports;\r\n/******/ \t\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\r\n/******/ \t\tmodule.exports = promise;\r\n/******/ \t\tbody((deps) => {\r\n/******/ \t\t\tcurrentDeps = wrapDeps(deps);\r\n/******/ \t\t\tvar fn;\r\n/******/ \t\t\tvar getResult = () => (currentDeps.map((d) => {\r\n/******/ \t\t\t\tif(d[webpackError]) throw d[webpackError];\r\n/******/ \t\t\t\treturn d[webpackExports];\r\n/******/ \t\t\t}))\r\n/******/ \t\t\tvar promise = new Promise((resolve) => {\r\n/******/ \t\t\t\tfn = () => (resolve(getResult));\r\n/******/ \t\t\t\tfn.r = 0;\r\n/******/ \t\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\r\n/******/ \t\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\r\n/******/ \t\t\t});\r\n/******/ \t\t\treturn fn.r ? promise : getResult();\r\n/******/ \t\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\r\n/******/ \t\tqueue && queue.d < 0 && (queue.d = 0);\r\n/******/ \t};\r\n/******/ })();\r\n/******/ \r\n/******/ /* webpack/runtime/define property getters */\r\n/******/ (() => {\r\n/******/ \t// define getter functions for harmony exports\r\n/******/ \t__nested_webpack_require_597229__.d = (exports, definition) => {\r\n/******/ \t\tfor(var key in definition) {\r\n/******/ \t\t\tif(__nested_webpack_require_597229__.o(definition, key) && !__nested_webpack_require_597229__.o(exports, key)) {\r\n/******/ \t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/ })();\r\n/******/ \r\n/******/ /* webpack/runtime/hasOwnProperty shorthand */\r\n/******/ (() => {\r\n/******/ \t__nested_webpack_require_597229__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\r\n/******/ })();\r\n/******/ \r\n/************************************************************************/\r\n/******/ \r\n/******/ // startup\r\n/******/ // Load entry module and return exports\r\n/******/ // This entry module used 'module' so it can't be inlined\r\n/******/ var __nested_webpack_exports__ = __nested_webpack_require_597229__(907);\r\n/******/ __nested_webpack_exports__ = globalThis.pdfjsLib = await (globalThis.pdfjsLibPromise = __nested_webpack_exports__);\r\n/******/ var __webpack_exports__AbortException = __nested_webpack_exports__.AbortException;\r\n/******/ var __webpack_exports__AnnotationEditorLayer = __nested_webpack_exports__.AnnotationEditorLayer;\r\n/******/ var __webpack_exports__AnnotationEditorParamsType = __nested_webpack_exports__.AnnotationEditorParamsType;\r\n/******/ var __webpack_exports__AnnotationEditorType = __nested_webpack_exports__.AnnotationEditorType;\r\n/******/ var __webpack_exports__AnnotationEditorUIManager = __nested_webpack_exports__.AnnotationEditorUIManager;\r\n/******/ var __webpack_exports__AnnotationLayer = __nested_webpack_exports__.AnnotationLayer;\r\n/******/ var __webpack_exports__AnnotationMode = __nested_webpack_exports__.AnnotationMode;\r\n/******/ var __webpack_exports__CMapCompressionType = __nested_webpack_exports__.CMapCompressionType;\r\n/******/ var __webpack_exports__ColorPicker = __nested_webpack_exports__.ColorPicker;\r\n/******/ var __webpack_exports__DOMSVGFactory = __nested_webpack_exports__.DOMSVGFactory;\r\n/******/ var __webpack_exports__DrawLayer = __nested_webpack_exports__.DrawLayer;\r\n/******/ var __webpack_exports__FeatureTest = __nested_webpack_exports__.FeatureTest;\r\n/******/ var __webpack_exports__GlobalWorkerOptions = __nested_webpack_exports__.GlobalWorkerOptions;\r\n/******/ var __webpack_exports__ImageKind = __nested_webpack_exports__.ImageKind;\r\n/******/ var __webpack_exports__InvalidPDFException = __nested_webpack_exports__.InvalidPDFException;\r\n/******/ var __webpack_exports__MissingPDFException = __nested_webpack_exports__.MissingPDFException;\r\n/******/ var __webpack_exports__OPS = __nested_webpack_exports__.OPS;\r\n/******/ var __webpack_exports__Outliner = __nested_webpack_exports__.Outliner;\r\n/******/ var __webpack_exports__PDFDataRangeTransport = __nested_webpack_exports__.PDFDataRangeTransport;\r\n/******/ var __webpack_exports__PDFDateString = __nested_webpack_exports__.PDFDateString;\r\n/******/ var __webpack_exports__PDFWorker = __nested_webpack_exports__.PDFWorker;\r\n/******/ var __webpack_exports__PasswordResponses = __nested_webpack_exports__.PasswordResponses;\r\n/******/ var __webpack_exports__PermissionFlag = __nested_webpack_exports__.PermissionFlag;\r\n/******/ var __webpack_exports__PixelsPerInch = __nested_webpack_exports__.PixelsPerInch;\r\n/******/ var __webpack_exports__PromiseCapability = __nested_webpack_exports__.PromiseCapability;\r\n/******/ var __webpack_exports__RenderingCancelledException = __nested_webpack_exports__.RenderingCancelledException;\r\n/******/ var __webpack_exports__UnexpectedResponseException = __nested_webpack_exports__.UnexpectedResponseException;\r\n/******/ var __webpack_exports__Util = __nested_webpack_exports__.Util;\r\n/******/ var __webpack_exports__VerbosityLevel = __nested_webpack_exports__.VerbosityLevel;\r\n/******/ var __webpack_exports__XfaLayer = __nested_webpack_exports__.XfaLayer;\r\n/******/ var __webpack_exports__build = __nested_webpack_exports__.build;\r\n/******/ var __webpack_exports__createValidAbsoluteUrl = __nested_webpack_exports__.createValidAbsoluteUrl;\r\n/******/ var __webpack_exports__fetchData = __nested_webpack_exports__.fetchData;\r\n/******/ var __webpack_exports__getDocument = __nested_webpack_exports__.getDocument;\r\n/******/ var __webpack_exports__getFilenameFromUrl = __nested_webpack_exports__.getFilenameFromUrl;\r\n/******/ var __webpack_exports__getPdfFilenameFromUrl = __nested_webpack_exports__.getPdfFilenameFromUrl;\r\n/******/ var __webpack_exports__getXfaPageViewport = __nested_webpack_exports__.getXfaPageViewport;\r\n/******/ var __webpack_exports__isDataScheme = __nested_webpack_exports__.isDataScheme;\r\n/******/ var __webpack_exports__isPdfFile = __nested_webpack_exports__.isPdfFile;\r\n/******/ var __webpack_exports__noContextMenu = __nested_webpack_exports__.noContextMenu;\r\n/******/ var __webpack_exports__normalizeUnicode = __nested_webpack_exports__.normalizeUnicode;\r\n/******/ var __webpack_exports__renderTextLayer = __nested_webpack_exports__.renderTextLayer;\r\n/******/ var __webpack_exports__setLayerDimensions = __nested_webpack_exports__.setLayerDimensions;\r\n/******/ var __webpack_exports__shadow = __nested_webpack_exports__.shadow;\r\n/******/ var __webpack_exports__updateTextLayer = __nested_webpack_exports__.updateTextLayer;\r\n/******/ var __webpack_exports__version = __nested_webpack_exports__.version;\r\n/******/ \r\n/******/ \r\n\r\n//# sourceMappingURL=pdf.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://sample-pdf/./pdf.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/async module */
/******/ 	(() => {
/******/ 		var webpackQueues = typeof Symbol === "function" ? Symbol("webpack queues") : "__webpack_queues__";
/******/ 		var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 		var webpackError = typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
/******/ 		var resolveQueue = (queue) => {
/******/ 			if(queue && queue.d < 1) {
/******/ 				queue.d = 1;
/******/ 				queue.forEach((fn) => (fn.r--));
/******/ 				queue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));
/******/ 			}
/******/ 		}
/******/ 		var wrapDeps = (deps) => (deps.map((dep) => {
/******/ 			if(dep !== null && typeof dep === "object") {
/******/ 				if(dep[webpackQueues]) return dep;
/******/ 				if(dep.then) {
/******/ 					var queue = [];
/******/ 					queue.d = 0;
/******/ 					dep.then((r) => {
/******/ 						obj[webpackExports] = r;
/******/ 						resolveQueue(queue);
/******/ 					}, (e) => {
/******/ 						obj[webpackError] = e;
/******/ 						resolveQueue(queue);
/******/ 					});
/******/ 					var obj = {};
/******/ 					obj[webpackQueues] = (fn) => (fn(queue));
/******/ 					return obj;
/******/ 				}
/******/ 			}
/******/ 			var ret = {};
/******/ 			ret[webpackQueues] = x => {};
/******/ 			ret[webpackExports] = dep;
/******/ 			return ret;
/******/ 		}));
/******/ 		__webpack_require__.a = (module, body, hasAwait) => {
/******/ 			var queue;
/******/ 			hasAwait && ((queue = []).d = -1);
/******/ 			var depQueues = new Set();
/******/ 			var exports = module.exports;
/******/ 			var currentDeps;
/******/ 			var outerResolve;
/******/ 			var reject;
/******/ 			var promise = new Promise((resolve, rej) => {
/******/ 				reject = rej;
/******/ 				outerResolve = resolve;
/******/ 			});
/******/ 			promise[webpackExports] = exports;
/******/ 			promise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise["catch"](x => {}));
/******/ 			module.exports = promise;
/******/ 			body((deps) => {
/******/ 				currentDeps = wrapDeps(deps);
/******/ 				var fn;
/******/ 				var getResult = () => (currentDeps.map((d) => {
/******/ 					if(d[webpackError]) throw d[webpackError];
/******/ 					return d[webpackExports];
/******/ 				}))
/******/ 				var promise = new Promise((resolve) => {
/******/ 					fn = () => (resolve(getResult));
/******/ 					fn.r = 0;
/******/ 					var fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));
/******/ 					currentDeps.map((dep) => (dep[webpackQueues](fnQueue)));
/******/ 				});
/******/ 				return fn.r ? promise : getResult();
/******/ 			}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));
/******/ 			queue && queue.d < 0 && (queue.d = 0);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./main.js");
/******/ 	
/******/ })()
;